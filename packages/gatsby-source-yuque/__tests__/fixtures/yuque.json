[
  {
    "id": 53768710,
    "title": "一顿操作猛如虎，部署一个万能 BFF",
    "description": "通过将 gatsby 的本地开发 GraphQL 服务器 Serverless 化，借助其强大和丰富的插件系统以及生态，实现一个万能的 BFF 层。Gatsby JsGatsby Js 最初的定位是一个静态站点生成器，和一般的静态站点生成器不同，它拥有丰富的源插件，可以从各种数据源同步数据，通...",
    "custom_description": null,
    "updated_at": "2021-09-20T02:46:24.000Z",
    "created_at": "2021-09-20T02:46:24.000Z",
    "slug": "ee4y3g",
    "word_count": 2035,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1632103436787-c0c0c672-5eb5-4068-936e-bc082b00327a.png",
    "body": "> 通过将 gatsby 的本地开发 GraphQL 服务器 Serverless 化，借助其强大和丰富的插件系统以及生态，实现一个万能的 BFF 层。\n\n\n\n<a name=\"McS6U\"></a>\n# Gatsby Js\n​\n\nGatsby Js 最初的定位是一个静态站点生成器，和一般的静态站点生成器不同，它拥有丰富的源插件，可以从各种数据源同步数据，通过 GraphQL Server 将这些数据暴露给客户端。<br />​\n\n由于它追求极致的性能和用户体验，因此其 GraphQL Server 只在站点生成阶段运行。也就是说，在本地开发和站点编译时，拥有一个动态服务器，编译阶段，会读取所有的数据，最终生成静态的 html 文件，并且分发到强大的 CDN 网络，从而实现页面秒开效果。<br />​\n\ngatsby 的生态，几乎集成了一切数据源，不管是调用 API、还是读取数据库、还是直接解析各种配置文件或者 markdown，都不用再写代码，只需要添加相关插件即可。尽管目前这一切只发生在编译阶段，但是只需要稍作魔改，就能将其部署成一个动态服务，变成一个万能 BFF！<br />​<br />\n<a name=\"biINm\"></a>\n# BFF 层\n​\n\n我不仅被它的极致用户体验解决方案所吸引，还被它的本地 GraphQL Server 所吸引，凭借它丰富的插件，它这个 GraphQL Server 就是一个天然优秀的 BFF 层呀！<br />​\n\n虽然其本地 GraphQL Server 只是用来生成静态站点的，但是如果能将它部署到公网，就可以实时为多端提供服务了，不仅网站可以使用其数据源，小程序，APP 都可以使用。<br />​\n\nBFF 层的提出，本来是针对不同的端提供不同的 BFF 服务，但由于使用了 GraphQL，将服务的聚合裁剪功能扔到前端，于是一个服务就能同时给到不同的端。<br />​<br />\n<a name=\"AccYj\"></a>\n# 免费的 AWS lambda\n​\n\n部署到公网很有吸引力，但是要花钱的话，就没意思了。<br />​\n\n于是，我把目光瞄准了 AWS lambda，它的免费额度够我用的了。<br />​<br />\n<a name=\"n76Vg\"></a>\n# 说干就干\n​\n\n最终效果演示： [https://jqp5j170i6.execute-api.us-east-1.amazonaws.com/dev/gatsby/graphql](https://jqp5j170i6.execute-api.us-east-1.amazonaws.com/dev/gatsby/graphql)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1632103436787-c0c0c672-5eb5-4068-936e-bc082b00327a.png#clientId=ub7561baf-757a-4&from=paste&height=713&id=u87598e79&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1426&originWidth=2686&originalType=binary∶=1&size=357075&status=done&style=none&taskId=u158ec210-4189-4c12-81f4-a88acc7f10d&width=1343)<br />源代码库： [https://github.com/Jeff-Tian/serverless-space](https://github.com/Jeff-Tian/serverless-space) <br />​\n\n源代码库代码较多，主要是把 gatsby-js 的一个库 gatsby-recipes 拷贝过来做了一番魔改，以绕过 AWS lambda 环境中，不能写文件的问题。下面对主要的改造过程做个分解。<br />​<br />\n<a name=\"jMMOQ\"></a>\n# Serverless\n​\n\nServerless 本意是去掉服务器，让开发者只需要关注业务逻辑，不用管基础设施，不同的云厂商对其有不同的实现。Serverless 框架做了个抽象，让开发者通过一个统一的 yaml 文件定义服务，它来对不同的云厂商做具体的适配。<br />​<br />\n<a name=\"qCRph\"></a>\n## 安装\n​<br />\n```shell\nnpm install -g serverless\n```\n\n\n<a name=\"CxvYV\"></a>\n## 定义服务\n​\n\nserverless.yml\n```yaml\nservice: serverless-space\n\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  lambdaHashingVersion: 20201221\n  \npackage:\n  patterns:\n    - '!node_modules/**'\n    - '!layers/**'\n    \nfunctions:\n  gatsby:\n    handler: dist/src/gatsby.handler\n    layers:\n      - {Ref: LibLambdaLayer}\n    events:\n      - http:\n          method: ANY\n          path: gatsby/\n      - http:\n          method: ANY\n          path: 'gatsby/{proxy+}'\n    environment:\n      SERVERLESS_EXPRESS_PLATFORM: aws\n      \n\nplugins:\n  - serverless-plugin-layer-manager\n  - serverless-offline\n  - serverless-express\n\nlayers:\n  lib:\n    path: layers\n    name: space-lib\n    description: My dependencies\n    retain: true\n\n```\n从上面可以看到，定义中使用了一些插件，serverless-offline 和 serverless-express 是为了方便本地运行用的，实现 `serverless offline` 在本地环境下模拟 lambda。而 serverless-plugin-layer-manager 则是用来对 lambda 分层。通过使用这个插件，只需要定义层就好，省去了手动压缩、上传、关联等等繁杂的工作，非常方便。<br />​<br />\n<a name=\"BUic8\"></a>\n## 分层\n​\n\n分层的好处是把变动不频繁的 node_modules 部分与变动频繁的应用业务逻辑代码隔离，从而减小每次发布时的网络传输大小，以及可以实现同一个层同时为多个 lambda 服务。<br />​\n\n在 serverless yaml 配置文件里，对于分层有个命名约定。比如你的分层命名为 xxx，那么在引用它时，就要用 {Ref: XxxLambdaLayer}，并且注意大小写。<br />​<br />\n<a name=\"r9pPz\"></a>\n## 全局安装 serverless 及其插件\n​\n\n这并不是必需的，但是推荐。原因是无论是对于 lambda 应用代码，以及 node_modules 分层大小，都有一个 250 M 的上限，这个上限是压缩前的大小。如果不采用全局安装，会导致 serverless 自动将插件安装在 node_modules 里，导致增加 node_modules 文件夹的大小。<br />​<br />\n```bash\nnpm install -g serverless\nnpm install -g serverless-plugin-layer-manager\n...\n```\n​<br />\n<a name=\"FgiUo\"></a>\n## 部署\n​\n\nserverless 可以一键部署，自动搞定资源分配和建立关联、以及权限配置等等。在写好应用代码，配置好 serverless.yml 文件后，就能一键部署：<br />​<br />\n```bash\nserverless deploy\n```\n\n\n<a name=\"w8dZn\"></a>\n# 项目大致目录结构\n​<br />\n```bash\n|---- layers\n\t\t\t|---- nodejs\n               |---- .npmrc\n               |---- node_modules\n|---- node_modules\n|---- src\n      |---- gatsby.ts\n      |---- gatsby-recipes\n      \t\t\t\t|---- ...\n|---- serverless.yml\n|---- tsconfig.json\n|---- tsconfig.build.json\n|---- package.json\n \n```\n​\n\nlayers 目录是分层用的，注意它一定要包含一个 nodejs 目录，在部署前，必须的依赖就安装在这个目录下，所以可以在这个目录下建立一个文件 .npmrc，并配置为只安装生产必须的依赖：<br />​\n\n.npmrc\n```bash\nonly=production\n```\n\n\n<a name=\"yaSgw\"></a>\n# TypeScript 配置\n​\n\nTypeScript 是 JavaScript 的一个超集，解决了原生 JavaScript 饱受诟病的动态特性，建立了一个完善的类型系统。为了使用 TypeScript 开发的同时，部署成 JavaScript，需要配置指示 tsc 如何将 TypeScript 转译成 JavaScript。<br />​\n\ntsconfig.json\n```json\n{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"esModuleInterop\": true,\n    \"declaration\": true,\n    \"removeComments\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"target\": \"es2017\",\n    \"sourceMap\": true,\n    \"outDir\": \"./dist\",\n    \"baseUrl\": \"./\",\n    \"incremental\": true,\n    \"skipLibCheck\": true,\n    \"allowJs\": true,\n    \"jsx\": \"react-jsx\",\n  },\n  \"include\": [\n    \"src/**/*\",\n    \"README.md\"\n  ]\n}\n\n```\n注意这里在 \"include\" 部分除了包含必要的 src 目录下的文件外，还额外引入了根目录下的 READ.md 文件，这只是为了让生成的 dist 目录保留原始项目结构（即有 src 部分），不然 dist 目录下会直接是 src 下的被转译后的文件。<br />​\n\n为了排除不必要的文件，可以在 tsconfig.build.json 里指定：\n```json\n{\n  \"extends\": \"./tsconfig.json\",\n  \"exclude\": [\n    \"dist\",\n    \"test\",\n    \"**/*spec.ts\"\n  ]\n}\n\n```\n​\n\n这里还配置了 \"jsx\" 以支持 react-jsx，因为 gatsby-recipes 里需要。<br />​<br />\n<a name=\"h5x1C\"></a>\n# 魔改 gatsby-recipes\n​\n\n将 0.9.3 这个版本的 gatsby-recipes 源文件拷贝到项目，删除其 dist 目录，然后打开 src/gatsby-recipes/src/providers/npm/package.js 文件，将其原本的 getConfigStore 引用删除，然后改写：<br />​<br />\n```diff\n- import {getConfigStore} from 'gatsby-core-utils'\n+ const getConfigStore = () => ({ get: () => 'yarn' })\n```\n​\n\n这样就能避免在 lambda 环境，该文件尝试写文件的错误。<br />​<br />\n<a name=\"rUE1h\"></a>\n# gatsby.ts 入口文件\n\n<br />这是整个 lambda 的入口，详细参见源代码。主要工作是将 express 替换成 serverless/express，同时引入 bodyParser，否则会接受不到客户端传来的 GraphQL 查询。因为 GraphQL 本质上是一个 HTTP Post 请求。<br />​<br />\n```typescript\nimport express from 'serverless-express/express'\nimport {graphqlHTTP} from \"express-graphql\"\nimport cors from \"cors\"\nimport bodyParser from \"body-parser\"\n\nconst app = express()\n\napp.use(cors())\napp.use(bodyParser.json())\n\napp.use(`/graphql`, graphqlHTTP({\n    schema,\n    graphiql: true,\n    context: {root: directory}\n}))\n\n\nconst port = 3000\n\nif (require.main === module) {\n    console.log('called directly')\n\n    app.listen(port, () => {\n        console.log(`Example gatsby serverless app listening at http://localhost:${port}`)\n    })\n}\n\nexport default app\n\nconst bootstrap = async () => {\n    return serverlessExpress({app})\n}\n\nlet server\n\nexport const handler: Handler = async (\n    event: any,\n    context: Context,\n    callback: Callback,\n) => {\n    server = server ?? (await bootstrap())\n    return server(event, context, callback)\n}\n\n```\n\n<br />以上代码判断 require.main，如果是本地直接运行，就会监听 （3000） 端口，准备提供服务。而如果是在 lambda 环境，那么 handler 函数会被触发。<br />​<br />\n<a name=\"SVuiB\"></a>\n# 总结\n​\n\n通过对 gatsby-recipes 的魔改，使得 gatsby 本地开发用的 GraphQL Server 可以运行在 AWS lambda 上，从而实现了一个免费又强大（万能）的 BFF 层。<br />​\n\n后面只需要添加不同的数据源插件，就能给不同的前端提供几乎所有服务了。<br />​\n\n有兴趣的同学欢迎持续关注，后面将持续更新，使用真实案例，分解如何利用该万能 BFF，应用在具体的场景上。\n"
  },
  {
    "id": 53296538,
    "title": "快速下载 GitHub 上项目下的子目录",
    "description": "GitHub 上有一些开源项目，会将示例项目放在某个专门的子目录下，如果只对其中一个目录感兴趣，不想下载整个项目的话，该怎么办呢？svn export!比如，https://github.com/keycloak/keycloak-quickstarts 这个仓库有很多示例项目，我要下载其中一...",
    "custom_description": null,
    "updated_at": "2021-09-13T09:36:25.000Z",
    "created_at": "2021-09-13T09:36:25.000Z",
    "slug": "yazohn",
    "word_count": 276,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1631525525175-34f9e15d-65f9-4b96-9f8d-9f8d3856e95f.png",
    "body": "GitHub 上有一些开源项目，会将示例项目放在某个专门的子目录下，如果只对其中一个目录感兴趣，不想下载整个项目的话，该怎么办呢？<br />​<br />\n<a name=\"Jx9Gk\"></a>\n# `svn export`!\n\n<br />比如，[https://github.com/keycloak/keycloak-quickstarts](https://github.com/keycloak/keycloak-quickstarts) 这个仓库有很多示例项目，我要下载其中一个目录，那么先定位到这个目录：<br />​\n\n[https://github.com/keycloak/keycloak-quickstarts/tree/latest/app-springboot](https://github.com/keycloak/keycloak-quickstarts/tree/latest/app-springboot)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1631525525175-34f9e15d-65f9-4b96-9f8d-9f8d3856e95f.png#clientId=u397dc174-846e-4&from=paste&height=815&id=u6f21a03f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1630&originWidth=2688&originalType=binary∶=1&size=389384&status=done&style=none&taskId=uc8bb1127-b41b-4dbe-b189-61a804e15db&width=1344)<br />\n<br />记下链接后，做一个小替换：<br />​\n\n把 `tree` 改成 `branches`，然后执行 `svn export`：<br />​<br />\n```shell\nsvn export https://github.com/keycloak/keycloak-quickstarts/branches/latest/app-springboot\n```\n \n<a name=\"fF5Ad\"></a>\n# 亲测有效！\n​<br />\n```shell\njeff-tian/app-springboot \n➜ tree\n\n.\n├── README.md\n├── config\n│   └── client-import.json\n├── pom.xml\n└── src\n    ├── main\n    │   ├── java\n    │   │   └── org\n    │   │       └── keycloak\n    │   │           └── quickstart\n    │   │               └── springboot\n    │   │                   ├── ProductApplication.java\n    │   │                   ├── config\n    │   │                   │   └── SecurityConfig.java\n    │   │                   ├── service\n    │   │                   │   └── ProductService.java\n    │   │                   └── web\n    │   │                       └── ProductController.java\n    │   └── resources\n    │       ├── application.properties\n    │       └── templates\n    │           ├── landing.ftl\n    │           └── products.ftl\n    └── test\n        ├── java\n        │   └── org\n        │       └── keycloak\n        │           └── quickstart\n        │               └── springboot\n        │                   └── ProductAppTest.java\n        └── resources\n            ├── application.properties\n            └── quickstart-realm.json\n\n20 directories, 13 files\n```\n​\n\n如果没有预装 `svn`，那么可以相应安装一下，对于 Mac，可以使用：<br />​<br />\n```shell\nbrew install svn\n```\n"
  },
  {
    "id": 53199779,
    "title": "呵呵，阿里云（国际）",
    "description": "警告（FBI Warning）：这纯粹是一篇吐槽文章，没有营养。吐槽原因我的域名不能用了，原因是错过了续费时间。没想到续费这么波折，到现在还没有解决，不吐不快。绑定不了 Paypal阿里云国际账号提示我绑定支付方式，居然没有支付宝选项。没有就算了，我除了是多年支付宝用户，也是多年的 Paypa...",
    "custom_description": null,
    "updated_at": "2021-09-20T10:22:35.000Z",
    "created_at": "2021-09-12T06:09:47.000Z",
    "slug": "gkncxg",
    "word_count": 468,
    "cover": "https://cdn.nlark.com/yuque/0/2021/jpeg/221736/1631426139494-2306144e-70e7-4028-aacb-1fcd9ae2eb59.jpeg",
    "body": "> **警告（FBI Warning）**：这纯粹是一篇吐槽文章，没有营养。\n\n​<br />\n<a name=\"yvNGs\"></a>\n# 吐槽原因\n​\n\n我的域名不能用了，原因是错过了续费时间。没想到续费这么波折，到现在还没有解决，不吐不快。<br />​<br />\n<a name=\"s87p0\"></a>\n# 绑定不了 Paypal\n​\n\n阿里云国际账号提示我绑定支付方式，居然没有支付宝选项。没有就算了，我除了是多年支付宝用户，也是多年的 Paypal 用户。还好有 Paypal 选项，我愉快地按照提示操作，每一步都很顺利，直到最后它跳出来：“不支持 Paypal！”<br />​\n\n妈蛋，不支持，你给我显示在页面上？还在最后一部才提示？<br />​<br />\n<a name=\"YxtzF\"></a>\n# 续费不成功\n​\n\nPaypal 绑定不了，只能是选择了信用卡绑定方式，扣了一美元验证，顺利通过。我点击了续费，谁知道，钱扣了，续费日期没有更新！<br />​\n\n![note_attach.jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/221736/1631426139494-2306144e-70e7-4028-aacb-1fcd9ae2eb59.jpeg#clientId=ue549f36e-f58b-4&from=ui&id=u7bda25e3&margin=%5Bobject%20Object%5D&name=note_attach.jpg&originHeight=2079&originWidth=960&originalType=binary∶=1&size=379800&status=done&style=none&taskId=u077a6a81-2abe-4f72-853d-5388167acca)<br />![screencapture-usercenter2-intl-aliyun-order-detail-intl-2021-09-12-14_04_41.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1631426724671-30bc0633-2f6c-419d-8464-307267c9ea45.png#clientId=ue549f36e-f58b-4&from=ui&id=u38b08842&margin=%5Bobject%20Object%5D&name=screencapture-usercenter2-intl-aliyun-order-detail-intl-2021-09-12-14_04_41.png&originHeight=1722&originWidth=3600&originalType=binary∶=1&size=343477&status=done&style=none&taskId=uddf91242-0dbd-4727-9aca-036a5f5e5e1)<br />​<br />\n<a name=\"rmonx\"></a>\n# 工单开不了\n​\n\n我立即去尝试开工单，各种拦截，根本找不到入口，只能找到在线客服。于是和客服聊了起来，免不了要说很多废话。<br />​<br />\n<a name=\"DWRA8\"></a>\n# 死循环\n\n<br />聊了半天，客服说这个问题你去开工单，我……<br />​\n\n![00492e4aff9d43334de9d5ac1527a84.jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/221736/1631426255679-2bfa00b7-5df1-43aa-9512-aef8e6a60508.jpeg#clientId=ue549f36e-f58b-4&from=paste&height=1195&id=akLxO&margin=%5Bobject%20Object%5D&name=00492e4aff9d43334de9d5ac1527a84.jpg&originHeight=3585&originWidth=854&originalType=binary∶=1&size=283142&status=done&style=none&taskId=u9d16883e-b3c2-48b1-845f-a7f9976f06a&width=284.6666666666667)<br />​\n\n好在客服给我扔了个直接可以开工单地 deeplink，我顺利开了工单。<br />​<br />\n<a name=\"Q0E2G\"></a>\n# 再次重试续费，仍不成功\n​\n\n工单回复让我重试，我又试了一遍，信用卡又扣了一次钱，但续费仍未成功！<br />​\n\n![32a83dcd503184c5242597b0f0f2597.jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/221736/1631426872038-d56d525a-fc32-4582-b0a0-2c06d0d4b06d.jpeg#clientId=ue549f36e-f58b-4&from=paste&height=693&id=ufa9544f9&margin=%5Bobject%20Object%5D&name=32a83dcd503184c5242597b0f0f2597.jpg&originHeight=2079&originWidth=960&originalType=binary∶=1&size=133085&status=done&style=none&taskId=ub101ccbd-1cfd-4b45-b22a-64fb87a3e52&width=320)<br />![note_attach.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1631426339917-fce7c99f-3977-4703-b433-28affa0c2298.png#clientId=ue549f36e-f58b-4&from=ui&id=u4a66e79d&margin=%5Bobject%20Object%5D&name=note_attach.png&originHeight=1055&originWidth=1920&originalType=binary∶=1&size=155166&status=done&style=none&taskId=u36adfa63-b8e0-4c5e-97af-69937dd6801)<br />![screencapture-usercenter2-intl-aliyun-order-detail-intl-2021-09-12-14_00_05.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1631426437868-c7510a3e-e404-43da-adbe-06da4e5095c2.png#clientId=ue549f36e-f58b-4&from=ui&id=ud81cd782&margin=%5Bobject%20Object%5D&name=screencapture-usercenter2-intl-aliyun-order-detail-intl-2021-09-12-14_00_05.png&originHeight=1722&originWidth=3600&originalType=binary∶=1&size=346212&status=done&style=none&taskId=ufa33fc32-2573-4907-8303-d994e049bb8)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1631426626645-55ec74a3-a132-424e-a17f-5c4dbbdb4825.png#clientId=ue549f36e-f58b-4&from=paste&height=364&id=udd0aedea&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1093&originWidth=3000&originalType=binary∶=1&size=349447&status=done&style=none&taskId=ud9ce71f8-7797-4ec6-a122-c1e2b6e6590&width=1000)\n<a name=\"M0fTb\"></a>\n# 漫长地等待\n​\n\n现在域名已经不能用了，它们的工单还停在几天前的状态，说是需要先核实……<br />​\n\n![screencapture-workorder-intl-console-aliyun-2021-09-12-14_02_06.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1631426912532-dec29948-6b8d-4114-aa92-32a65f86f3f0.png#clientId=ue549f36e-f58b-4&from=ui&id=u030e4750&margin=%5Bobject%20Object%5D&name=screencapture-workorder-intl-console-aliyun-2021-09-12-14_02_06.png&originHeight=7761&originWidth=3000&originalType=binary∶=1&size=1709774&status=done&style=none&taskId=u24504389-45bc-4c5d-9ae5-efa842333ce)<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1631426940778-9e2da5f2-547c-4231-8bf5-329f2eacfe7c.png#clientId=ue549f36e-f58b-4&from=paste&height=644&id=u530c8073&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1933&originWidth=3000&originalType=binary∶=1&size=1800045&status=done&style=none&taskId=u1626f8d8-ec80-4578-bd7e-32555567b5f&width=1000)<br />\n<br />2021-9-19 更新：<br />​\n\n阿里云仍然没有回应。\n"
  },
  {
    "id": 52760298,
    "title": "Keycloak 关注公众号即登录插件升级了！",
    "description": "体验链接https://uniheart.pa-ca.me/keycloak/login请忍受二维码出现的速度很慢，因为使用的是免费资源……背景今年 2 月份发表的一篇专栏《基于 keycloak 的关注公众号即登录功能的设计与实现》，居然有人默默地认真看了，还通过付费咨询频道，向我反映了这篇...",
    "custom_description": null,
    "updated_at": "2021-09-07T06:11:17.000Z",
    "created_at": "2021-09-07T06:11:17.000Z",
    "slug": "cnrark",
    "word_count": 1404,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1630934654306-c617547a-4ca2-476d-a0ca-3e5f4d6457ac.png",
    "body": "<a name=\"tdVWN\"></a>\n# 体验链接\n\n<br />[https://uniheart.pa-ca.me/keycloak/login](https://uniheart.pa-ca.me/keycloak/login)<br />​\n\n请忍受二维码出现的速度很慢，因为使用的是免费资源……\n<a name=\"smml4\"></a>\n# \n<a name=\"LZrL3\"></a>\n# 背景\n​\n\n今年 2 月份发表的一篇专栏《[基于 keycloak 的关注公众号即登录功能的设计与实现](https://zhuanlan.zhihu.com/p/349504145)》，居然有人默默地认真看了，还通过[付费咨询](https://www.zhihu.com/consult/conversation/1417107982655684608/archive)频道，向我反映了这篇文章中的插件，在最新版本的 Keycloak 中使用时会报错。<br />[![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630934654306-c617547a-4ca2-476d-a0ca-3e5f4d6457ac.png#clientId=ube72ccba-35ba-4&from=paste&height=630&id=u4cbec4c5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1889&originWidth=960&originalType=binary∶=1&size=884612&status=done&style=none&taskId=ubbe25d9f-466e-4efc-adaf-be70cee3c08&width=320)](https://www.zhihu.com/consult/conversation/1417107982655684608/archive)<br />看来 Keycloak 是一个非常活跃的开源项目，因为我在 2020 年开发关注公众号即登录插件时，Keycloak 版本号还是 7.0.0，但是现在已经升级到 15.0.2 了。<br />​<br />\n<a name=\"KMdLg\"></a>\n# 新版\n​\n\n在周末，我升级了该插件，在最新版本的 Keycloak 15.0.2 中测试通过。相关 mvn 包的配置和资源信息在这里： [https://github.com/Jeff-Tian/keycloak-services-social-weixin/packages/225091?version=0.0.20](https://github.com/Jeff-Tian/keycloak-services-social-weixin/packages/225091?version=0.0.20)。<br />​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630989608105-ffc3a37f-22e3-46cc-8431-1b45fd62deb0.png#clientId=ua48cc9d7-ac80-4&from=paste&height=1630&id=u06e61195&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1630&originWidth=2688&originalType=binary∶=1&size=400671&status=done&style=none&taskId=ued9f7166-30ef-46c8-aa85-b63ac060129&width=2688)<br />\n\n<a name=\"cltFa\"></a>\n# 前一个版本\n​\n\n在 Keycloak 7.0.0 中实测通过的插件版本是 0.0.6，其 mvn 包的配置以及资源信息在 [https://github.com/Jeff-Tian/keycloak-services-social-weixin/packages/225091?version=0.0.6](https://github.com/Jeff-Tian/keycloak-services-social-weixin/packages/225091?version=0.0.6)。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630990314025-27a93a65-9406-4a41-bcf3-3afdc755105e.png#clientId=ua48cc9d7-ac80-4&from=paste&height=1035&id=u7fcd331c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1035&originWidth=1500&originalType=binary∶=1&size=149891&status=done&style=none&taskId=u268fa6b6-69ab-45f7-91f3-2dfd4024f49&width=1500)<br />​<br />\n<a name=\"U9QEN\"></a>\n# 差异以及不兼容原因\n\n<br />理论上 Keycloak 升级不应该影响该插件的功能，但是该插件的实现上依赖了 Keycloak 的 BrokeredIdentityContext 中的一个 `**setCode**` API，但是该 API 在新版本的 Keycloak 中被删除了。因此这次的改动就是换用了一个 API (`**setContextData**`) 而已。<br />​\n\nKeycloak 的这个破坏性改动，看提交描述是修复一个 Broker 状态参数，但是具体的 JIRA 卡：[https://issues.redhat.com/browse/KEYCLOAK-14483](https://issues.redhat.com/browse/KEYCLOAK-14483)，我还没有权限查看。这个提交详情见：[https://github.com/keycloak/keycloak/commit/41dc94fead4c20560e0dd96c3efbd7bd10a484b6](https://github.com/keycloak/keycloak/commit/41dc94fead4c20560e0dd96c3efbd7bd10a484b6)。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630991406445-9abc762b-d49e-4a3e-87fd-852e2284ac27.png#clientId=ua48cc9d7-ac80-4&from=paste&height=639&id=u822c816e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=639&originWidth=1066&originalType=binary∶=1&size=87674&status=done&style=none&taskId=u0f55797d-5954-48e0-becd-9c8ebd85c58&width=1066)<br />\n<br />只两个方法的删除是最大的不兼容问题，其他的小问题在某些方法签名上的变化。<br />​\n\n上面👆都是流水账，下面是比较重要的内容了！即如何通过配置的方法，实现一个你自己的关注微信公众号即登录的应用。<br />​<br />\n<a name=\"n9qS2\"></a>\n# 实现一个你自己的关注微信公众号即登录应用\n\n<br />如果你希望自己的应用集成关注公众号即登录应用，想了解如何开发，可以参考：《[基于 Java Spring Security 的关注微信公众号即登录的设计与实现](https://zhuanlan.zhihu.com/p/393360806)》。<br />​\n\n如果你不想写代码，那么推荐你使用该插件进行集成。我已经集成了好几个应用了，这里详细讲解一下集成步骤。<br />​<br />\n<a name=\"LXouq\"></a>\n## 集成的示例应用\n\n- [https://uniheart.pa-ca.me/keycloak/login](https://uniheart.pa-ca.me/keycloak/login)<br />这是一个基于 eggjs 开发的 node 应用，可以通过关注测试公众号拿到相关的令牌信息\n- [https://jeff-tian-gitlab-wq766wrh9r57-8929.githubpreview.dev/](https://jeff-tian-gitlab-wq766wrh9r57-8929.githubpreview.dev/)<br />这是一个 gitlab-ee 应用，增加了关注公众号登录的功能。但是由于利用了 Github 的 Codespace，很可能你打开时已经处于关闭状态（503）。如果你很想体验，请联系我，我可以实时打开这个服务。集成步骤详见《[在自托管 GitLab 实例中集成 Keycloak 登录](https://zhuanlan.zhihu.com/p/405425214)》。\n- [https://keycloak.jiwai.win/auth/realms/UniHeart/account/](https://keycloak.jiwai.win/auth/realms/UniHeart/account/)<br />这是一个部署在 Heroku 上的 Keycloak 应用本身了\n\n​<br />\n<a name=\"GEgkC\"></a>\n## 集成步骤\n\n\n<a name=\"hjq0K\"></a>\n### 部署 Keycloak\n​\n\nKeycloak 是一个优秀的开源用户认证与授权管理系统，推荐你先部署它。无论你的应用是什么语言编写，都可以快速通过配置的方式和它集成，详细参看官方文档。<br />​\n\n需要注意的是，部署时要把本插件（ [https://github.com/Jeff-Tian/keycloak-services-social-weixin/packages/225091?version=0.0.20](https://github.com/Jeff-Tian/keycloak-services-social-weixin/packages/225091?version=0.0.20) ）的 jar 包拷贝到 Keycloak 的 `/opt/jboss/keycloak/providers/` 目录下，然后需要把配置页面的两个 html 文件拷贝到 `/opt/jboss/keycloak/themes/base/admin/resources/partials` 目录。<br />​\n\n具体可以参考： [https://github.com/Jeff-Tian/keycloak-heroku/blob/master/Dockerfile](https://github.com/Jeff-Tian/keycloak-heroku/blob/master/Dockerfile) 这个 Dockerfile 文件。<br />​<br />\n<a name=\"ORpy5\"></a>\n### 在 keycloak 中添加关注公众号即登录插件\n\n\n- 登录你的 Keycloak admin console<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630992753468-362a8681-bebc-46ec-b63e-0a321d7310ec.png#clientId=ua48cc9d7-ac80-4&from=paste&height=481&id=uf91c3e0b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=481&originWidth=685&originalType=binary∶=1&size=31632&status=done&style=none&taskId=u4bf5b798-c026-414b-bc4a-21d1d6ed3d8&width=685)\n- 创建你的领域，并在领域设置里打开身份提供者：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630993405981-7f074ad5-5b22-4b70-b37e-c795b791885f.png#clientId=ua48cc9d7-ac80-4&from=paste&height=462&id=u8166b3e2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=462&originWidth=964&originalType=binary∶=1&size=46213&status=done&style=none&taskId=uc2bbea6b-1482-4075-873f-7040194cd42&width=964)\n- 点击编辑“weixin”进行配置：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630993537868-6f46730d-6aca-49bf-b9e6-db6bf125bc73.png#clientId=ua48cc9d7-ac80-4&from=paste&height=845&id=u1ea27873&margin=%5Bobject%20Object%5D&name=image.png&originHeight=845&originWidth=1073&originalType=binary∶=1&size=121234&status=done&style=none&taskId=ub2da8d15-dd55-48fc-a708-ebb524c4c94&width=1073)<br />注意，这里有一个非必填项，customized-login-url，在这里也必须填写，否则就会走默认的开放平台的 OAuth 登录逻辑了。如果你不想自己开发展示带餐二维码，以及对用户扫码的感知逻辑，请一定要填写：[https://wechat.pa-ca.me/mp-qr](https://wechat.pa-ca.me/mp-qr) 这个开发好的地址。\n\n​<br />\n<a name=\"WHwTt\"></a>\n### 公众号的配置\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630993905175-0deca8c1-487a-49be-a0d9-f45286a7b051.png#clientId=ua48cc9d7-ac80-4&from=paste&height=450&id=u00b435cd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=450&originWidth=1030&originalType=binary∶=1&size=46169&status=done&style=none&taskId=u175345a6-ca69-4fb3-8267-e9db37826f6&width=1030)只需要配置接口，不需要配置其他。这个接口是用来接收微信的消息的，如果你不想自己开发，可以使用我开发好的，URL 是：[https://uniheart-developer-edition.ap15.force.com/services/apexrest/callback/wechat](https://uniheart-developer-edition.ap15.force.com/services/apexrest/callback/wechat)。欢迎通过知乎付费咨询，或者微信打赏的方式向我索取 Token。<br />​<br />\n> **注意，对于个人订阅号，或者未认证的企业服务号，都是没有相关接口（获取带餐二维码等）权限的，所以如果是个人测试的话，只能使用测试公众号，如本截图一样。**\n\n\n\n<a name=\"OQhKZ\"></a>\n# 总结\n\n<br />这是一篇 Keycloak 集成的配置详解，因为陆续有人向我反映看了我的一系列 Keycloak 文章后（[https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzAxNTk3ODgxNA==&action=getalbum&album_id=1792107127465967619&scene=173&from_msgid=2247484524&from_itemidx=1&count=3&nolastread=1#wechat_redirect](https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzAxNTk3ODgxNA==&action=getalbum&album_id=1792107127465967619&scene=173&from_msgid=2247484524&from_itemidx=1&count=3&nolastread=1#wechat_redirect)），仍然碰到一些配置上的问题。<br />​\n\n这里面有综合利用到各种不同的免费资源，因此体验一定不是最好的。如果有更好的建议（更大的羊毛可以薅），欢迎留言分享。<br />​\n\n这里面涉及到的相关开发，全部以开源形式放在 GitHub 上，欢迎对其中不满意的地方，发 PR 改进。一共有好多个代码库，可以使用这个链接列出： [https://github.com/Jeff-Tian?tab=repositories&q=keycloak&type=&language=&sort=](https://github.com/Jeff-Tian?tab=repositories&q=keycloak&type=&language=&sort=)\n"
  },
  {
    "id": 52291317,
    "title": "在自托管 GitLab 实例中集成 Keycloak 登录",
    "description": "背景在知乎上收到一个付费咨询（https://www.zhihu.com/consult/conversation/1413515497665662976/archive），他已经在自己部署好的 GitLab 实例上集成了 Keycloak 登录，想更进一步，在用户选择 keycloak 登录...",
    "custom_description": null,
    "updated_at": "2021-08-31T07:43:49.000Z",
    "created_at": "2021-08-31T07:43:49.000Z",
    "slug": "frd65v",
    "word_count": 1973,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1630392461366-a585cad8-ce48-4d3a-8b60-60a056da0321.png",
    "body": "<a name=\"xwrvB\"></a>\n# 背景\n​\n\n在知乎上收到一个付费咨询（[https://www.zhihu.com/consult/conversation/1413515497665662976/archive](https://www.zhihu.com/consult/conversation/1413515497665662976/archive)），他已经在自己部署好的 GitLab 实例上集成了 Keycloak 登录，想更进一步，在用户选择 keycloak 登录 GitLab 后，其身份信息也自动带过去。<br />​\n\n这个功能其实正好是 GitLab 近期实现的 SAML Group Sync 功能，不过只对 GitLab 托管的部分客户开放。这位咨询者搭建的是自托管 GtiLab 企业版，目前的版本不支持这个功能。不过，为了重现这位咨询者碰到的实际问题，我也搭建了一个自托管的 GitLab 企业版，进行了 Keycloak 登录集成，过程好挺有趣的，因此记录下来。<br />​<br />\n<a name=\"ur2Qz\"></a>\n# 效果展示\n​\n\n录了一个视频，展示了如何通过薅 GitHub CodeSpace 羊毛的方式启动了一个 GitLab 企业版实例，然后点击 Keycloak 登录，重用了自己开发的关注微信公众号即登录的方式，成功登录 GitLab。<br />​\n\n[https://www.zhihu.com/zvideo/1416018136143802369](https://www.zhihu.com/zvideo/1416018136143802369)<br />​<br />\n<a name=\"DS5pb\"></a>\n# 步骤详解\n\n\n<a name=\"W35XC\"></a>\n## 部署 Keycloak\n\n<br />Keycloak 是一个开源的认证授权系统，基于 Java 开发。部署方式有多种，详见《[基于 keycloak 的关注公众号即登录功能的设计与实现](https://zhuanlan.zhihu.com/p/349504145)》中 5.1 的介绍。我按照其中介绍的部署到 Heroku 的方式，部署了一个实例：[https://keycloak.jiwai.win/](https://keycloak.jiwai.win/)，部署到 Heroku 的优势是简单、免费。<br />​<br />\n<a name=\"uGRT0\"></a>\n## 部署 GitLab\n\n<br />GitLab 官网介绍了多种部署方式，但是对于我的演示目的，各有优劣：\n\n|  | SaaS | 部署到云（Google、AWS，Azure）上虚拟服务器上 | 部署到云提供的 Kubernetes 集群 | 本地部署 |\n| --- | --- | --- | --- | --- |\n| 好处 | 最简单\n​\n\n能外网访问\n​\n\n我最想采用的方式 | 能外网访问 | 能外网访问 | 部署简单\n​\n\n免费 |\n| 坏处 | 要钱！\n​\n\n没有超级管理员权限 | 要钱！\n​\n\n配置工作量大 | 要钱！\n​\n\n配置工作量大 | 配置外网访问复杂\n​\n\n耗本地机器资源 |\n\n\n\n基于一定要免费的原则，似乎只能本地部署。本地部署最简单的方式就是 docker-compose 启动，但是这样会有个问题，就是现在的浏览器（Chrome、Safari 等）都打不开页面，原因是 GitLab 实例的自签发证书不被信任！要设置信任特别复杂，再加上需要 Keycloak 回调 GitLab 实例，部署在本地有诸多不便。\n​\n\n但是本地使用 docker-compose 启动 GitLab 实例的方式实在是太香了，有没有办法把本地 docker-compose 部署的方式移植到线上呢？想到这里，我把目光投向了 GitHub 的 CodeSpace，CodeSpace 在我炯炯有神的坚毅的不薅羊毛到底绝不罢休的眼神中瑟瑟发抖。\n​\n\n<a name=\"JiDmM\"></a>\n### docker-compose\n​\n\n首先，我按照官网的知道说明，创建了 docker-compose.yml 文件，并将它提交到了 GitHub 代码仓库：[https://github.com/Jeff-Tian/gitlab](https://github.com/Jeff-Tian/gitlab) 。然后打开 GitHub 仓库主页，按下了句点键，GitHub 切换进入了网页编辑器界面：[https://github.dev/Jeff-Tian/gitlab](https://github.dev/Jeff-Tian/gitlab)。熟悉的 VsCode 编辑器出现了，就凭这，足以回答知乎上的这个问题了：《[Visual Studio Code 可以翻盘成功主要是因为什么？](https://www.zhihu.com/question/363365943/answer/953401788?utm_source=wechat_session&utm_medium=social&utm_oi=60808105033728&utm_content=group3_Answer&utm_campaign=shareopn)》。\n​\n\n<a name=\"Vdjle\"></a>\n### VsCode 网页编辑器\n​\n\n接着，我打开 Terminal，想运行 `docker-compose up -d` 以像在本地启动 GitLab 实例一样在网页编辑器中启动 GitLab，看到了 Terminal 不被支持，但是不要慌，点击“继续”按钮就打开了 CodeSpace。（当然，后来知道了可以直接输入 [https://github.com/codespaces](https://github.com/codespaces) 打开已经新建过的项目，而不用每次重新创建）\n​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630392461366-a585cad8-ce48-4d3a-8b60-60a056da0321.png#clientId=ua88e5981-122e-4&from=paste&id=ud67f0740&margin=%5Bobject%20Object%5D&name=image.png&originHeight=487&originWidth=976&originalType=binary∶=1&size=67796&status=done&style=none&taskId=u2822c38c-937a-4d1c-b5a3-0b7855f9f7f)\n\n\n点击“继续”按钮后，就来到了 CodeSpace，仍然是熟悉的 VsCode 编辑器。但是这里的 Terminal 可以使用。运行 `docker-compose up -d` 。\n​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630392591908-87be1bb4-1983-47cc-b4ab-8f754b61980b.png#clientId=ua88e5981-122e-4&from=paste&id=ua4156a75&margin=%5Bobject%20Object%5D&name=image.png&originHeight=687&originWidth=1189&originalType=binary∶=1&size=144714&status=done&style=none&taskId=u5bc05d6f-6a7d-4a51-ab92-6e4bfeb5e2e)\n\n\n实例启动后，就可以在网页端打开了，记住 `docker-compose.yml` 中配置了 8929 这个端口。按下 `Cmd+Shift+P` 键，选择 docker 容器插件提供的在浏览器打开功能，依次选择应用，端口：\n​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630392747369-7dd62f04-adde-4390-9d91-1ecfa86dd68a.png#clientId=ua88e5981-122e-4&from=paste&id=u7697c11a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=354&originWidth=1281&originalType=binary∶=1&size=99405&status=done&style=none&taskId=u65e9f0e5-76a5-47cc-91b2-89ebc9b7831)\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630392774772-eb525e20-4a29-4342-a7c4-3e4dfdba516d.png#clientId=ua88e5981-122e-4&from=paste&id=u394ef1e4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=249&originWidth=1306&originalType=binary∶=1&size=57729&status=done&style=none&taskId=u761ec28b-6328-476d-8ae3-7eeb4843d82)\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630392786680-046c1d6a-44a1-4089-b649-06badf2b07d7.png#clientId=ua88e5981-122e-4&from=paste&id=u3639bbde&margin=%5Bobject%20Object%5D&name=image.png&originHeight=224&originWidth=1247&originalType=binary∶=1&size=54609&status=done&style=none&taskId=uf113f340-22ce-4e14-a0e7-d9ae58392bf)\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630392802571-d42696f6-a428-48c3-af4c-4c85405a1da1.png#clientId=ua88e5981-122e-4&from=paste&id=ud0f5a69e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=276&originWidth=1290&originalType=binary∶=1&size=64838&status=done&style=none&taskId=ub46cc56b-46d6-4de3-b8d4-a858777d40d)\n\n\n这样就在新窗口中打开了： [https://jeff-tian-gitlab-wq766wrh9r57-8929.githubpreview.dev/users/sign_in](https://jeff-tian-gitlab-wq766wrh9r57-8929.githubpreview.dev/users/sign_in)\n​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630392848266-19e9e952-f29a-43b6-868e-9fd1209666d6.png#clientId=ua88e5981-122e-4&from=paste&id=u21406125&margin=%5Bobject%20Object%5D&name=image.png&originHeight=500&originWidth=1357&originalType=binary∶=1&size=59599&status=done&style=none&taskId=ufaaadbba-48b7-483f-a155-f63e9a2fc58)\n​\n\nGitLab 实例就这样部署好了，而且连 https 以及证书，都被 CodeSpace 搞定了，外网也可以访问！\n​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630393013936-96d3a1b5-100e-479f-80de-35c069be35d9.png#clientId=ua88e5981-122e-4&from=paste&id=uf9efd981&margin=%5Bobject%20Object%5D&name=image.png&originHeight=679&originWidth=1103&originalType=binary∶=1&size=117676&status=done&style=none&taskId=u48fa0936-f06c-44cb-890d-9ebfbe337a1)\n\n\n<a name=\"fJQPc\"></a>\n## 配置 KeyCloak\n\n\n接下来，需要在 Keycloak 中配置 GitLab 客户端，因为我们的目的是在 GitLab 中启用 Keycloak 登录，那么 Keycloak 就是一个 IDP 了，而 GitLab 是其一个 OAuth 2 客户端应用。要将 Keycloak 当作 IDP，一般有两种形式，OIDC 形式和 SAML 形式。\n​\n\n使用 OIDC 的形式集成，有两篇文章做过详细的介绍：\n​\n\n\n- 《[使用 OIDC 在一个 Keycloak 中集成另一个 Keycloak 用户认证](https://zhuanlan.zhihu.com/p/360846976)》\n- 《[在 eggjs 中集成 Keycloak 用户认证](https://zhuanlan.zhihu.com/p/359057316)》\n\n​\n\n如果对这种集成方式感兴趣，可以详细参考。这里准备采用 SAML 方式集成，以便补充这种集成方式的实战。实际上，网上已经有一些 GitLab 和 Keycloak 采用 SAML 集成的文章了，但是采用了非常复杂的方法，因此整篇文章都在讲集成细节。这里采用了一个简单的方式，只需要一小节介绍即可。\n​\n\n<a name=\"SU46z\"></a>\n### 导出 GitLab 的 SAML 元数据 xml 定义\n​\n\n对于支持 SAML 集成的应用，可以访问其 `/users/auth/saml/metadata` 获得其 SAML 源数据信息。将其保存到本地：\n​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630393978383-f25cc4eb-148c-47b6-8a18-b570c86cf85e.png#clientId=ua88e5981-122e-4&from=paste&height=200&id=ucc105553&margin=%5Bobject%20Object%5D&name=image.png&originHeight=400&originWidth=1814&originalType=binary∶=1&size=179095&status=done&style=none&taskId=u19899639-86a2-4a7b-a972-26861eedd2f&width=907)\n\n\n<a name=\"pyXQ5\"></a>\n### 在 Keycloak 中导入 GitLab 的 SAML 元信息\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630394128380-da47a69a-1281-45b4-8e71-06a645a19dd1.png#clientId=ua88e5981-122e-4&from=paste&id=u7210c706&margin=%5Bobject%20Object%5D&name=image.png&originHeight=427&originWidth=1051&originalType=binary∶=1&size=85686&status=done&style=none&taskId=u244988cc-0d77-4356-8648-7ca4ba442cd)\n\n\n<a name=\"vf56e\"></a>\n### 在 Keycloak 中添加 GitLab 客户端的 email 映射\n\n\n你可以添加更多的映射，以便把 Keycloak 中的用户信息映射到 GitLab 系统。但是只有 email 是必须的。\n​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630394247926-3e67153d-8063-4d4e-879c-97372aceb80a.png#clientId=ua88e5981-122e-4&from=paste&id=u4dbbf920&margin=%5Bobject%20Object%5D&name=image.png&originHeight=596&originWidth=977&originalType=binary∶=1&size=78487&status=done&style=none&taskId=u28d05c58-8977-4022-aff0-62b5a62ebca)\n​\n\n<a name=\"KKhoP\"></a>\n## 配置 GitLab\n​\n\n现在，Keycloak 中已经有了我们新部署的 GitLab 实例信息，现在需要配置 GitLab，让它知道我们部署好的 Keycloak 实例信息。\n​\n\n首先，需要记下 Keycloak 应用对应的 Realm 的 url，以及拷贝一下它的证书信息：\n​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630394430134-13831937-2f44-4c40-ae14-9ef628bbfb55.png#clientId=ua88e5981-122e-4&from=paste&height=250&id=u7ab3b749&margin=%5Bobject%20Object%5D&name=image.png&originHeight=500&originWidth=1874&originalType=binary∶=1&size=177204&status=done&style=none&taskId=uf19dbea5-2883-4349-8484-c3dd18d1018&width=937)\n​\n\n然后，回到 CodeSpaces，进入到 GitLab docker 镜像里：\n​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630394489329-33078b63-559e-4688-ad5e-246ed193d2cd.png#clientId=ua88e5981-122e-4&from=paste&id=u69e7d533&margin=%5Bobject%20Object%5D&name=image.png&originHeight=579&originWidth=848&originalType=binary∶=1&size=127617&status=done&style=none&taskId=uae444e52-21b2-44c8-a683-00655d86612)\n\n\n在 shell 里，进入到 `/etc/gitlab` 目录，输入 `vi gitlab.rb` 命令，贴入一段 Keycloak 相关的配置：\n​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630394663792-9505dd3d-fc81-4430-94d2-ae547965cab8.png#clientId=ua88e5981-122e-4&from=paste&id=ub4454d69&margin=%5Bobject%20Object%5D&name=image.png&originHeight=598&originWidth=1203&originalType=binary∶=1&size=129411&status=done&style=none&taskId=u6b63e33c-a706-43bb-ae2d-837014fc1e7)\n配置的文本内容如下，注意替换相关 url 和具体证书内容。\n​\n\n```ruby\ngitlab_rails['omniauth_enabled'] = true\ngitlab_rails['omniauth_allow_single_sign_on'] = ['saml']\n# gitlab_rails['omniauth_auto_sign_in_with_provider'] = 'saml'\ngitlab_rails['omniauth_block_auto_created_users'] = false\n# gitlab_rails['omniauth_auto_link_ldap_user'] = false\ngitlab_rails['omniauth_auto_link_saml_user'] = true\ngitlab_rails['omniauth_providers'] = [\n    {\n        name: 'saml',\n        args: {\n            assertion_consumer_service_url: 'https://jeff-tian-gitlab-wq766wrh9r57-8929.githubpreview.dev/users/auth/saml/callback',\n            idp_cert: \" -----BEGIN CERTIFICATE-----\n\\n MIIC...WWDcIuuyzU\\n -----END CERTIFICATE----- \\n\",\n            idp_sso_target_url: 'https://keycloak.jiwai.win/auth/realms/UniHeart/protocol/saml/clients/jeff-tian-gitlab-wq766wrh9r57-8929.githubpreview.dev',\n            issuer: 'jeff-tian-gitlab-wq766wrh9r57-8929.githubpreview.dev',\n            name_identifier_format: 'urn:oasis:names:tc:SAML:2.0:nameid-format:persistent'\n        },\n        label: 'KEYCLOAK 登录'\n    }\n]\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630394725556-26dd3283-e7a3-461a-828e-56aa82d6a97a.png#clientId=ua88e5981-122e-4&from=paste&id=u976c9546&margin=%5Bobject%20Object%5D&name=image.png&originHeight=568&originWidth=1432&originalType=binary∶=1&size=120818&status=done&style=none&taskId=u0f94025d-7163-4d77-b98b-2cc213a8dcb)<br />\n\n> **小提示**：这里是在网页中操作 vi，进入编辑模式后，要退出到普通模式，不能采用一般的 `Esc` 或者 `Ctrl + [` 键，因为这只会让浏览器编辑器失去焦点。这应该是 VsCode 网页编辑器可以进一步优化的点，目前绕过这个问题的方式是，`Ctrl + C` ，退出插入模式的同事，不失去焦点。\n\n​\n\n输入 `:wq` 保存并退出配置文件，然后重启 GitLab：`**_gitlab-ctl reconfigure_**`。<br />​\n\n重新打开 GitLab，就会看到登录框下多了一个 “Keycloak 登录” 选项：<br />​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630395353012-bc57a4e5-54ad-40aa-8b62-4e32ca69e04a.png#clientId=ua88e5981-122e-4&from=paste&id=u02f6599f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1346&originWidth=2496&originalType=binary∶=1&size=220988&status=done&style=none&taskId=u50f8113d-a5a1-4b32-b04d-c68d73890c0)<br />\n\n<a name=\"MlIk3\"></a>\n## 体验\n\n<br />如展示小节的视频展示，登录成功后可以对比一下用户资料，匹配！<br />​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630395559662-23732adc-e706-4e5c-99f9-61ed232817cb.png#clientId=ua88e5981-122e-4&from=paste&id=u8ca68c74&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1064&originWidth=2652&originalType=binary∶=1&size=273914&status=done&style=none&taskId=u592f9821-2f5b-44a9-a624-cffff3ba839)<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1630395608464-2e1277ea-205c-4120-8431-4cdbfc4cde44.png#clientId=ua88e5981-122e-4&from=paste&id=uac5e9f4f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=804&originWidth=2334&originalType=binary∶=1&size=151509&status=done&style=none&taskId=u4acc34fc-2a85-4f0e-b949-41c7cbb0b36)<br />\n\n<a name=\"Ep1IC\"></a>\n# 总结\n\n<br />通过薅 CodeSpace 羊毛的方式，部署了 GitLab 企业版实例，并通过配置的方式，对接 Keycloak 登录。<br />​<br />\n<a name=\"ZedTO\"></a>\n# 后期工作\n​\n\n目前通过 Docker-compose，使用了 GitLab 官方镜像，在对接 Keycloak 时还有些手动步骤。后面可以把配置好的 GitLab 打包成自定义镜像，以实现 0 配置对接。<br />\n<br />\n\n"
  },
  {
    "id": 51740873,
    "title": "借助 h2，加速 java 项目的自动化测试",
    "description": "背景几个月前我开始接手了公司的 java 项目，虽不懂 java，但还是被实际的 java 工程惊讶到了：《后端工程圣殿形象的崩塌以及重建》。其中最重要的问题是没有一行测试，这简直就是在裸奔。今天正好需要写一个小的新功能，因此我有机会开始基于现有代码构建测试安全屏障，然后再有信心地添加新的功能...",
    "custom_description": null,
    "updated_at": "2021-08-24T03:18:41.000Z",
    "created_at": "2021-08-24T03:18:41.000Z",
    "slug": "uckfnk",
    "word_count": 3271,
    "cover": null,
    "body": "<a name=\"hByIk\"></a>\n# 背景\n​\n\n几个月前我开始接手了公司的 java 项目，虽不懂 java，但还是被实际的 java 工程惊讶到了：《[后端工程圣殿形象的崩塌以及重建](https://zhuanlan.zhihu.com/p/376821879)》。其中最重要的问题是没有一行测试，这简直就是在裸奔。今天正好需要写一个小的新功能，因此我有机会开始基于现有代码构建测试安全屏障，然后再有信心地添加新的功能。<br />​\n\n尽管最近火起来的一篇阮一峰翻译的所谓国外程序员的酒后真言中说到，TDD 变成了一个邪教，但我还是不以为然，仍然是 TDD 的忠实拥趸。在改造自己本不熟悉的 java 项目中，再次运用了 TDD 的方法论，感觉对自己了解项目和 java 世界大有裨益，并且非常有信心自己把事情做对了，还可以证明给你看真的做对了。<br />​\n\n在《[后端工程圣殿形象的崩塌以及重建](https://zhuanlan.zhihu.com/p/376821879)》一文里，出于当时的需求，只列举了如何 Mock 第三方响应，实现接口的测试驱动开发。今天因为需求的关系，涉及到数据库的增删改查，正好可以记录下如何在 java 项目里通过引入 h2 来加快测试驱动开发的过程。<br />​\n\n当然，由于水平有限，代码上仍然写得很幼稚以及留有很多坏味道，但是我觉得目前够了，代码优化和重构，不应该专门建技术故事卡来做，而是应该持续不断的（小步）改进。虽然受水平所限，不能写出优雅的代码，但是最关键的是能够验证代码能够如期工作，为持续改进修建好了安全屏障。<br />​\n\n其实，TDD 的过程很简单，但是却很少有人坚持，这个现象很奇怪。我觉得这个过程让人受益匪浅，尽管不能入大佬的法眼，但还是要记录一下这个过程。<br />​<br />\n<a name=\"s34j7\"></a>\n# h2\n​\n\nh2 是一个内存数据库，如果没有它，可能需要自己写很多数据库层面的 mock，或者不写 mock，就需要在测试运行前启动一个 docker 数据库。虽然 docker 只是一个普通的进程，但是毕竟和 java 无关，因此要和 java 的测试运行过程结合起来，还是需要一些额外脚本。无论这个脚本有多简单，比起使用内存数据库，仍然更耗资源。<br />​<br />\n<a name=\"ZcOcP\"></a>\n# 需求\n​\n\n一个活动查询方法，需要支持额外的渠道参数。<br />​<br />\n<a name=\"ITCrC\"></a>\n# 现状代码\n\n<br />活动分页查询已经实现，主要代码如下。\n```java\n@Service\npublic class CampaignQueryUseCaseImpl implements CampaignQueryUseCase {\n\n    @Autowired\n    private ICampaignService campaignService;\n    @Autowired\n    private CampaignDtoConvertor campaignDtoConvertor;\n    @Autowired\n    private CampaignEntityConvertor campaignEntityConvertor;\n    @Autowired\n    private PortalApiAdaptor portalApiAdaptor;\n\n    @Override\n    public PageInfo<CampaignDto> getCampaignList(CampaignPageQueryCondition condition) throws Exception {\n        PageQuery pageQuery = condition.getPageQuery();\n        PageHelper.startPage(pageQuery.getPageNum(), pageQuery.getPageSize());\n        LambdaQueryWrapper<Campaign> queryWrapper = getCampaignLambdaQueryWrapper(condition);\n        List<Campaign> campaignList = campaignService.list(queryWrapper);\n        PageInfo pageInfo = PageInfo.of(campaignList);\n\n        List<CampaignDto> campaignDtoList = campaignDtoConvertor.convertCampaignEntityToDto(campaignList);\n        enrichCampaignWithEvents(campaignDtoList);\n        pageInfo.setList(campaignDtoList);\n\n        return pageInfo;\n    }\n\n    private LambdaQueryWrapper<Campaign> getCampaignLambdaQueryWrapper(CampaignPageQueryCondition condition) {\n        Campaign campaign = campaignEntityConvertor.convertCampaignConditionToEntity(condition);\n        campaign.setCampaignName(null);  \n        LambdaQueryWrapper<Campaign> queryWrapper = Wrappers.lambdaQuery(campaign);\n\n        queryWrapper.like(condition.getCampaignName() != null, Campaign::getCampaignName, condition.getCampaignName());\n\n        String[] campaignTypes = condition.getCampaignTypes();\n        if (ArrayUtils.isNotEmpty(campaignTypes)) {\n            queryWrapper.in(Campaign::getCampaignType, campaignTypes);\n        }\n\n        List<String> campaignIds = condition.getIds();\n        queryWrapper.in(CollectionUtils.isNotEmpty(campaignIds), Campaign::getId, campaignIds);\n        List<Byte> status = condition.getStatusList();\n        if (CollectionUtils.isNotEmpty(status)) {\n            queryWrapper.in(Campaign::getStatus, status);\n        } else {\n            Byte[] notInStatus = CollectionUtils.isEmpty(campaignIds) ?\n                    new Byte[]{CampaignStatus.DELETED.getStatus(), CampaignStatus.OFFLINE.getStatus()} : new Byte[]{CampaignStatus.DELETED.getStatus()};\n            queryWrapper.notIn(Campaign::getStatus, notInStatus);\n        }\n\n        String orderBy = condition.getOrderBy();\n        SFunction<Campaign, ?> field = OrderByFields.getField(orderBy);\n        if (field != null) {\n            if (condition.isAsc()) {\n                queryWrapper.orderByAsc(field);\n            } else {\n                queryWrapper.orderByDesc(field);\n            }\n        }\n        return queryWrapper;\n    }\n}\n```\n可见使用了 `LambdaQueryWrapper` 去封装了查询条件 `CampaignPageQueryCondition`。新需求，很简单，需要在 `CampaignPageQueryCondition` 里额外增加渠道这个条件。<br />​\n\n我对这些 `LambdaQueryWrapper` 以及究竟最后这个玩意儿怎么转换成 SQL 到数据库如何执行等都非常陌生，如果直接在 `CampaignPageQueryCondition` 加了个字段，谁知道能不能工作？<br />​<br />\n<a name=\"ngf3L\"></a>\n# 先看看现状是怎么工作的\n​\n\n目前同事以及很多我面试的候选者，都很依赖“开发”环境，就是只能在全部依赖都部署好了，才能做端到端的体验。我准备不这么做，我希望观察单个方法的现在行为，不需要部署，只需要给一些输入，执行这个方法，观察这个输出结果即可。<br />​<br />\n<a name=\"GYnq4\"></a>\n## 引入 h2\n​\n\npom 文件添加 h2 依赖：\n```xml\n<dependency>\n  <groupId>com.h2database</groupId>\n  <artifactId>h2</artifactId>\n  <version>1.4.200</version>\n  <scope>test</scope>\n</dependency>\n```\n​<br />\n<a name=\"LLbvq\"></a>\n## 第一个测试用例\n​\n\n写第一个新需求的测试用例，当数据库里没有任何记录时，应返还 0 条结果：\n```java\n@SpringBootTest\n@RunWith(SpringRunner.class)\n@ActiveProfiles(\"test\")\nclass CampaignQueryUseCaseImplTest {\n    @Autowired\n    private CampaignServiceImpl campaignService;\n\n    private CampaignQueryUseCaseImpl sut;\n\n    @BeforeEach\n    public void initEach() {\n        val mockPortalApiAdapter = new PortalApiAdaptorFallback();\n        sut = new CampaignQueryUseCaseImpl(new CampaignEntityConvertorImpl(), campaignService, new CampaignDtoConvertorImpl(), mockPortalApiAdapter);\n    }\n\n    @Test\n    @Sql(statements = \"DELETE FROM `campaign`\")\n    void getCampaignListEmptyRecords() {\n        val condition = new CampaignPageQueryCondition();\n        val pageQuery = new PageQuery();\n        pageQuery.setPageNum(1);\n        pageQuery.setPageSize(6);\n\n        condition.setPageQuery(pageQuery);\n\n        val res = sut.getCampaignList(condition);\n        assertThat(res).isNotNull();\n        assertThat(res.getTotal()).isEqualTo(0);\n    }\n}\n```\n这里使用了 test 配置，响应需要在相关的配置文件里配置好数据源，指定 h2：\n```yaml\nspring:\n  datasource:\n    driver-class-name: org.h2.Driver\n    url: jdbc:h2:mem:mmall;MODE=MySQL\n    schema: classpath:db/h2Test/init-campaign-table.sql\n    continue-on-error: true\n    username: test\n    password: test\n    initialization-mode: always\n\n```\n另外配置中的初始化活动表的脚本，如下。这个是从现有数据库的相关表直接导出的脚本：\n```sql\nCREATE TABLE `campaign` (\n                            `id` varchar(64) NOT NULL COMMENT '活动ID',\n                            `campaign_name` varchar(128) NOT NULL DEFAULT '' COMMENT '活动名称',\n                            `campaign_code` varchar(64) NOT NULL DEFAULT '' COMMENT 'campaign code',\n                            `campaign_type` varchar(32) NOT NULL COMMENT '活动类型。 CAMPAIGN, PRODUCT',\n                            `channel_type` tinyint(4) NOT NULL DEFAULT '1' COMMENT '渠道：1：微信小程序；2：天猫；3：微信小程序&天猫',\n                            `start_time` bigint(20) NOT NULL COMMENT '活动开始时间',\n                            `end_time` bigint(20) NOT NULL COMMENT '活动结束时间',\n                            `start_reserve_time` bigint(20) NOT NULL DEFAULT '-1' COMMENT '开始预约时间 -1为不设置',\n                            `minimum_duration` bigint(20) NOT NULL DEFAULT '-1' COMMENT '活动最短可持续时间  -1代表不设置',\n                            `stock` int(11) NOT NULL DEFAULT '0' COMMENT '活动剩余库存',\n                            `reservable` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否可预约 1：是 0：否',\n                            `need_coupon` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否需要预约券 1：需要 0：不需要',\n                            `status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '状态，0: 有效 1:删除 2:下线 3:审核通过',\n                            `store_ids` text COMMENT '门店列表',\n                            `store_opening_time` bigint(20) DEFAULT NULL COMMENT '门店开业时间',\n                            `has_kid` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否有小孩 0：否 1：是',\n                            `kid_age_low_limit` int(11) DEFAULT NULL COMMENT '孩子年龄限制下限',\n                            `kid_age_high_limit` int(11) DEFAULT NULL COMMENT '孩子年龄限制上限',\n                            `product_id` varchar(64) DEFAULT NULL COMMENT '产品ID',\n                            `create_time` bigint(20) NOT NULL COMMENT '创建时间',\n                            `update_time` bigint(20) NOT NULL COMMENT '更新时间',\n                            `version` int(11) NOT NULL DEFAULT '1' COMMENT '数据版本号',\n                            PRIMARY KEY (`id`),\n                            KEY `campaign__code_index` (`campaign_code`),\n                            KEY `campaign__product_id_index` (`product_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='活动表';\n```\n​\n\n跑测试通过后，做了个代码提交。<br />​<br />\n<a name=\"pxE2o\"></a>\n## 第二个用例\n​\n\n第一个测试通过后，写第二个测试，在有两条记录的情况下，不添加筛选条件，应返还两条结果：<br />​<br />\n```java\n@Test\n@Sql(statements = \"INSERT INTO `campaign` (`id`, `campaign_name`, `campaign_code`, `campaign_type`, `channel_type`, `start_time`, `end_time`, `start_reserve_time`, `minimum_duration`, `stock`, `reservable`, `need_coupon`, `status`, `store_ids`, `store_opening_time`, `has_kid`, `kid_age_low_limit`, `kid_age_high_limit`, `product_id`, `create_time`, `update_time`, `version`) VALUES ('123', 'xxx', 'C218888', 'Book_Product', 1, 1627551000, 1627637040, 1627550940, -1, 0, 0, 0, 0, NULL, NULL, 0, NULL, NULL, '723618c9fb0df0c90c5067bdbf2d165a409f1999e8214582694e8ae7bd76b891', 1627550699, 1627551000, 1), ('196', 'yyy', 'C210003', 'EnrollmentGift', 1, 1619798400, 1623049320, -1, -1, 0, 0, 0, 3, NULL, NULL, 0, NULL, NULL, NULL, 1621907624, 1623049320, 1)\")\nvoid getCampaignListWith2Records() {\n    val condition = new CampaignPageQueryCondition();\n    val pageQuery = new PageQuery();\n    pageQuery.setPageNum(1);\n    pageQuery.setPageSize(6);\n\n    condition.setPageQuery(pageQuery);\n\n    val res = sut.getCampaignList(condition);\n    assertThat(res.getTotal()).isEqualTo(2);\n}\n```\n目前有个问题，在测试里的 SQL 语句导致测试意图不清晰，需要一个一个地数字段，才能定位到各个数字的含义，需要后续优化。<br />​\n\n先做了个代码提交。<br />​<br />\n<a name=\"ydedc\"></a>\n## 第三个\n​\n\n前两个测试用例通过后，开始写第三个用例，这次指定了渠道这个筛选条件，期待测试失败，因为还没有实现这个筛选逻辑。<br />​<br />\n```java\n@Test\n@Sql(statements = \"DELETE FROM `campaign`; INSERT INTO `campaign` (`id`, `campaign_name`, `campaign_code`, `campaign_type`, `channel_type`, `start_time`, `end_time`, `start_reserve_time`, `minimum_duration`, `stock`, `reservable`, `need_coupon`, `status`, `store_ids`, `store_opening_time`, `has_kid`, `kid_age_low_limit`, `kid_age_high_limit`, `product_id`, `create_time`, `update_time`, `version`) VALUES ('123', 'xxx', 'C218888', 'Book_Product', 1, 1627551000, 1627637040, 1627550940, -1, 0, 0, 0, 0, NULL, NULL, 0, NULL, NULL, '723618c9fb0df0c90c5067bdbf2d165a409f1999e8214582694e8ae7bd76b891', 1627550699, 1627551000, 1), ('196', 'yyy', 'C210003', 'EnrollmentGift', 2, 1619798400, 1623049320, -1, -1, 0, 0, 0, 3, NULL, NULL, 0, NULL, NULL, NULL, 1621907624, 1623049320, 1)\")\nvoid getCampaignListByChannelTypeWechatOnly() {\n    val condition = new CampaignPageQueryCondition();\n    condition.setChannelType(CampaignChannelType.WECHAT_MP);\n\n    val pageQuery = new PageQuery();\n    pageQuery.setPageNum(1);\n    pageQuery.setPageSize(6);\n\n    condition.setPageQuery(pageQuery);\n    val res = sut.getCampaignList(condition);\n    assertThat(res.getTotal()).isEqualTo(1);\n}\n```\n​\n\n虽然和第二个测试用例一样，在数据库中插入了两条记录，但是这两条记录的渠道不一样，期待只返回一条。测试运行失败，显示返回了 2 条，这正是我要的失败，反应了现在系统缺失这个逻辑。<br />​<br />\n<a name=\"kO4x5\"></a>\n# 实现筛选逻辑\n​\n\n首先在筛选条件类里添加这个按照渠道筛选的字段：<br />​<br />\n```diff\n+ private CampaignChannelType channelType;\n+\n}\n```\n​\n\n然后编译挂了，因为原来的代码里会使用 MyBatisPlus 自动生成的 Mapper 将搜索条件对象转换成数据库实体对象，但是这个 channelType 在数据库层是 byte 类型，因此需要我们告诉它如何将 java 里的自定义枚举转换成对应的 byte。<br />​\n\n从编译错误信息可以看出能够通过自定义新的 mapper 来解决，但是我还不会，考虑到看了 MyBatisPlus 自动生成的代码也没有做特别的事情，就删掉了对这个自动生成的 Mapper 的依赖，将原来的搜索条件对象转换成数据库实体对象的逻辑封装成了一个方法。<br />​<br />\n```diff\n\t\t\t...\n- \t\tCampaign campaign = campaignEntityConvertor.convertCampaignConditionToEntity(condition);\n+ \t\tCampaign campaign = convertCampaignConditionToEntity(condition);\n      ...\n\n+ private Campaign convertCampaignConditionToEntity(CampaignPageQueryCondition condition) {\n+ \tif (condition == null) {\n+ \t\treturn null;\n+ \t}\n+\n+ \tCampaign campaign = new Campaign();\n+\n+ \tcampaign.setCampaignName(condition.getCampaignName());\n+\n+\t\treturn campaign;\n+ }\n```\n​\n\n这时通过跑所有的测试，验证没有破坏系统原有的行为。<br />​\n\n然后，为了让第三个测试用例通过，在原有的 LambdaQueryWrapper 组装方法里添加了一个额外的方法：<br />​<br />\n```diff\n...\n  }\n+ \n+ \tfilterByChannelType(condition, queryWrapper);\n+\n  \treturn queryWrapper;\n  }\n\n+ private void filterbyChannelType(CampaignPageQueryCondition condition, LambdaQueryWrapper<Campaign> queryWrapper) {\n+\t\tif (condition.getChannelType() != null) {\n+ \t\tqueryWrapper.eq(Campaign::getChannelType, condition.getChannelType().getType());\n+\t\t}\n+ }\n+\n```\n​\n\n重新跑所有测试，全部通过！做了个代码提交。<br />​\n\n但是，<br />​<br />\n<a name=\"C6PRo\"></a>\n## 第四个测试用例\n​\n\n由于采用了这样的枚举类型做这个渠道类型，导致以上的初步实现会存在问题。先看一下枚举的实现：<br />​<br />\n```java\npublic enum CampaignChannelType {\n    WECHAT_MP((byte) 1,\"WMP\", \"微信\"),\n    TMALL((byte) 2, \"EC\",\"天猫\"),\n    WECHAT_AND_TAMLL((byte) 3, null,\"微信,天猫\");\n...\n```\n​\n\n于是，我写了第四个测试用例，在数据库里存在两条不同渠道的活动，分别是微信和微信与天猫，筛选条件指定微信渠道，但是查询结果应该是两条记录，因为 byte 3 包含了微信。<br />​<br />\n```java\n@Test\n@Sql(statements = \"DELETE FROM `campaign`; INSERT INTO `campaign` (`id`, `campaign_name`, `campaign_code`, `campaign_type`, `channel_type`, `start_time`, `end_time`, `start_reserve_time`, `minimum_duration`, `stock`, `reservable`, `need_coupon`, `status`, `store_ids`, `store_opening_time`, `has_kid`, `kid_age_low_limit`, `kid_age_high_limit`, `product_id`, `create_time`, `update_time`, `version`) VALUES ('123', 'xxx', 'C218888', 'Book_Product', 3, 1627551000, 1627637040, 1627550940, -1, 0, 0, 0, 0, NULL, NULL, 0, NULL, NULL, '723618c9fb0df0c90c5067bdbf2d165a409f1999e8214582694e8ae7bd76b891', 1627550699, 1627551000, 1), ('196', 'yyy', 'C210003', 'EnrollmentGift', 1, 1619798400, 1623049320, -1, -1, 0, 0, 0, 3, NULL, NULL, 0, NULL, NULL, NULL, 1621907624, 1623049320, 1)\")\nvoid getCampaignListByWechatChannelCanGetBothWechatAndTmallCampaigns() {\n    val condition = new CampaignPageQueryCondition();\n    condition.setChannelType(CampaignChannelType.WECHAT_MP);\n\n    val pageQuery = new PageQuery();\n    pageQuery.setPageNum(1);\n    pageQuery.setPageSize(6);\n\n    condition.setPageQuery(pageQuery);\n    val res = sut.getCampaignList(condition);\n    assertThat(res.getTotal()).isEqualTo(2);\n}\n```\n​\n\n跑一下测试，果然失败了。因为我们在实现中指定了等于这个条件。于是修改最初的实现为：<br />​<br />\n```java\nprivate void filterByChannelType(CampaignPageQueryCondition condition, LambdaQueryWrapper<Campaign> queryWrapper) {\n    if (condition.getChannelType() != null) {\n        if (condition.getChannelType().equals(CampaignChannelType.WECHAT_MP)) {\n            queryWrapper.in(Campaign::getChannelType, new Byte[]{CampaignChannelType.WECHAT_MP.getType(), CampaignChannelType.WECHAT_AND_TAMLL.getType()});\n        } else if (condition.getChannelType().equals(CampaignChannelType.TMALL)) {\n            queryWrapper.in(Campaign::getChannelType, new Byte[]{CampaignChannelType.TMALL.getType(), CampaignChannelType.WECHAT_AND_TAMLL.getType()});\n        } else {\n            queryWrapper.eq(Campaign::getChannelType, condition.getChannelType().getType());\n        }\n    }\n}\n```\n​\n\n再次重新跑所有测试，全部通过！<br />\n<br />目前够了，提交并推送<br />​\n\n在这样的情况下，虽然代码写得比较丑，但是做到了在不破坏原有功能的情况下，正确地实现了新功能，所以我先做了个提交并推送了代码。<br />​<br />\n<a name=\"BCKhL\"></a>\n## 最后，端到端验证\n​\n\n以上只做了查询方法的增强，尽管对查询方法已经非常有信心了，但还是要做端到端自动化测试验证，即从 Springboot 的接口层面做验证，这只需要写个接口测试就好。不过，本文的重点是使用 h2 做数据库相关的测试，就不再赘述接口层面的测试了。<br />​\n\n不过，如果也有小白看到本文想了解 java Springboot 接口测试的写法，可以参考这个文件：[https://github.com/Jeff-Tian/securing-web-with-wechat-mp/blob/master/src/test/java/com/uniheart/securing/web/wechat/mp/WechatMessageControllerTest.java](https://github.com/Jeff-Tian/securing-web-with-wechat-mp/blob/master/src/test/java/com/uniheart/securing/web/wechat/mp/WechatMessageControllerTest.java)，流程很简单，主要是拼一个请求，然后借助 `TestRestTemplate` 发出请求，验证响应结果。<br />​\n\n在写完接口测试后，还可以真正启动项目进行 cURL 验证：\n```shell\nmvn clean install && mvn spring-boot:run -pl <your-application>\n\ncurl http://localhost:8080/your-endpoint\n```\n​<br />\n<a name=\"Qmiby\"></a>\n# 总结\n\n<br />采用 h2 可以省去手动 mock 数据库，或者采用 docker 数据库的麻烦。不过实现上还有很多有待优化的地方，比如测试里直接内联了 SQL 语句，可读性不好，测试意图不够清晰等等。\n"
  },
  {
    "id": 51325725,
    "title": "典型的工程模式",
    "description": "超时不要永久地等待下去这修复了什么？慢或者处于饥饿状态的服务。保持开放的连接会让这种饥饿状态加剧。重试瞬时错误可以重试。这修复了什么？网络环境倾向于不稳定。故障转移尝试 x 次然后等待一会儿再次尝试。这修复了什么？环境可以向上扩展或者向下缩容，实例可以互相切换，不然服务就会挂掉。背压背压的一种...",
    "custom_description": null,
    "updated_at": "2021-08-18T10:22:18.000Z",
    "created_at": "2021-08-18T10:22:18.000Z",
    "slug": "nwkgxe",
    "word_count": 332,
    "cover": "https://cdn.nlark.com/yuque/__puml/0b29819efbf63b3b5720284647b9be97.svg",
    "body": "<a name=\"heO4y\"></a>\n# 超时\n> 不要永久地等待下去\n\n<a name=\"FAJzT\"></a>\n## 这修复了什么？\n慢或者处于饥饿状态的服务。<br />​\n\n保持开放的连接会让这种饥饿状态加剧。<br />​<br />\n![](https://cdn.nlark.com/yuque/__puml/0b29819efbf63b3b5720284647b9be97.svg#lake_card_v2=eyJ0eXBlIjoicHVtbCIsImNvZGUiOiJAc3RhcnR1bWxcbnBhcnRpY2lwYW50IEF3ZXNvbWVTZXJ2aWNlIGFzIFwi54mb6YC855qE5pyN5YqhXCIgI0xpZ2h0R3JlZW5cbnBhcnRpY2lwYW50IFN0dWNrU2VydmljZSBhcyBcIumYu-WhnueahOacjeWKoVwiICNSZWRcblxuQXdlc29tZVNlcnZpY2UgLT4gU3R1Y2tTZXJ2aWNlIDog562J5b6F5LiN6LaF6L-HIHgg5pe26ZW_XG5AZW5kdW1sIiwidXJsIjoiaHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlL19fcHVtbC8wYjI5ODE5ZWZiZjYzYjNiNTcyMDI4NDY0N2I5YmU5Ny5zdmciLCJpZCI6IkNwenE1IiwibWFyZ2luIjp7InRvcCI6dHJ1ZSwiYm90dG9tIjp0cnVlfSwiY2FyZCI6ImRpYWdyYW0ifQ==)​<br />\n<a name=\"g4UHG\"></a>\n# 重试\n> 瞬时错误可以重试。\n\n<a name=\"KFJ1f\"></a>\n## 这修复了什么？\n网络环境倾向于不稳定。<br />\n\n![](https://cdn.nlark.com/yuque/__puml/341abc809499ed31e3929e156f8f55b0.svg#lake_card_v2=eyJ0eXBlIjoicHVtbCIsImNvZGUiOiJAc3RhcnR1bWxcbnBhcnRpY2lwYW50IEF3ZXNvbWVTZXJ2aWNlIGFzIFwi54mb6YC855qE5pyN5YqhXCIgI0xpZ2h0R3JlZW5cbnBhcnRpY2lwYW50IFRyYW5zaWVudFByb2JsZW1TZXJ2aWNlIGFzIFwi556s5pe25pWF6Zqc5pyN5YqhXCIgI1llbGxvd1xuXG5Bd2Vzb21lU2VydmljZSB4LT4gVHJhbnNpZW50UHJvYmxlbVNlcnZpY2UgOiBcbkF3ZXNvbWVTZXJ2aWNlIHgtPiBUcmFuc2llbnRQcm9ibGVtU2VydmljZSA6XG5Bd2Vzb21lU2VydmljZSAtPiBUcmFuc2llbnRQcm9ibGVtU2VydmljZSA6XG5AZW5kdW1sIiwidXJsIjoiaHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlL19fcHVtbC8zNDFhYmM4MDk0OTllZDMxZTM5MjllMTU2ZjhmNTViMC5zdmciLCJpZCI6Im0yMWswIiwibWFyZ2luIjp7InRvcCI6dHJ1ZSwiYm90dG9tIjp0cnVlfSwiY2FyZCI6ImRpYWdyYW0ifQ==)\n\n<a name=\"Ohqb8\"></a>\n# 故障转移\n> 尝试 x 次然后等待一会儿再次尝试。\n\n<a name=\"nFgDJ\"></a>\n## 这修复了什么？\n环境可以向上扩展或者向下缩容，实例可以互相切换，不然服务就会挂掉。<br />​<br />\n![](https://cdn.nlark.com/yuque/__puml/4a2f79129eb3ed3e0f6c88f75e0e5072.svg#lake_card_v2=eyJ0eXBlIjoicHVtbCIsImNvZGUiOiJAc3RhcnR1bWxcbnBhcnRpY2lwYW50IEF3ZXNvbWVTZXJ2aWNlIGFzIFwi54mb6YC855qE5pyN5YqhXCIgI0xpZ2h0R3JlZW5cbnBhcnRpY2lwYW50IERvd25TZXJ2aWNlIGFzIFwi5oyC5o6J55qE5pyN5YqhXCIgI1JlZFxucGFydGljaXBhbnQgQW5vdGhlckRvd25TZXJ2aWNlIGFzIFwi5oyC5o6J55qE5pyN5Yqh55qE5YW25LuW5rS7552A55qE5a6e5L6LXCIgI0N5YW5cblxuQXdlc29tZVNlcnZpY2UgeC0-IERvd25TZXJ2aWNlXG5Bd2Vzb21lU2VydmljZSAtPiBBbm90aGVyRG93blNlcnZpY2VcblxuQGVuZHVtbCIsInVybCI6Imh0dHBzOi8vY2RuLm5sYXJrLmNvbS95dXF1ZS9fX3B1bWwvNGEyZjc5MTI5ZWIzZWQzZTBmNmM4OGY3NWUwZTUwNzIuc3ZnIiwiaWQiOiJFZW5iciIsIm1hcmdpbiI6eyJ0b3AiOnRydWUsImJvdHRvbSI6dHJ1ZX0sImNhcmQiOiJkaWFncmFtIn0=)\n\n<a name=\"QzfdX\"></a>\n# 背压\n> 背压的一种形式是节流\n\n<a name=\"enriC\"></a>\n## 这修复了什么？\n那些沟通繁忙的服务或者有很多事件的服务，可能会出现往管道里塞入的速度超过接收者处理它们的速度（缓冲）。<br />​<br />\n![](https://cdn.nlark.com/yuque/__puml/f391db265f4ff07b9813f3c462a9c791.svg#lake_card_v2=eyJ0eXBlIjoicHVtbCIsImNvZGUiOiJAc3RhcnR1bWxcbnBhcnRpY2lwYW50IFRvb01hbnlDYWxsc1NlcnZpY2UgYXMgXCLlj5Hlh7ror7fmsYLlvojlpJrnmoTmnI3liqFcIiAjQ3lhblxucGFydGljaXBhbnQgQXdlc29tZVNlcnZpY2UgYXMgXCLniZvpgLznmoTmnI3liqFcIiAjTGlnaHRHcmVlblxuXG5Ub29NYW55Q2FsbHNTZXJ2aWNlIC0-IEF3ZXNvbWVTZXJ2aWNlXG5Ub29NYW55Q2FsbHNTZXJ2aWNlIC0-IEF3ZXNvbWVTZXJ2aWNlXG5Ub29NYW55Q2FsbHNTZXJ2aWNlIHgtPiBBd2Vzb21lU2VydmljZVxubm90ZSByaWdodFxuIOS4jeimgeWGjeaJk-aJsOaIkeS6hu-8jOaIkeW-iOW_mVxuZW5kIG5vdGVcbkBlbmR1bWwiLCJ1cmwiOiJodHRwczovL2Nkbi5ubGFyay5jb20veXVxdWUvX19wdW1sL2YzOTFkYjI2NWY0ZmYwN2I5ODEzZjNjNDYyYTljNzkxLnN2ZyIsImlkIjoic1dUT3UiLCJtYXJnaW4iOnsidG9wIjp0cnVlLCJib3R0b20iOnRydWV9LCJjYXJkIjoiZGlhZ3JhbSJ9)\n\n<a name=\"O6w4u\"></a>\n#  兜底\n> 如果服务不响应，就使用一个兜底或者后备值。\n\n<a name=\"vr6Hn\"></a>\n## 这修复了什么？\n保持调用链在线。即使在故障情况下也能继续执行。<br />​<br />\n![](https://cdn.nlark.com/yuque/__puml/40afd784db5d695bc0511a3e46a73e55.svg#lake_card_v2=eyJ0eXBlIjoicHVtbCIsImNvZGUiOiJAc3RhcnR1bWxcbnBhcnRpY2lwYW50IEF3ZXNvbWVTZXJ2aWNlIGFzIFwi54mb6YC855qE5pyN5YqhXCIgI0xpZ2h0R3JlZW5cbnBhcnRpY2lwYW50IEZhaWxpbmdTZXJ2aWNlIGFzIFwi5pWF6Zqc5pyN5YqhXCIgI1JlZFxuXG5Bd2Vzb21lU2VydmljZSB4LT4gRmFpbGluZ1NlcnZpY2VcbkF3ZXNvbWVTZXJ2aWNlIC0-IEF3ZXNvbWVTZXJ2aWNlOiDlpb3lkKfvvIznrZTmoYjmmK8gMlxuQGVuZHVtbCIsInVybCI6Imh0dHBzOi8vY2RuLm5sYXJrLmNvbS95dXF1ZS9fX3B1bWwvNDBhZmQ3ODRkYjVkNjk1YmMwNTExYTNlNDZhNzNlNTUuc3ZnIiwiaWQiOiJVZjJGcSIsIm1hcmdpbiI6eyJ0b3AiOnRydWUsImJvdHRvbSI6dHJ1ZX0sImNhcmQiOiJkaWFncmFtIn0=)​\n\n​<br />\n<a name=\"NiAul\"></a>\n# 断路器\n> 如果有故障，就打开断路器，直到一段时间过去\n\n<a name=\"SbfFr\"></a>\n## 这修复了什么？\n缓解下游系统的压力。<br />​<br />\n![](https://cdn.nlark.com/yuque/__puml/0a556749bff300cb29ba4f430eb9136c.svg#lake_card_v2=eyJ0eXBlIjoicHVtbCIsImNvZGUiOiJAc3RhcnR1bWxcbnBhcnRpY2lwYW50IEF3ZXNvbWVTZXJ2aWNlIGFzIFwi54mb6YC855qE5pyN5YqhXCIgI0xpZ2h0R3JlZW5cbnBhcnRpY2lwYW50IFByb2JsZW1TZXJ2aWNlIGFzIFwi5pyJ6Zeu6aKY55qE5pyN5YqhXCIgI1JlZFxuXG5Bd2Vzb21lU2VydmljZSB4LT4gUHJvYmxlbVNlcnZpY2U6IOWmguaenOaAu-aYr-Wksei0peWImeS4jeWGjeivoumXrlxuQXdlc29tZVNlcnZpY2UgeC0-IFByb2JsZW1TZXJ2aWNlXG5AZW5kdW1sIiwidXJsIjoiaHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlL19fcHVtbC8wYTU1Njc0OWJmZjMwMGNiMjliYTRmNDMwZWI5MTM2Yy5zdmciLCJpZCI6ImhQWUZlIiwibWFyZ2luIjp7InRvcCI6dHJ1ZSwiYm90dG9tIjp0cnVlfSwiY2FyZCI6ImRpYWdyYW0ifQ==)\n\n<a name=\"VXzwO\"></a>\n# 负载均衡\n> 多个实例处理请求\n\n<a name=\"EhpRP\"></a>\n## 这修复了什么？\n帮助某些服务均衡负载。<br />​<br />\n![](https://cdn.nlark.com/yuque/__puml/c1c4d2d7748546e2ff11b0251434a88d.svg#lake_card_v2=eyJ0eXBlIjoicHVtbCIsImNvZGUiOiJAc3RhcnR1bWxcbnBhcnRpY2lwYW50IEF3ZXNvbWVTZXJ2aWNlIGFzIFwi54mb6YC855qE5pyN5YqhXCIgI0xpZ2h0R3JlZW5cbnBhcnRpY2lwYW50IFVwU2VydmljZTEgYXMgXCLkuIvmuLjmnI3liqEgMVwiICNZZWxsb3dcbnBhcnRpY2lwYW50IFVwU2VydmljZTIgYXMgXCLkuIvmuLjmnI3liqEgMlwiICNZZWxsb3dcblxuQXdlc29tZVNlcnZpY2UgLT4gVXBTZXJ2aWNlMTog6K-35rGCIDFcbkF3ZXNvbWVTZXJ2aWNlIC0-IFVwU2VydmljZTI6IOivt-axgiAyXG5cbkBlbmR1bWwiLCJ1cmwiOiJodHRwczovL2Nkbi5ubGFyay5jb20veXVxdWUvX19wdW1sL2MxYzRkMmQ3NzQ4NTQ2ZTJmZjExYjAyNTE0MzRhODhkLnN2ZyIsImlkIjoibnlxS1UiLCJtYXJnaW4iOnsidG9wIjp0cnVlLCJib3R0b20iOnRydWV9LCJjYXJkIjoiZGlhZ3JhbSJ9)"
  },
  {
    "id": 51276920,
    "title": "我成了一个只会敲 Tab 键的工具人了！",
    "description": "前段时间，Github 推出了 copilot，一石激起千层浪，引起纷纷热议，也得到很多批评，说它只是 Google 和 StackOverflow 的搬运工而已。而我，竟然有幸收到了 Github 在 7 月 11 日发来的内测邀请，于是决定好好体验一番，毕竟面向 Google 和 Stac...",
    "custom_description": null,
    "updated_at": "2021-08-17T08:49:17.000Z",
    "created_at": "2021-08-17T08:49:17.000Z",
    "slug": "hlr5nd",
    "word_count": 1968,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1629179421307-98894d17-e424-488d-bc87-84c1bcc04b50.png",
    "body": "前段时间，Github 推出了 copilot，一石激起千层浪，引起纷纷热议，也得到很多批评，说它只是 Google 和 StackOverflow 的搬运工而已。<br />​\n\n而我，竟然有幸收到了 Github 在 7 月 11 日发来的内测邀请，于是决定好好体验一番，毕竟面向 Google 和 StackOverflow 编程的我，对于 copilot 是不是抄袭 Google 和 StackOverflow 上的内容，还是能明显感觉出来的。<br />​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1629179421307-98894d17-e424-488d-bc87-84c1bcc04b50.png#clientId=ud3dacbf3-15fe-4&from=paste&height=1080&id=u40bff69c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1080&originWidth=1755&originalType=binary∶=1&size=510204&status=done&style=none&taskId=u9d31e161-b20f-40f7-b684-50761ac3318&width=1755)<br />\n\n<a name=\"Yel7r\"></a>\n# 实测结果\n​\n\n体验了一个多月下来，线上结论，太惊艳了！绝对不只是搬运工，反正我已经退化成一个只会按 Tab 键的工具人了，因为它总是给我正确的建议，只需要按下 Tab 键，就能完成我想完成的工作。<br />​<br />\n<a name=\"CvuIo\"></a>\n## 编程体验\n​\n\n写代码的体验，其实网上的分享已经很多了，我不多做赘述，只分享一件小事。月初面试一名候选者，我本来让他在白板上写代码，但是他很有想法，反问我为什么不让他在电脑上写代码，于是等他在白板上写完代码后，我又加了一道题，让他在我电脑上写，我帮他开了我的 vscode。<br />​\n\n他写了没几行，就惊呼：你用了什么插件？它怎么知道我要写什么！<br />​<br />\n<a name=\"CJmBf\"></a>\n## 写作体验\n\n<br />编程体验不多说，本文想着重分享一下写作体验。是的，copilot 不仅在编码上体验出色，而且还能帮助你写文章，甚至能够“理解”上下文，做一些逻辑推理，并猜出你接下来想写什么！<br />​\n\n其实接下来才是本文的重点，来点截图看看 copilot 在写文章时的表现吧！<br />​<br />\n<a name=\"A97d0\"></a>\n#### 根据上下文猜出你接下来想些什么\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1629188673878-afafbc4b-5805-4a61-a179-f69ceb69e25b.png#clientId=ud3dacbf3-15fe-4&from=paste&height=1193&id=ud7e2ac84&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1193&originWidth=2805&originalType=binary∶=1&size=287984&status=done&style=none&taskId=u8dd253b3-e7ec-46f4-8734-8342ead41d4&width=2805)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1629188997268-8013ebd6-02b6-443c-b981-ba4aa4aa8ca9.png#clientId=ud3dacbf3-15fe-4&from=paste&height=1920&id=u7c0838ec&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1920&originWidth=3000&originalType=binary∶=1&size=452189&status=done&style=none&taskId=uae071984-3c2d-4c36-ab1a-1f3ba98c07c&width=3000)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1629189061673-02db84e2-f292-421d-83af-f770e84de4b3.png#clientId=ud3dacbf3-15fe-4&from=paste&height=1920&id=u35c2f686&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1920&originWidth=3000&originalType=binary∶=1&size=565130&status=done&style=none&taskId=u783d9e56-1b3e-4019-82b3-1df07a7fdf4&width=3000)<br />\n\n<a name=\"mJGfS\"></a>\n#### 提供多个选项\n​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1629188906040-c300dcad-afa8-4464-a23c-720526105f19.png#clientId=ud3dacbf3-15fe-4&from=paste&height=1920&id=u8fb00857&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1920&originWidth=3000&originalType=binary∶=1&size=511696&status=done&style=none&taskId=u6529b398-8871-46a6-b189-9206c94ead2&width=3000)<br />\n\n<a name=\"mx04c\"></a>\n#### 可以理解你写的文字，并做出逻辑推理\n​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1629189143501-f4a94069-ef03-4919-bcfc-5b53502ee7f7.png#clientId=ud3dacbf3-15fe-4&from=paste&height=1920&id=ub44f426d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1920&originWidth=3000&originalType=binary∶=1&size=640799&status=done&style=none&taskId=u3d21ebd9-fad3-4a64-a602-0da36aa6780&width=3000)<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1629189192692-1275911a-81c4-4aff-82d1-38b2e00d1752.png#clientId=ud3dacbf3-15fe-4&from=paste&height=1920&id=uc4824045&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1920&originWidth=3000&originalType=binary∶=1&size=640799&status=done&style=none&taskId=ue2a9819a-25b3-4f61-a9fb-c239f1d6abb&width=3000)<br />\n\n<a name=\"QSXK7\"></a>\n#### 最惊艳的表现！完全理解我敲入的内容，并猜出我想说什么，而且总结得完全正确！\n\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1629189283669-d9b7989a-4db4-43a2-b00d-e07745793d1e.png#clientId=ud3dacbf3-15fe-4&from=paste&height=1920&id=ua824690a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1920&originWidth=3000&originalType=binary∶=1&size=519611&status=done&style=none&taskId=u2856b0c1-93cf-4378-b6e7-16ea50f8679&width=3000)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1629189637623-02343ffa-0771-4d99-9534-966604666b69.png#clientId=ud3dacbf3-15fe-4&from=paste&height=1920&id=ua817178c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1920&originWidth=3000&originalType=binary∶=1&size=571371&status=done&style=none&taskId=u90bff8f3-51d4-40e2-bb9d-0cf062ef198&width=3000)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1629189599156-e368c777-15cb-4bdf-b6bf-4b7d0731174c.png#clientId=ud3dacbf3-15fe-4&from=paste&height=1920&id=ude765213&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1920&originWidth=3000&originalType=binary∶=1&size=451185&status=done&style=none&taskId=u69ab9389-2abf-4314-b386-afa31f57b2f&width=3000)<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1629189465661-cf562a53-9b35-44a8-954c-d6333543036c.png#clientId=ud3dacbf3-15fe-4&from=paste&height=1920&id=u3ae8cdfe&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1920&originWidth=3000&originalType=binary∶=1&size=441389&status=done&style=none&taskId=ud3b91df7-eb4a-4ad3-a6ea-1dcb55ab2c6&width=3000)<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1629189542158-e5686503-c1bd-46c0-91b5-3a99607c9484.png#clientId=ud3dacbf3-15fe-4&from=paste&height=1920&id=u02709f0b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1920&originWidth=3000&originalType=binary∶=1&size=644757&status=done&style=none&taskId=uf62c5436-58ee-4465-a269-ab92bfc65da&width=3000)<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1629189677381-a5dbe2c7-0a1c-46e2-be89-5e218ffa4a20.png#clientId=ud3dacbf3-15fe-4&from=paste&height=1920&id=u598d2b8b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1920&originWidth=3000&originalType=binary∶=1&size=535248&status=done&style=none&taskId=uc6d1574e-55ca-4b71-adf2-b78e72c209b&width=3000)<br />\n\n<a name=\"jQtAk\"></a>\n# 我和 copilot 合作写的文章全文\n\n<br />以上就是我在写文章时，使用 Copilot 的体验，整个过程我没有打多少字，几乎就是按一按 Tab 键。对于 Tab 键后的内容，我几乎没有修改过。如果说修改，也是修改自己的仅有的一些措辞，然后接受新的建议。<br />​\n\n以上全是 copilot 的广告，最后才是本文的真正内容部分，《增长的秩》。这是我在阅读《SICP》时碰到的问题，就是居然在算法复杂度分析时完全没有提到大 O 标记法，这是为什么呢？请看全文：<br />​\n\n​\n\n​\n\n​\n\n​<br />\n<a name=\"qv9Mr\"></a>\n# 增长的秩\n\n---\n\n增长的秩，即增长的数量级，是对算法复杂度的度量。一般程序员熟悉的大 O 标记法，就是增长的秩的一种表示方法。<br />​\n\n但是本书居然没有提及这种标记方法，而是采用了大 Θ 标记法。程序员们不禁要问，这两种标记法有什么区别？<br />​\n\n先上结论：**大 Θ 标记法提供的信息更多**。<br />​\n\nSICP 通过很多例子展示了不同算法的处理过程在消耗计算资源的速率上的巨大差异。它说要描述这种差异，有个简单的办法，就是使用增长的秩，来大致估计当输入变得更大时所需要的计算资源。精确定义如下：<br />​\n\n使用 n 这个参数来描述问题的规模，用 R(n) 来表示处理过程为处理这个规模为 n 的这个问题所需要的资源的数量。对于指定的待分析的处理过程，其所处理的问题有很多个属性可以用作这个参数 n。比如要计算平方根的近似值，可以采用精确的小数位数作为 n；对于矩阵乘法，可以采用矩阵的行数作为参数 n 等等。类似地，R(n) 既可能是被使用到的存储寄存器的数量，也可能是执行的基本机器操作次数，等等。计算机在指定时间只会执行有限次数的操作，所以一个处理过程所需要的时间是和其执行的基本机器操作的次数成正比的。<br />​<br />\n<a name=\"Rv99L\"></a>\n## 大 Θ 标记法\n\n<br />当我们说 R(n) 具有 Θ(f(n)) 的增长秩时，记作 R(n) = Θ(f(n))，这就意味着存在两个独立于 n 的正常数 k1 和 k2，它们对所有足够大的 n 满足如下关系：<br />​\n\nk1 f (n) ≤ R(n) ≤ k2 f (n)<br />​\n\n即，当 n 足够大时，R(n) 的值被夹逼在 k1 f(n) 和 k2 f(n) 之间，像个三明治一样。<br />​\n\n以上对于大 Θ 标记的定义做了详细的介绍，现在我们知道它提供了一个函数的上下极限这两个信息，而大 O 标记提供的信息更少，就是因为它只提供了上极限。<br />​<br />\n<a name=\"RmBVN\"></a>\n## 大 O 标记法\n​\n\n当我们只有一个上限渐进值时，我们一般采用大 O 标记法，精确定义如下：<br />​\n\n对给定的函数 g(n)，O(g(n)) 是这样的函数的集合：<br />​\n\nO(g(n)) = {f(n) : 存在正常数 k 和 n0，对所有大于等于 n0 的 n 都满足 0 ≤ f(n) ≤ k g(n)}。<br />​<br />\n<a name=\"ji5kl\"></a>\n## 它们的关系\n\n\n- 所有的大 Θ 标记法都是大 O 标记法的子集。但反之不成立。\n- T(n) 等价于 Θ(f(n))，如果它既是 O(f(n)) 的，又是 Ω(f(n)) 的话。\n\n​\n\n大 Θ 标记法比大 O 标记法提供的信息更多，所以只要可能，使用大 Θ 标记法将是更受推荐的，这也是为什么 SICP 这本书只使用了这个标记法的原因。<br />​\n\n但是，使用大 Θ 标记法会更加困难，因为要证明大 O 成立会比证明大 Θ 成立更加简单。<br />​<br />\n> 比如，归并排序既是 O(n log n) 的，又是 Θ(n log n) 的，但同时还可以是 O(n2) 的，因为 n2 是更“大”的值。但是它不可能是 Θ(n2)，因为这个算法并不是 Ω(n2) 的。（这个来自某大佬的说明，我还没有理解…… 也许是这个大佬说错了，还有待进一步思考和学习）\n\n<a name=\"ScYV0\"></a>\n## \n<a name=\"wnVwm\"></a>\n## 大 Ω 标记法\n\n<br />理解了上述大 Θ 标记法和大 O 标记法后，理解大 Ω 标记法就很容易了。它给出了函数的下逼近值。<br />​\n\n即如果 T(n) 是 Ω(f(n)) 的，那么存在一个数 n0 和 k，使得 T(n) ≥ k f(n) 对于所有 n ≥ n0 成立。<br />​<br />\n<a name=\"gvVde\"></a>\n## 总结\n\n<br />对于增长的秩（算法复杂度），有三种标记法，分别是大 Θ 标记法、大 O 标记法和大 Ω 标记法。他们都只给出了当输入很大时近似值。<br />​<br />\n\n- 大 Θ 标记法：给出了函数的上极限和下极限。\n- 大 O 标记法：给出了函数的上极限。\n- 大 Ω 标记法：给出了函数的下极限。\n\n​\n\n要注意的是，**这三种标记法和算法复杂度分析中的最好、最坏以及平均情况是不同的，它们都可以用在每一种情况的分析中**。\n"
  },
  {
    "id": 50865217,
    "title": "使用 jmeter 做压测，如何提供 cURL",
    "description": "问题背景类似这种沟通很没有效率，不如直接扔一个 cURL，减少沟通来回次数。这种情况，在《使用 cURL 提高前后端开发连调中的沟通效率》一文里反复说明了并且给了解决方案。今天又遇到一个情况，就是测试和后端开发的沟通，而且是压测，具体地说，是使用 jmeter 做压测，碰到问题，该怎么把 cU...",
    "custom_description": null,
    "updated_at": "2021-08-11T04:18:00.000Z",
    "created_at": "2021-08-11T04:18:00.000Z",
    "slug": "iuwfv9",
    "word_count": 463,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1628653292259-b9a31877-1379-42ad-a6b4-bef1bff25fcb.png",
    "body": "<a name=\"sD0gp\"></a>\n# 问题背景\n​\n\n类似这种沟通很没有效率，不如直接扔一个 cURL，减少沟通来回次数。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1628653292259-b9a31877-1379-42ad-a6b4-bef1bff25fcb.png#clientId=u72b221f5-9375-4&from=paste&height=155&id=u6d5da377&margin=%5Bobject%20Object%5D&name=image.png&originHeight=309&originWidth=793&originalType=binary∶=1&size=36736&status=done&style=none&taskId=u31ee1941-e575-4fce-a1a7-26e73f8db4d&width=396.5)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1628653356514-617314c7-09d1-4a23-9ba6-55f7fba9bc34.png#clientId=u72b221f5-9375-4&from=paste&height=312&id=u8bad750c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=623&originWidth=795&originalType=binary∶=1&size=61002&status=done&style=none&taskId=ue0cf41a3-0254-4dfe-85f0-dcfd9f115c4&width=397.5)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1628653456402-c71b21e8-b231-4d43-b7ba-71bc80441a7d.png#clientId=u72b221f5-9375-4&from=paste&height=363&id=ue5776cbd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=725&originWidth=801&originalType=binary∶=1&size=87046&status=done&style=none&taskId=u53c8747b-6adf-46ea-9311-9172818ae59&width=400.5)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1628653684817-51166594-59a3-428f-9b31-b22342d59218.png#clientId=u72b221f5-9375-4&from=paste&height=215&id=ued5fb4c3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=430&originWidth=569&originalType=binary∶=1&size=97655&status=done&style=none&taskId=u32255b65-8b41-495a-b191-4b1828431ce&width=284.5)<br />\n<br />这种情况，在《[使用 cURL 提高前后端开发连调中的沟通效率](https://zhuanlan.zhihu.com/p/375532394)》一文里反复说明了并且给了解决方案。今天又遇到一个情况，就是测试和后端开发的沟通，而且是压测，具体地说，是使用 jmeter 做压测，碰到问题，该怎么把 cURL 导出呢？<br />​\n\n以及如果是其他前端开发，调用第三方库，碰到和后端交互的问题，该怎么把请求日志打出来并且打印成 cURL 格式呢？<br />​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1628654696487-67ab542f-585a-455c-a5d5-a661dd67543c.png#clientId=u72b221f5-9375-4&from=paste&height=786&id=u0a863e7d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1571&originWidth=953&originalType=binary∶=1&size=979381&status=done&style=none&taskId=u03c512ba-638b-495a-935c-b6ce0e11279&width=476.5)\n<a name=\"L2DSn\"></a>\n# 解决方案\n​\n\n如果是开发想在日志里将请求打印成 cURL，可以参考《[将 FeignClient 的请求记录成 cURL 格式](https://zhuanlan.zhihu.com/p/386126054)》的思路。但如果不想开发，**其实只需要抓包就行了**。<br />​\n\nWeb 开发，浏览器自带请求抓包；微信小程序开发，微信小程序开发者工具自带请求抓包。如果原生 APP 开发，或者使用 jmeter 做压测这种情况，就可以使用通用的系统级抓包工具。<br />​<br />\n<a name=\"IcJsi\"></a>\n# 抓包工具推荐\n​\n\n在 Windows 系统中，可以使用 Fiddler。在 mac OS 里，可以使用 Charles。<br />​<br />\n<a name=\"qRet2\"></a>\n# jmeter 压测抓包举例\n​\n\n在 mac OS 里，把 Charles 打开，看一下代理设置：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1628655052908-a7451a7a-9384-4582-b29e-ef951a7b9548.png#clientId=u72b221f5-9375-4&from=paste&height=344&id=u35a294fe&margin=%5Bobject%20Object%5D&name=image.png&originHeight=687&originWidth=1247&originalType=binary∶=1&size=202751&status=done&style=none&taskId=u0f78625d-f784-45cd-8af8-af53cf8ba0b&width=623.5)<br />记下端口，然后使用代理配置的方式执行 JMeter 命令（详见官方文档[http://jmeter.apache.org/usermanual/get-started.html#proxy_server](http://jmeter.apache.org/usermanual/get-started.html#proxy_server)），比如：<br />​<br />\n```shell\n➜ jmeter -H \"localhost\" -P \"8888\" -n -t \"/path/to/your/script.jmx\" -l test_result.jtl\n```\n\n<br />在 meter 命令跑起来后，你就可以在 Charles 里实时看到发出的请求了：<br />​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1628655351331-ddcb048a-826f-4966-a188-c7fe002a2844.png#clientId=u72b221f5-9375-4&from=paste&height=295&id=uabf17c6f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=589&originWidth=581&originalType=binary∶=1&size=197503&status=done&style=none&taskId=u7f740c80-cc5a-4211-afb6-d53c57abb33&width=290.5)<br />\n<br />要拿到 cURL，只是一个右键的事情：<br />​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1628655379542-b2ab0b38-9c59-41d7-a34d-95381694eba8.png#clientId=u72b221f5-9375-4&from=paste&id=u21e6d2dc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=168&originWidth=307&originalType=binary∶=1&size=24284&status=done&style=none&taskId=u70a2b921-7873-4539-8536-cd5da31979b)\n"
  },
  {
    "id": 50379777,
    "title": "使用 Logback 给日志中的敏感数据打码",
    "description": "背景最近在公司的 Java 项目中看到很多这样的代码：public void maskData(List<ReservationDto> list) {     ...     for (ReservationDto dto : list) {     \tfor (String fieldNa...",
    "custom_description": null,
    "updated_at": "2021-08-04T03:32:39.000Z",
    "created_at": "2021-08-04T03:30:21.000Z",
    "slug": "owp0hc",
    "word_count": 1749,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1628047539373-d1300f1d-7a89-4216-936c-9b8bf8c46247.png",
    "body": "<a name=\"ICI8Z\"></a>\n# 背景\n​\n\n最近在公司的 Java 项目中看到很多这样的代码：<br />​<br />\n```java\npublic void maskData(List<ReservationDto> list) {\n    ...\n    for (ReservationDto dto : list) {\n    \tfor (String fieldName : fields) {\n\t        try {\n                Field field = ReservationDto.class.getDeclaredField(fieldName);\n                field.setAccessible(true);\n                field.set(dto, \"******\");\n            } catch (Exception e) {\n        \t}\n    \t}\n    }\n    ...\n}\n```\n有人可能立即识别到一个坏味道，有一个空的 `catch` 块。对于这样的代码，我并不感到惊讶，因为 Java 工程的形象在我心目中早就崩塌了：《[后端工程圣殿形象的崩塌以及重建](https://zhuanlan.zhihu.com/p/376821879)》。<br />​\n\n我这次对该 Java 工程的改造，并不在这个空的异常捕获块，而是识别到该工程有一个明显的需求，对于某些字段，需要用星号*打码。目前该工程有很多自行实现的打码方法，造成了很多代码重复。并且需要打印日志时主动调用这样的打码方法，违反了单一职责原则，即在打印日志时，还需要关注打码逻辑。<br />​<br />\n<a name=\"RKU9h\"></a>\n# 打码需求\n\n<br />当大量数据被日志记录下来后，对于其中的敏感数据进行打码非常重要。一般做得好的公司，会有专门的团队对项目进行渗透测试，如果发现日志中有敏感数据泄露，是不会允许项目上线的。<br />​<br />\n<a name=\"pfaRx\"></a>\n# Logback\n\n<br />我看了下项目，日志部分使用了 Logback。在 Java 的生态世界里，它算是最常用的日志框架了，也是其前驱者 Log4j 的替代者。它比 Log4j 的性能更好，也提供了更多的配置和在存档旧日志文件中具有更多的灵活性。<br />​\n\n目前项目中的 logback 配置如下：<br />​<br />\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <contextName>uniheart</contextName>\n\n    <springProperty scope=\"context\" name=\"appName\" source=\"spring.application.name\"/>\n\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <layout class=\"ch.qos.logback.classic.PatternLayout\">\n            <pattern>[TraceNo=%X{x-request-id}] %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n\n            </pattern>\n        </layout>\n    </appender>\n\n    <root level=\"INFO\">\n        <appender-ref ref=\"STDOUT\" />\n    </root>\n\n</configuration>\n```\n​<br />\n<a name=\"jx1Mi\"></a>\n# 重新实现打码\n​\n\n本文将使用另外一种方式实现日志中的敏感数据打码，以解决打码逻辑分散在代码各处的问题，即将打码逻辑放在单独的文件里，并允许通过配置的方式去做扩展。<br />​\n\n这里通过一个实际的例子展示打码前后的效果，但是可以应用在更多的地方。<br />​<br />\n<a name=\"pLSFF\"></a>\n# FeignClient 请求日志中的敏感数据\n​\n\n这个实际的例子就是 FeignClient 请求日志。由于微服务架构的广泛应用，因此存在服务间相互调用的情况，一般通过 FeignClient 来调用上游服务。但是在联调过程中，往往需要记录下实际的请求日志。在实际项目中，如同打码逻辑一样，这种请求日志也是分散在各个调用处，并且对于一个请求，会打印多行日志分别记录请求头、入参、调用的端点地址等等，这样并不高效，在《[将 FeignClient 的请求记录成 cURL 格式](https://zhuanlan.zhihu.com/p/386126054)》详细介绍了这一点，并给出了一个解决方案，即在 FeignConfig 文件中一处实现请求日志的打印，并且将请求打印成一个 cURL 命令，从而方便重放和沟通。<br />​\n\n《[将 FeignClient 的请求记录成 cURL 格式](https://zhuanlan.zhihu.com/p/386126054)》虽然解决了日志打印问题，但是实际的服务接口调用，往往需要认证，而认证往往需要密钥，这种密钥就是敏感数据，不应该明文显示。比如实际日志中会看到：<br />​<br />\n```shell\n[TraceNo=521F2E813AD8491AA0075CCCF5DAD682] 2021-08-04 10:26:56.750 [http-nio-8081-exec-1] INFO  c.l.c.r.p.infrastructure.rpc.common.FeignConfig - cURL to replay for 521F2E813AD8491AA0075CCCF5DAD682:\ncurl --location --request POST 'http://k8s-default-ingressl-0de2febdbe-1784506518.cn-northwest-1.elb.amazonaws.com.cn/auth/webtoken' \\\n --header 'Content-Length: 152 '\\\n --header 'Content-Type: application/json '\\\n --header 'x-request-id: 521F2E813AD8491AA0075CCCF5DAD682 '\\\n \\\n--data-raw '{\n\t\"client_id\":\"dev_interface\",\n\t\"client_secret\":\"1234567890\",\n\t\"grant_type\":\"client_credentials\",\n\t\"scope\":\"member\"\n}'\n```\n​\n\n其实，这里的 `client_secret` 明文显示在日志中，就会有很大风险。<br />​<br />\n<a name=\"ZoFVE\"></a>\n# PatternLayout\n\n<br />可以通过配置打码规则来对所有的由 Logback 产生的日志输出进行打码，从而集中打码逻辑。要实现打码逻辑集中化，我们需要实现自定义的 `**_ch.qos.logback.classic.PatternLayout_**`，从而用自定义的 Layout 来扩展每一个 Logback appender。具体地说，在这里我们实现一个 MaskingPatternLayout 类作为 PatternLayout  的一个实现，它支持的打码规则配置，是以正则表达式代表的打码模式。<br />​\n\n实现的 MaskingPatternLayout 如下：<br />​<br />\n```java\npackage com.uniheart;\n\nimport ch.qos.logback.classic.PatternLayout;\nimport ch.qos.logback.classic.spi.ILoggingEvent;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class MaskingPatternLayout extends PatternLayout {\n\n    private Pattern multilinePattern;\n    private List<String> maskPatterns = new ArrayList<>();\n\n    // 对 xml 配置文件中定义的每一项，都分别调用\n    public void addMaskPattern(String maskPattern) {\n        maskPatterns.add(maskPattern);\n        multilinePattern = Pattern.compile(maskPatterns.stream().collect(Collectors.joining(\"|\")), Pattern.MULTILINE);\n    }\n\n    @Override\n    public String doLayout(ILoggingEvent event) {\n        return maskMessage(super.doLayout(event));\n    }\n\n    private String maskMessage(String message) {\n        if (multilinePattern == null) {\n            return message;\n        }\n        StringBuilder sb = new StringBuilder(message);\n        Matcher matcher = multilinePattern.matcher(sb);\n        while (matcher.find()) {\n            IntStream.rangeClosed(1, matcher.groupCount()).forEach(group -> {\n                if (matcher.group(group) != null) {\n                    // 用星号替换每一个匹配到的字符\n                    IntStream.range(matcher.start(group), matcher.end(group)).forEach(i -> sb.setCharAt(i, '*'));\n                }\n            });\n        }\n        return sb.toString();\n    }\n}\n\n```\n`PattternLayout.doLayout()` 的实现专门负责对应用中每一条日志信息被配置好的模式匹配到的数据进行打码。<br />​\n\nLogback 的配置文件（文件名定义在应用的配置里的 logging.config.classpath 项）中的 maskPattern 数组构成了多行的模式。但是遗憾的是 Logback 引擎本身不支持构造器注入，从而需要对配置的每一项，分别调用 `addMaskPattern()` 方法。所以每次添加新的正则表达式模式到配置文件后，就需要重新编译。<br />​<br />\n<a name=\"Xw7ym\"></a>\n# 打码配置\n\n<br />总的来说，我们需要使用正则表达式来进行敏感数据的打码。对于上面提到的 FeignClient 的日志，我们需要将 `client_secret` 打码，这可以使用如下的正则表达式：<br />​<br />\n```java\n\\\"client_secret\\\"\\s*:\\s*\\\"(.*?)\\\"\n```\n\n<br />现在把它加入到 logback xml 配置文件中的 maskPattern 标签下，从而之前的配置文件变成了这样：<br />​<br />\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <contextName>uniheart</contextName>\n\n    <springProperty scope=\"context\" name=\"appName\" source=\"spring.application.name\"/>\n\n    <appender name=\"mask\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder class=\"ch.qos.logback.core.encoder.LayoutWrappingEncoder\">\n            <layout class=\"com.uniheart.MaskingPatternLayout\">\n                <maskPattern>\\\"client_secret\\\"\\s*:\\s*\\\"(.*?)\\\"</maskPattern>\n                <pattern>[TraceNo=%X{x-request-id}] %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n\n                </pattern>\n            </layout>\n        </encoder>\n    </appender>>\n\n    <root level=\"INFO\">\n        <appender-ref ref=\"mask\" />\n    </root>\n\n</configuration>\n```\n<a name=\"uDL4j\"></a>\n# \n<a name=\"N0fII\"></a>\n# 执行效果\n\n<br />再次运行应用，就会看到先前的日志变成了这样：<br />​<br />\n```shell\n[TraceNo=521F2E813AD8491AA0075CCCF5DAD682] 2021-08-04 10:26:56.750 [http-nio-8081-exec-1] INFO  c.l.c.r.p.infrastructure.rpc.common.FeignConfig - cURL to replay for 521F2E813AD8491AA0075CCCF5DAD682:\ncurl --location --request POST 'http://k8s-default-ingressl-0de2febdbe-1784506518.cn-northwest-1.elb.amazonaws.com.cn/auth/webtoken' \\\n --header 'Content-Length: 152 '\\\n --header 'Content-Type: application/json '\\\n --header 'x-request-id: 521F2E813AD8491AA0075CCCF5DAD682 '\\\n \\\n--data-raw '{\n\t\"client_id\":\"dev_interface\",\n\t\"client_secret\":\"********************************\",\n\t\"grant_type\":\"client_credentials\",\n\t\"scope\":\"member\"\n}'\n```\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1628047539373-d1300f1d-7a89-4216-936c-9b8bf8c46247.png#clientId=u598fef81-c21c-4&from=paste&id=u0e08a055&margin=%5Bobject%20Object%5D&name=image.png&originHeight=720&originWidth=2686&originalType=binary∶=1&size=205867&status=done&style=none&taskId=u9f52d73b-b9ca-493f-b813-3e50ee17161)<br />\n<br />通过这种方式，日志打印者不需要再关注打码逻辑，从而可以在统一的 logback 配置文件里来定义打码规则。<br />​<br />\n<a name=\"UqvMa\"></a>\n# 总结\n\n<br />在应用日志中，通过使用 Logback 的 PatternLayout 的特性来对敏感数据打码，可以集中在配置文件里使用正则表达式定义打码规则，减少了日志打印者的心智负担，有更好的扩展性，还避免了重复代码。\n"
  },
  {
    "id": 50022727,
    "title": "【已解决】Mac OS 打印时弹出 \"pstopsRV1.app\" can't be opened because Apple cannot check it for malicious software 错误框的问题",
    "description": "【症状】在 Mac OS 打印时弹出 \"pstopsRV1.app\" can't be opened because Apple cannot check it for malicious software 错误对话框，导致打印任务不能发送到服务器。但是点击“show in Finder”，手...",
    "custom_description": null,
    "updated_at": "2021-07-29T08:22:34.000Z",
    "created_at": "2021-07-29T08:22:34.000Z",
    "slug": "oy9rro",
    "word_count": 369,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1627546472616-4dea66dd-d8e3-44f4-932a-a00ee7370572.png",
    "body": "<a name=\"JgS6H\"></a>\n# 【症状】\n​\n\n在 Mac OS 打印时弹出 \"pstopsRV1.app\" can't be opened because Apple cannot check it for malicious software 错误对话框，导致打印任务不能发送到服务器。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1627546472616-4dea66dd-d8e3-44f4-932a-a00ee7370572.png#clientId=u63af023c-0691-4&from=paste&height=305&id=u9751e1b2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=609&originWidth=499&originalType=binary∶=1&size=212220&status=done&style=none&taskId=uc2e82b9e-e851-4726-8ec6-367c008be5b&width=249.5)<br />\n<br />但是点击“show in Finder”，手动安装也不成功，即使打开设置的 Security & Privacy，点击“Open Anyway”，仍然不能安装。<br />​<br />\n<a name=\"pEX98\"></a>\n# 【分析】\n​\n\n这个奇怪的 app 是在打印时自动被下载下来，需要安装才能继续将打印任务发送到服务器。虽然对打印不熟，但是曾经在《编程大师智慧》一书中看过一段对 PostScript 的发明者的采访，从中感觉到显示在电脑上的东西，要让打印机识别并高保真地在纸上再现，需要做一系列转换。做这种转换的程序当然不止 PostScript 一种，但是转换程序是必须的。<br />​\n\n现在看起来，这个奇怪的程序正是做这种转换工作的，需要它将电脑上显示的内容转换成打印机理解的指令。但是现在这个程序被 Mac 系统的安全检测标记为威胁，被关进小黑屋了。<br />​<br />\n<a name=\"I9j4m\"></a>\n# 【解决办法】\n​\n\n如下命令可以把这个关键程序从小黑屋中解救出来，亲测有效！\n```shell\nxattr -d com.apple.quarantine /Library/Printers/RICOH/Filters/pstopsRV1.app\n```\n然后你就可以愉快地打印了。\n"
  },
  {
    "id": 49952155,
    "title": "使用 aws ssm cli 连接跳板机",
    "description": "背景在云原生开发越来越热的今天，公司采用云服务提供商的托管 Kubernetes 集群部署应用很常见。如果采用了 AWS 的 EKS，并且公司网络和集群的网络没有打通的情况下，要查看集群资源，可以通过 AWS 的会话管理器，启动 Web Console 来进行。但是这样手动步骤过多，对开发不够...",
    "custom_description": null,
    "updated_at": "2021-07-28T09:21:10.000Z",
    "created_at": "2021-07-28T09:21:10.000Z",
    "slug": "vd5wq4",
    "word_count": 568,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1627463580307-dbe4477a-8c2e-491a-b273-e74332b3d8e2.png",
    "body": "<a name=\"B8oSC\"></a>\n# 背景\n​\n\n在云原生开发越来越热的今天，公司采用云服务提供商的托管 Kubernetes 集群部署应用很常见。如果采用了 AWS 的 EKS，并且**公司网络和集群的网络没有打通**的情况下，要查看集群资源，可以通过 AWS 的会话管理器，启动 Web Console 来进行。但是这样手动步骤过多，对开发不够友好。<br />​\n\n并且目前的 AWS web console，有一个 BUG，即在 web console 里通过 `kubectl edit cm/xxxconfigmap` 对 configmap 进行编辑后，无法使用常用的 ESC 或者 Ctrl + [ 退出 vi 的插入模式，因为这两个按键方式都会被浏览器截获，导致失去编辑窗口的焦点。尽管我通过试验 Ctrl + o 可以不失去焦点成功退出vi 的插入模式，但是如果能够不用 web console 是最理想的。<br />​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1627463580307-dbe4477a-8c2e-491a-b273-e74332b3d8e2.png#clientId=udbfc48be-a8eb-4&from=paste&id=u9c61e6ee&margin=%5Bobject%20Object%5D&name=image.png&originHeight=712&originWidth=1834&originalType=binary∶=1&size=154525&status=done&style=none&taskId=u429942c2-ecf5-4418-b9d0-79e1b38fa65)<br />​<br />\n<a name=\"L174b\"></a>\n# aws ssm cli\n​\n\n可以通过 aws ssm cli 来避免使用 web console。但是直接使用会报连接失败的错误。<br />​<br />\n<a name=\"SDCHu\"></a>\n# 解决方案\n​\n\n通过脚本自动登录并获取 AWS 临时令牌，以获得连接权限。<br />​<br />\n<a name=\"D9BMb\"></a>\n## 先决条件\n​\n\nPython3 已安装：<br />​<br />\n```shell\n➜ python3 --version\nPython 3.8.2\n```\n​<br />\n<a name=\"bATxW\"></a>\n## 克隆脚本\n​<br />\n```shell\ngit clone git@github.com:Jeff-Tian/aws-adfs-auth.git\ncd aws-adfs-auth\n```\n\n\n<a name=\"diEV4\"></a>\n## 安装依赖\n​<br />\n```shell\nsudo pip3 install --upgrade pip         # upgrade to latest pip3\nsudo pip3 install -r requirements.txt   # install dependencies\n```\n<a name=\"S9TkS\"></a>\n## \n<a name=\"bQRN0\"></a>\n## 获取临时令牌\n​<br />\n```shell\nCYBERARK_SERVER=pam.corp.your-company.com ADFS_DOMAIN=adfs.corp.your-company.com ADFS_DOMAIN_USERNAME=cnXXX ADFS_DOMAIN_PASSWORD=***** python3 main.py -r cn-north-1 --no-certificate-verify\n\n```\n​<br />\n<a name=\"t2FQ0\"></a>\n## 安装 ssm 插件\n```shell\ncurl \"https://s3.amazonaws.com/session-manager-downloads/plugin/latest/mac/session-manager-plugin.pkg\" -o \"session-manager-plugin.pkg\"\nsudo installer -pkg session-manager-plugin.pkg -target /\nln -s /usr/local/sessionmanagerplugin/bin/session-manager-plugin /usr/local/bin/session-manager-plugin\n```\n\n\n<a name=\"d8u2P\"></a>\n## 连接跳板机\n​<br />\n```shell\naws ssm start-session --target i-1234-instance-id-of-ec2\n```\n\n\n<a name=\"xrbKm\"></a>\n## 使用 `kubectl` 命令查看集群资源\n​<br />\n```shell\n➜ aws ssm start-session --target i-1234-instance-id-of-ec2\n \nStarting session with SessionId: jeff-sqs-test-0a8d0d4f75545e986\nsh-4.2$ sudo su\n[root@ip-172-20-20-231 bin]# kubectl get pod\nNAME                                       READY   STATUS    RESTARTS   AGE\nadminer-f5cc4fcc7-dx7d9                    1/1     Running   0          12d\nyapi-deployment-mongo-855fff7c6d-fshs4     1/1     Running   0          12d\n[root@ip-172-20-20-231 bin]# exit\nexit\nsh-4.2$ exit\nexit\n \n \nExiting session with sessionId: jeff-sqs-test-0a8d0d4f75545e986.\n```\n\n\n<a name=\"eoctl\"></a>\n# 总结\n​\n\n第一次使用需要执行一系列命令，因为需要安装一些依赖。在随后的工作中，只需要执行如下两个命令就行了：<br />​<br />\n```shell\nCYBERARK_SERVER=pam.corp.your-company.com ADFS_DOMAIN=adfs.corp.your-company.com ADFS_DOMAIN_USERNAME=cnXXX ADFS_DOMAIN_PASSWORD=***** python3 main.py -r cn-north-1 --no-certificate-verify\n\naws ssm start-session --target i-1234-instance-id-of-ec2\n```\n\n<br />临时令牌只有一个小时的有效期，但是由于执行命令比起操作网页快得多，因此很方便自动化。\n"
  },
  {
    "id": 49014260,
    "title": "使用 tplant 快速概览代码的领域模型",
    "description": "接地气的 DDD看到技术雷达发表的《使用函数式语言建立领域模型》文章，非常开心，因为它使用了 TypeScript 来做落地说明，这是一个非常接地气的 DDD。有不接地气的 DDD 吗？参考《领域驱动设计》这本书和相关（主观的）评价：为什么说《使用函数式语言建立领域模型》就非常接地气了呢？因为...",
    "custom_description": null,
    "updated_at": "2021-07-14T12:31:30.000Z",
    "created_at": "2021-07-14T12:31:30.000Z",
    "slug": "wg2o9o",
    "word_count": 1301,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1626260360282-d973c0bf-a020-4e77-83b4-08eb2fad6275.png",
    "body": "<a name=\"hImbC\"></a>\n# 接地气的 DDD\n​\n\n看到技术雷达发表的《[使用函数式语言建立领域模型](https://zhuanlan.zhihu.com/p/388845844)》文章，非常开心，因为它使用了 TypeScript 来做落地说明，这是一个非常接地气的 DDD。<br />​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1626260360282-d973c0bf-a020-4e77-83b4-08eb2fad6275.png#clientId=uca78bb18-1316-4&from=paste&height=708&id=u679523d3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=945&originWidth=795&originalType=binary∶=1&size=106301&status=done&style=none&taskId=u91e74d28-7e47-450d-84f7-33d53f8f107&width=596)<br />有不接地气的 DDD 吗？参考《领域驱动设计》这本书和相关（主观的）评价：<br />​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1626261980697-99a75daa-6c8b-4dfa-bb5e-6ec9f71fdcbe.png#clientId=uca78bb18-1316-4&from=paste&height=520&id=u4a6cbc7b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2079&originWidth=960&originalType=binary∶=1&size=884693&status=done&style=none&taskId=uf01c920a-a3d8-4f68-85a0-2acbaac0658&width=240)![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1626262001643-f55b9ebe-bd63-4ea9-aa0a-b0d3d75b0db7.png#clientId=uca78bb18-1316-4&from=paste&height=520&id=u9868e391&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2079&originWidth=960&originalType=binary∶=1&size=631969&status=done&style=none&taskId=ubbc78d31-3fa4-4708-b062-89ac7c77276&width=240)<br />\n<br />为什么说《[使用函数式语言建立领域模型](https://zhuanlan.zhihu.com/p/388845844)》就非常接地气了呢？因为采用了 TypeScript。TypeScript 是 JavaScript 语言的超集，既有 JavaScript 所有的好处，又避免了 JavaScript 饱受诟病的动态类型带来的问题。JavaScript 是很强大的，借浏览器这个宿主打遍天下无敌手，又借 NodeJs 渗透到服务器端。如果一定要纠结学习编程从哪门语言开始的话，那么当然是从学习 JavaScript 开始，没有第二种更好的选择。<br />\n<br />TypeScript  基于 JavaScript 构建了类型系统，而《[使用函数式语言建立领域模型](https://zhuanlan.zhihu.com/p/388845844)》则很好地演示了如何通过 TypeScript 的类型系统来设计领域模型。就是说，通过 TypeScript 的类型系统，实现了**代码和领域模型的等价**，不仅能够用它在敏捷开发过程中进行沟通，而且保证跑着的系统真的就是使用了这样的领域模型，也就是说，把**领域驱动设计**落了地。<br />​\n\n如果只设计，不落地，那其实就是在吹牛嘛，不能当真的。多少团队画出的设计图和实际代码天差地别的？我想有经验的程序员心理都清楚。<br />​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1626263737369-9f1ea8a9-00df-4db9-bff8-67b398e25af1.png#clientId=uca78bb18-1316-4&from=paste&height=429&id=uedc84fd3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1714&originWidth=960&originalType=binary∶=1&size=655068&status=done&style=none&taskId=u026bbf80-6ef1-4861-b2ff-82e2ec389cc&width=240)<br />\n\n<a name=\"kwpc5\"></a>\n# 到底什么是设计？\n​\n\n很多人倾向所谓的设计先行，写代码前先写设计文档，画图。这里隐含的意思是，代码是实现，而不是设计。但是《[使用函数式语言建立领域模型](https://zhuanlan.zhihu.com/p/388845844)》纠正了这一观点：**代码才是设计**。<br />​<br />\n<a name=\"ejm6M\"></a>\n## 代码=设计=模型=文档\n​<br />\n> 实际上代码比较擅长表达设计内容，从本质上讲，源代码是一个文档，可以完美地描述产品的每个当前设计决策。\n\n​\n\n代码是真正的设计，其他只是 PPT。但是《[使用函数式语言建立领域模型](https://zhuanlan.zhihu.com/p/388845844)》也说了，虽然代码是设计，但是领域专家可不一定能读懂代码（虽然 TypeScript 的语法简单易学，但是我估计多数领域专家甚至某些 Java 程序员，是从本能上排斥的），这制约了**代码=模型**这样的等式，存在鸿沟。这也是为什么统一建模语言（UML）大行其道的原因，它是一门表达软件产品的图形化语言。<br />​\n\n既然 UML 是沟通利器，然而容易和代码脱节，正如作者说的：<br />​<br />\n> 我还记得我的第一份工作，每当有代码或者设计改动时，都要去更新UML类图以及数据库设计文档。这些文档大概充当着共享模型的作用，但是最终这些设计类图和文档都慢慢变得不可信，因为没有任何手段保证文档会被及时跟新。\n\n\n\n<a name=\"CFRty\"></a>\n# 终极解决方案\n\n<br />UML 是一种视图。就像任何编程语言，其实本质上只是二进制指令的一种高级视图。既然最终运行的软件跑的是二进制指令，而我们可以用高级语言去查看，那么同样我们也可以把源代码已一种图形化的方式去查看。也就是说，将人工绘制 UML 图，变成自动生成，那么就不存在代码和 UML 图脱节的问题了。想用 UML 视图查看源代码哪个版本，就基于该版本生成一份 UML 图就好。<br />​<br />\n<a name=\"vmm9W\"></a>\n## tplant\n​\n\n如果我们使用 TypeScript 来做开发，那么已经有开源工具可以自动从 TypeScript 代码生成 UML 图了，这个工具就是本人参与开发的 tplant！<br />​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1626264833396-17bda686-ae76-4913-9bf3-01093fbdcdce.png#clientId=uca78bb18-1316-4&from=paste&height=617&id=u4a4eef8c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=823&originWidth=783&originalType=binary∶=1&size=111063&status=done&style=none&taskId=ucb6f62a4-c2f7-4c7b-a82b-f86c4a3593a&width=587)<br />\n\n<a name=\"rPOTa\"></a>\n### 使用录屏\n​\n\n![ezgif-6-2c40c759e0f7.gif](https://cdn.nlark.com/yuque/0/2021/gif/221736/1626265392155-bdcfac7c-afae-49b3-aac9-4d8da3f22ea8.gif#clientId=uca78bb18-1316-4&from=ui&id=u766e60c7&margin=%5Bobject%20Object%5D&name=ezgif-6-2c40c759e0f7.gif&originHeight=422&originWidth=600&originalType=binary∶=1&size=9037162&status=done&style=none&taskId=uac47f979-5597-46d5-a75a-23d7dc073f1)<br />​<br />\n<a name=\"r2x7y\"></a>\n### 文字版使用说明\n\n\n```shell\nnpm install --global tplant\ncd your-typescript-project-folder\ntplant --input src/**/*.ts --output output.svg\nopen output.svg\n```\n\n\n<a name=\"tuNI4\"></a>\n# 总结\n\n<br />尽管《[使用函数式语言建立领域模型](https://zhuanlan.zhihu.com/p/388845844)》使用了 TypeScript 将 DDD 落地，但是在和不愿意看代码的人之间仍然存在沟通鸿沟。本文厚着脸皮推荐了自己参与开发的一个开源工具 tplant，将 TypeScript 自动转成 UML，弥补了《[使用函数式语言建立领域模型](https://zhuanlan.zhihu.com/p/388845844)》唯一的缺憾。<br />​\n\n如果有人说连 UML 都不愿意看，说只想看 PPT，那么请他自行开发一个将代码转成 PPT 的工具吧。总之，不要相信 PPT，一切文档都应该基于代码生成。<br />​\n\n​<br />\n"
  },
  {
    "id": 48764018,
    "title": "基于 Java Spring Security 的关注微信公众号即登录的设计与实现",
    "description": "我的（文章）很长，你忍一下太长不看版本本文通过一个实际的具有一定商业价值的项目，展示了 API 优先的开发方法。通过薅羊毛的方式，落地了 Free Arch 架构。在线演示https://wechat-mp.herokuapp.com/login源代码https://github.com/Je...",
    "custom_description": null,
    "updated_at": "2021-07-26T11:17:25.000Z",
    "created_at": "2021-07-26T11:17:25.000Z",
    "slug": "lasdlq",
    "word_count": 7566,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1627268290142-1df9c221-0cca-4962-be6a-db6b32d3b8bb.png",
    "body": "> 我的（文章）很长，你忍一下\n\n​<br />\n<a name=\"FpUp2\"></a>\n# 太长不看版本\n​<br />\n> 本文通过一个实际的具有一定商业价值的项目，展示了 API 优先的开发方法。通过薅羊毛的方式，落地了 Free Arch 架构。\n\n​<br />\n<a name=\"eATzJ\"></a>\n# 在线演示\n[https://wechat-mp.herokuapp.com/login](https://wechat-mp.herokuapp.com/login)<br />​<br />\n<a name=\"iGEmg\"></a>\n# 源代码\n[https://github.com/Jeff-Tian/securing-web-with-wechat-mp](https://github.com/Jeff-Tian/securing-web-with-wechat-mp)<br />\n\n<a name=\"Id7z8\"></a>\n# 背景和价值\n​\n\n通过微信公众号积累粉丝并进行商业活动宣传，是新媒体运营的常见方式。而系统对接微信登录，既能给用户带来便利，同时也能够给系统引流。但是传统或者标准的 PC 网页端微信扫码登录，用户扫码只需要做 OAuth 授权，不必关注公众号。但是对于运营者来说，更希望通过微信登录的用户，自动成为微信粉丝，实现系统中微信用户和公众号粉丝的一一对应。<br />​\n\n所以，关注公众号即登录，将系统的微信用户和公众号粉丝等同起来，方便了运营同学。<br />​\n\n另外，传统的微信扫码登录，需要在公众平台之外，额外再在开发平台申请一个应用，再和公众号做绑定，多了一个账号，就多了一份维护工作，增加了管理者的心智负担，还要多花钱，毕竟两个不同的账号需要单独缴费和认证。<br />​\n\n以及，开发平台和公众平台的 openid 不一样，还需要通过 unionid 的机制做关联，增加了开发的心智负担和开发成本。<br />​\n\n以上，通过关注公众号即登录的方案，都可以避免，和微信打交道的全程只需要 openid 即可。<br />\n\n<a name=\"LDjMk\"></a>\n# Java Spring-Security\n\n<br />Spring Security 是一个专注在 Java 应用中提供认证和授权的框架。和所有 Spring 项目一样，Spring Security 的真正威力在于其极易扩展已满足定制化的需求，为认证和授权提供完整的和可扩展的支持。<br />\n\n<a name=\"colLc\"></a>\n# Open API\n\n<br />Open API 即开放 API，也成为开放平台。它是服务型网站常见的一种应用，网站的服务商将自己的网站服务封装成一系列 API 开放出去，供第三方开发者使用，这种行为就叫做开放网站的 API，所开放的 API 就被称作 Open API。<br />\n<br />Open API 规范始于 Swagger 规范，经过 Reverb Technologies 和 SmartBear 等公司多年的发展，Open API 计划拥有该规范。规范是一种与语言无关的格式，用于描述 Web 服务，应用程序可以解释生成的文件，这样才能生成代码、生成文档并根据其描述的服务创建模拟应用。<br />​\n\nSwagger 的目标是为 API 定义一个标准的，与语言无关的接口，使人和计算机在看不到源码或者看不到文档或者不能通过网络流量检测的情况下能够发现和理解各种服务的功能。当服务通过 Swagger 定义，消费者通过少量的实现逻辑就能与远程服务互动。类似于低级编程接口，Swagger 去掉了调用服务时的很多猜测。<br />​<br />\n<a name=\"hUVUY\"></a>\n# 关注公众号即登录的流程设计\n\n<br />PC 网页站点实现微信登录时，需要通过用户使用微信扫描网页上展示的二维码，然后在手机上的微信授权登录。如何实现二维码的展示，并“感知”用户扫描事件，是需要解决的关键问题。传统的 OAuth 微信扫码登录，由于本质上是打开了一个微信官方的页面，因此不需要关注这其中的细节，但是不通过打开微信官方的页面，就需要自行设计这个展示和感知的能力了。<br />​\n\n常规 PC 网页端微信扫码登录，PC 打开了微信官方的页面，由微信官方展示二维码，而手机扫描后，会在微信端跳出授权页面，用户确认后，微信官方二维码页面会重定向至开发者在开放平台设置好的回调页面，并将临时授权码作为查询字符串；而关注公众号即登录，则利用了微信的带参二维码功能，用户扫描这种二维码后，手机微信会展示开发者的微信公众号，同时将用户信息（主要是 openid）通过服务器端 API 调用，发送给开发者服务器。该过程没有二次确认，对于已关注过公众号的用户，直接发送扫描事件；对于新用户，需要新用户点击关注，才会发送该事件。这里的难点在于如何感知用户的扫描事件，以及保证服务器端 API 调用的安全（主要是确认调用者真的是来自微信而不是伪造的请求）。<br />​\n\n下面通过阐述利用微信的带参二维码，通过接收微信服务器发送的消息来“感知”用户的扫描事件。首先是带参二维码的生成，它是通过调用微信官方的接口完成的。 微信公众平台提供了两种生成带参数二维码的接口，分别是一、临时二维码，有 过期时间，数量没有明确的上限；二、永久二维码，没有过期时间，但是最多只能生成 10 万个。显然，对于登录场景，适合采用临时二维码。本文的方案里， 过期时间设置为 1 分钟。如果用户在打开登录页面的 1 分钟内，都没有扫码，或者因为网络等原因扫码失败，那么就展示二维码过期，提示用户刷新二维码，这个体验和用户登录电脑版微信相似。其中调用生成二维码接口的关键是需要传递场景值，每个场景值会和一个尝试登录的请求相关，因此必须做到唯一。本文选择使用 UUID（或者称为 GUID）。UUID 由 128 位数字组成，其生成算法保证了 其极低的重复率，具体地说，如果以一秒钟生成十亿个 UUID 的速度连续生成一年，才会有 50%的机会产生一个重复 ID。下图为未登录用户成功扫码登录系统的流程图。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1627268290142-1df9c221-0cca-4962-be6a-db6b32d3b8bb.png#clientId=u4d7351e8-4184-4&from=paste&id=u4d349a94&margin=%5Bobject%20Object%5D&name=image.png&originHeight=594&originWidth=884&originalType=binary∶=1&size=134330&status=done&style=none&taskId=u0d1f4339-f72e-4a6d-af12-bcc77db3995)<br />由上图可以看出，开发者服务为尝试登录请求生成场景值后，会同时传递给微信服务和浏览器。这个场景值还会被后续查询用户扫描状态时被使用。如果用户不扫描，致使二维码过期，那么这个场景值将会被丢弃，被认为该尝试登录失败。从上图还可以看出，当用户扫描后，微信会自动进入开发者公众号页面，这为运营提供了很大的好处，因为公众号页面会展示历史图文信息，相比传统的用 户扫码后，展示的信息要丰富得多。另外可以看到，无论用户是否关注过公众号， 扫码后，微信服务都会向开发者服务推送用户的 openid 以及场景值。而且对于没有关注过公众号的新用户，还会自动关注，成为公众号新粉丝。这样就把系统 的微信用户账号和微信公众号分析的属性关联了起来。场景值被系统用来更新扫码状态，而 openid 用来关联或者创建账号。这一系列动作完成后，系统还可以通 过微信渠道向用户发送自定义的欢迎信息，这是传统微信登录方式很难做到的 （需要实现模板消息功能，但是模板消息的使用是受到严格监控和限制的，而在扫码后的消息回复则不受此限）。<br />​\n\n其次是扫码状态的更新，当开发者服务器收到微信服务生成的二维码后，就 处于等待用户扫码的阶段，当收到微信服务通知用户扫码成功或者超时，开发者服务器应该通知用户端。因此这里需要一个即时消息服务。其状态转移如下图所示，一共有三种状态：一、扫码成功，收到微信服务通知的用户 openid，场景值；二、扫码失败，收到微信服务通知的失败原因；三、扫码超时，一段时 间没有收到微信服务的通知。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1627268383765-af56cc97-80e9-409f-9918-41a6bb622982.png#clientId=u4d7351e8-4184-4&from=paste&id=u6208b7ea&margin=%5Bobject%20Object%5D&name=image.png&originHeight=240&originWidth=392&originalType=binary∶=1&size=31941&status=done&style=none&taskId=u2a9901d0-4e45-4ddc-aac4-081685be5a1)<br />开发者服务器端接收到微信服务通知或者超时后，需要通知客户端，一般有 三种技术方案，即轮询、长连接以及 Socket IO。由于普通轮询为了保持实时性， 会在短时间内发送大量的 HTTP 请求，不可取。而 Socket IO 实现较复杂，并且对服务器资源消耗过大，因此长连接方案是最适合的。在这种方案下，客户端向服务器端发送请求询问扫码状态，服务器只在扫码成功或者超时的情况下给予回应，其他情况会挂起连接。因此在超时前，一个客户端只会向服务器端发送一个查询请求，有效地减轻了服务器端连接压力。这里开发者服务会接受到客户端查询扫码状态和微信服务通知扫码结果的 HTTP 请求，两个请求到达的次序有可能 不同，在实现时需要注意。下面给出时序图：<br />​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1627268459815-96f7da38-bb33-4c2f-9689-bec77bfd2260.png#clientId=u4d7351e8-4184-4&from=paste&id=udce966e2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=908&originWidth=914&originalType=binary∶=1&size=274297&status=done&style=none&taskId=u704369cf-8b86-4435-ad57-1edb30bd4ba)<br />从上面的时序图可以看出，只需要对情况一进行查询请求的挂起。另外，向客户端返回扫码结果后，一定要将缓存记录清除，一方面更加安全，对重放的请求，因为查询不到扫码记录会直接回复超时；另一方面，可以及时释放内存，节省不必要的资源开销。由于生产环境往往不止单个应用实例，扫码状态需要缓存在独立于应用的缓存服务中，后续查询请求即使被另外的应用实例处理，也能返回正确的状态。当开发者服务收到扫码成功的结果后，就可以将微信的 openid 作 为第三方登录的 id，与自己的用户数据库中的用户做关联了。由于采用了关注公 众号即登录的流程，不再额外需要申请和维护微信开放平台账号，也不再需要处理 unionid 的映射。<br />​\n\n本节通过仔细研究微信公众号的开放 API 能力，梳理了一套非常规的微信扫码登录方案，通过严谨分析客户端、开发者服务和微信服务三者间的 HTTP 沟通时序，实现了对用户微信扫码的感知能力，为最终实现关注公众号即登录打下了可行性基础。<br />​<br />\n<a name=\"jeHs9\"></a>\n# 应用架构设计\n\n<br />演示应用（[https://wechat-mp.herokuapp.com/login](https://wechat-mp.herokuapp.com/login)）的架构图大致如下，基本遵从 Free Arch（杜撰，免费架构），在保证工作的前提下节省成本。<br />​\n\n![Untitled.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1627285459749-91393e16-8a70-44b9-a530-df8b98957925.png#clientId=u4d7351e8-4184-4&from=ui&id=u6fb53350&margin=%5Bobject%20Object%5D&name=Untitled.png&originHeight=552&originWidth=1109&originalType=binary∶=1&size=61503&status=done&style=none&taskId=ub56c770b-a932-4ef7-8ed4-2298727983b)<br />\n<br />即通过 Cloudflare，使用免费的网络防火墙服务。对于要实现的 Java Spring-Security 应用，部署在 Heroku 这个 PaaS 平台上，也是免费的。对于微信服务，我们使用微信官方提供的测试号，也是免费的。但是对于测试公众号，有个限制是只能有 100 个关注者。但是对于演示来说足够用了，相信本文的阅读量不会超过 100，如果超过，甚至还有打赏，产生了收入，那我就去注册一个真正的公众号！<br />​\n\n在流程设计上提到对于扫码状态的查询，需要长链接以等待微信消息通知，至于微信发过来的消息存储方面，可以采用 Redis，也可以使用消息队列。对于 Redis 方案，也有对应的免费服务，但是本文采用了消息队列来实现，消息队列使用了 Pulsar，跟上时代。Pulsar 号称是下一代的消息队列方案，比 Kafka 有过之而无不及。为了节省成本，采用了免费的 Pulsar as a service：[https://kesque.com/](https://kesque.com/)<br />​\n\n关于使用 Redis 的方案，详见这篇文章：《[基于 keycloak 的关注公众号即登录功能的设计与实现](https://zhuanlan.zhihu.com/p/349504145)》。<br />​<br />\n<a name=\"mi8JK\"></a>\n# API first 开发方式\n\n<br />应用程序向云环境这一演变趋势为更好地集成服务和增加代码重用提供了机会，只要拥有一个接口，然后通过该接口，其他服务的应用程序就可以与你的应用程序进行交互，这是向其他人公开你的功能，但是，开发 API 不应该是在开发后才公开功能。<br />​\n\nAPI 文档应该是构建应用程序的基础，这个原则正式 API first 开发的全部内容。你需要设计和创建描述新服务与外部世界之间交互的文档，一旦建立了这些交互，就可以开发代码逻辑来支持这些交互。它的好处是：<br />​<br />\n\n- 团队在开发过程中更快地开始彼此交互。API 文档是应用程序与使用它的人之间的合同。\n- 内部开发可以在 API 合同背后进行，而不会干扰使用它的人的努力，计划使用你的应用程序的团队可以使用 API 规范来了解如何与你的应用程序进行交互，甚至在开发前，他们还可以使用文档创建用于测试其他应用程序的虚拟服务。\n\n​<br />\n<a name=\"HP3u0\"></a>\n# 基于 Java Spring Security 的关注公众号即登录的实现及其关键代码\n\n<br />促销服务企业基本都会通过微信公众平台与用户互动，但是微信公众平台的限制在于，公众号不能主动找到用户和向用户主动发消息的，而只有用户主动先 关注公众号成为其粉丝，才能有互动的可能。用户扫码并关注微信公众号，是在手机端完成的。如何从应用层面“感知”到用户的操作，是实现中的主要难点。 同时，开发者服务层本身是无状态的，但是扫码流程又是有状态流转的，所以需要解决状态存储的问题。另外，开发者服务层需要同时与微信服务和前端页面打交道，这个过程中会有设计用户敏感信息的发送与接收，如何保证和验证数据来源的可信性和安全性就成了必须要考虑的问题。在具体实现前，需要申请微信公众号，并配置好相关参数。由于存在开发者服务和微信服务之间的消息传送，所以还需要在公众号后台配置好开发者服务接收消息的 URL，并同时配置好密钥字符串，微信服务发送消息是会使用这个密钥字符串对消息加密，并且只发送到开发者配置的 URL，同时这个 URL 必须为 https 协议的，这样即使数据包被第 三方截获，也不能做任何改动，如果将数据包转发，则接收方可以识别出消息已被篡改拒绝接收，由于采用了开发者配置的密钥加密了消息，因此第三方基本无法破译，从而保证了消息的安全。同时，还需要将从公众号后台获取的 AppID 和 AppSecret 配置到开发者服务（即本系统）中。<br />​\n\n整体上看，要实现微信登录就需要拿到用户在微信端的唯一标志符 openid， 查找用户数据库看是否存在该用户，有的话直接登录，否则注册后登录。而要拿到用户的 openid，一般做法是通过微信网页的 OAuth 授权，但是缺点是不能给公众号引流。关注公众号即登录功能在统一移动端和桌面端的微信登录用户体验、 便利用户运营都起了非常重要的作用，可以增加微信粉丝、发送登录后消息等等。 要实现的功能目标是去除对微信开放平台的依赖，减少用户二次点击。因为已经有微信公众平台，所以系统应该尽量利用公众平台完成一切和微信相关的交互， 而用户主动扫码，已经是一个确认的行为，减少一次额外的点击，使得登录行为更加流畅。有上述功能目标分析，再结合流程设计中介绍的浏览器、开发者服务以及微信服务的交互流程可知，要拿到用户的 openid，只需用户扫码带参二维码， 用户扫码后会被导流到公众号。同时，如果用户关注公众号，或者已经关注过该 公众号，那么微信服务层会给开发这服务层发送用户的 openid 消息。所以要实现关注公众即登录，就要实现**参数场景值的生成**、**扫码状态存储**、**状态查询**、**消息收发的安全性**等这几个关键点。<br />​<br />\n<a name=\"TAnCE\"></a>\n## 定义 API\n\n<br />使用 API 优先的方式开发，那么先定义一下接口。采用 Swagger 的 Yaml 格式，去 [https://app.swaggerhub.com/](https://app.swaggerhub.com/) 使用 Github 登录，即可免费使用 Swagger Hub 的服务，既可以作为对外文档，又可以直接使用现成的模拟服务。定义好的文档见：[https://app.swaggerhub.com/apis/UniHeart/wechat-mp/0.0.1](https://app.swaggerhub.com/apis/UniHeart/wechat-mp/0.0.1) <br />​\n\n从 paths 字段可以看到一共定义了 3 个接口：\n\n- /mp-qr：用来展示二维码，并实现参数场景值的生成\n- /mp-qr-scan-status： 用来查询二维码扫码状态\n- /mp-message： 用来接收微信服务发来的消息，并将其保存至消息队列，存储扫码状态，并要保证消息的确来自微信服务\n\n​\n\n使用 Swagger 定义开放 API 的好处之一是 Schema 支持，这个定义在 components 字段的 schemas 下，完整的 Swagger 文档是：<br />​<br />\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 0.0.1\n  title: Authenticate with Wechat MP!\nservers:\n  # Added by API Auto Mocking Plugin\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/UniHeart/wechat-mp/0.0.1\n  - url: http://localhost:8080\npaths:\n  /mp-qr:\n    get:\n      summary: Gets a temporary qr code with parameter\n      operationId: mp-qr-url\n      tags:\n        - mp-qr\n      responses:\n        '200':\n          description: Got the temporary qr code image link\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MpQR'\n              example:\n                expire_seconds: 60\n                imageUrl: https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket=gQGT7zwAAAAAAAAAAS5odHRwOi8vd2VpeGluLnFxLmNvbS9xLzAycnE3QWw3b3JmazMxb2FMQnh3Y1UAAgTOrmVgAwQ8AAAA\n                sceneId: 66afab27-c8fa-417d-a28a-95d5a977e1d3\n                ticket: gQGT7zwAAAAAAAAAAS5odHRwOi8vd2VpeGluLnFxLmNvbS9xLzAycnE3QWw3b3JmazMxb2FMQnh3Y1UAAgTOrmVgAwQ8AAAA\n                url: http://weixin.qq.com/q/02rq7Al7orfk31oaLBxwc\n  /mp-qr-scan-status:\n    get:\n      summary: Get the scanning status of qr code\n      operationId: mp-qr-scan-status\n      tags:\n        - mp-qr\n      parameters:\n        - in: query\n          name: ticket\n          required: true\n          description: the ticket for the qr code to query scanning status\n          schema:\n            type: string\n            example: gQE48DwAAAAAAAAAAS5odHRwOi8vd2VpeGluLnFxLmNvbS9xLzAyb2U4U2wwb3JmazMxcS1kQ3h3YzgAAgSCjWZgAwQ8AAAA\n      responses:\n        '200':\n          description: The scanning stqtus of qr code\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MpQRScanStatus'\n              example:\n                openId: oWFvUw5ryWycy8XoDCy1pV0SiB58\n                status: SCANNED\n  /mp-message:\n    post:\n      summary: Receive xml messages sent from wechat mp server\n      operationId: mp-message\n      tags:\n        - mp-qr\n      requestBody:\n        description: wechat mp messages in xml format\n        required: true\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/xml'\n      responses:\n        '200': \n          description: the message was well received\n\n                \ncomponents:\n  schemas:\n    MpQR:\n      type: object\n      properties:\n        expire_seconds: \n          type: integer\n          format: int64\n          example: 60\n        imageUrl: \n          type: string\n          example: https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket=gQGT7zwAAAAAAAAAAS5odHRwOi8vd2VpeGluLnFxLmNvbS9xLzAycnE3QWw3b3JmazMxb2FMQnh3Y1UAAgTOrmVgAwQ8AAAA\n        sceneId: \n          type: string\n          example: 66afab27-c8fa-417d-a28a-95d5a977e1d3\n        ticket:\n          type: string\n          example: gQGT7zwAAAAAAAAAAS5odHRwOi8vd2VpeGluLnFxLmNvbS9xLzAycnE3QWw3b3JmazMxb2FMQnh3Y1UAAgTOrmVgAwQ8AAAA\n        url:\n          type: string\n          example: http://weixin.qq.com/q/02rq7Al7orfk31oaLBxwc\n    MpQRScanStatus:\n      type: object\n      properties:\n        openId: \n          type: string\n          example: oWFvUw5ryWycy8XoDCy1pV0SiB58\n        status:\n          type: string\n          example: SCANNED\n    xml:\n      type: object\n      properties:\n        ToUserName:\n          type: string\n          example: oWfv\n        FromUserName:\n          type: string\n          example: 1234\n        CreateTime:\n          type: number\n          example: 1357290913\n        MsgType:\n          type: string\n          example: Text\n        Event:\n          type: string\n          example: subscribe\n        EventKey:\n          type: string\n          example: qrscene_123123\n        Ticket:\n          type: string\n          example: TICKET\n```\n​<br />\n<a name=\"wC5cx\"></a>\n## 创建工程\n\n<br />通过官网的指引，即可创建出一个 Spring Security 模版工程，创建好后，在 `build.gradle` 文件中，增加一些依赖，主要有\n\n- implementation \"io.swagger.parser.v3:swagger-parser:2.0.20\" 和 implementation 'org.springdoc:springdoc-openapi-ui:1.5.2'<br />用来对接预先定义好的 API 文档，并自动生成相关代码\n- implementation \"org.openapitools:jackson-databind-nullable:0.2.1\"<br />用来处理 json 反/序列化时的 null 值\n- implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.0' 和 implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.10.1'<br />用来处理 xml，因为微信服务发送过来的消息是 XML 格式的，而 Spring 工程默认是不会解析 XML 的 payload 的。如果不加入这个依赖，会导致接受消息的 controller 报 415 方法不允许的错误。\n\n题外话，关于这个 415 错误，一定要往 Request Body 的解析上定位，否则你会浪费不必要的时间去找原因，比如这位同学：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1627289622006-8f3939a9-8539-4e9c-a5fc-14ef01a48037.png#clientId=u4d7351e8-4184-4&from=paste&height=495&id=u87a0b57c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=990&originWidth=1030&originalType=binary∶=1&size=259987&status=done&style=none&taskId=u98d9344a-7e1a-4dbf-ab98-655c8e2f20b&width=515)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1627289587157-636f6792-b3bf-4e21-98f4-9be749e8bac0.png#clientId=u4d7351e8-4184-4&from=paste&height=69&id=u7bc31b91&margin=%5Bobject%20Object%5D&name=image.png&originHeight=138&originWidth=1962&originalType=binary∶=1&size=153696&status=done&style=none&taskId=u9c12eb75-acdb-4824-80e7-23f82739de2&width=981)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1627289662095-2b619808-f425-4163-b227-2db2293d6bba.png#clientId=u4d7351e8-4184-4&from=paste&height=482&id=ua955379f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=964&originWidth=998&originalType=binary∶=1&size=219530&status=done&style=none&taskId=ua951d127-4a91-4009-80db-f801cc2f1cf&width=499)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1627289677743-0a23336d-1e1c-4785-8178-6214c14db69e.png#clientId=u4d7351e8-4184-4&from=paste&height=132&id=u5efeecbc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=264&originWidth=1002&originalType=binary∶=1&size=63024&status=done&style=none&taskId=uac8bcde4-c852-4ef7-ae11-ab863e3d460&width=501)\n- implementation 'org.apache.pulsar:pulsar-client:2.6.3'<br />用来和 pulsar 打交道\n\n然后再在 `build.gradle` 文件里添加一个任务，用来根据最新的 Swagger 文档生成相关的类型代码等：<br />​<br />\n```groovy\n\n// generates the spring controller interfaces from openapi spec in src/main/resources/service.yaml\nopenApiGenerate {\n    generatorName = \"spring\"\n    inputSpec = \"$projectDir/swagger-output/swagger.yaml\"\n    outputDir = \"$buildDir/generated\"\n    apiPackage = \"com.uniheart.wechatmpservice.api\"\n    invokerPackage = \"com.uniheart.wechatmpservice\"\n    modelPackage = \"com.uniheart.wechatmpservice.models\"\n    configOptions = [\n            dateLibrary: \"java8\",\n            interfaceOnly: \"true\",\n    ]\n}\n```\n这样每次文档有更新，就只需要在项目目录下跑一下命令：<br />​<br />\n```shell\n./gradlew openApiGenerate\n```\n\n<br />注意，我们采用了 Swagger Hub 来更新 API 文档，它有个 Sync 功能，可以在每次文档改动后点击一下，就会自动提交一个改动推送到你的 git 仓库。<br />​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1627290659919-718d00d8-b618-4994-a367-53623e34c6e7.png#clientId=u4d7351e8-4184-4&from=paste&height=698&id=u02a7c7a0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1396&originWidth=1902&originalType=binary∶=1&size=322364&status=done&style=none&taskId=ued12d1d2-fcbe-4161-857e-21085e07687&width=951)<br />\n<br />由于使用了 swagger 相关的依赖，它自带了 Swagger UI，所以即使在不能访问 Swagger Hub 的情况下，也可以直接访问项目本身 Host 的 Swagger UI：[https://wechat-mp.herokuapp.com/swagger-ui](https://wechat-mp.herokuapp.com/swagger-ui) 。通过 swagger.json，你还可以将你的项目文档直接同步到 YAPI 或者 Backstage 等 API 管理工具或者 dev portal 上。这个 json 可以直接从项目中实时获得：[https://wechat-mp.herokuapp.com/v3/api-docs](https://wechat-mp.herokuapp.com/v3/api-docs)。<br />​<br />\n<a name=\"vqVyX\"></a>\n## 配置路由\n​\n\nSpring-Security 项目模版默认做了一些配置，我们需要额外添加几个，主要是放通我们的 API，以及 swagger 相关的路由，这在 `WebSecurityConfig` 里完成，主要代码如下： <br />​<br />\n```java\npackage com.uniheart.securing.web.wechat.mp;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\n\n@Configuration\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                .authorizeRequests()\n                .antMatchers(\"/\", \"/home\").permitAll()\n                .antMatchers(\"/mp-qr\", \"/mp-qr\").permitAll()\n                .antMatchers(\"/mp-qr-scan-status\", \"/mp-qr-scan-status\").permitAll()\n                .antMatchers(HttpMethod.POST, \"/mp-message\").permitAll()\n                .antMatchers(\"/v3/api-docs\", \"/v3/api-docs\").permitAll()\n                .antMatchers(\"/swagger-ui\", \"/swagger-ui\").permitAll()\n                .anyRequest().authenticated()\n                .and()\n                .formLogin()\n                .loginPage(\"/login\")\n                .permitAll()\n                .and()\n                .logout()\n                .permitAll();\n\n        http.csrf().disable();\n    }\n}\n```\n<a name=\"xG7KG\"></a>\n## \n<a name=\"sQPX7\"></a>\n## 实现二维码的展示\n\n<br />本示例应用效果是登录页面除了可以输入用户名和密码登录外，还会显示一个二维码，扫码后即登录成功，并且在页面上显示一个欢迎信息：<br />​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1627291505855-708ca7fe-5ca7-4f4e-8497-d078bf139344.png#clientId=u4d7351e8-4184-4&from=paste&height=641&id=ua46df7dd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1282&originWidth=2082&originalType=binary∶=1&size=355106&status=done&style=none&taskId=ucfd631c6-0725-45b3-b581-6877ccfcf3c&width=1041)<br />扫码登录成功后，可以看到 Cookie 多了一个 JSESSIONID 项：<br />​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1627291663613-edc40dfb-97fb-439b-909a-710dc69e8d36.png#clientId=u4d7351e8-4184-4&from=paste&height=467&id=ufb41f929&margin=%5Bobject%20Object%5D&name=image.png&originHeight=934&originWidth=2212&originalType=binary∶=1&size=233680&status=done&style=none&taskId=uf4b8c76c-4408-4570-a58f-64977bf499b&width=1106)<br />要实现二维码的展示，由于采用了 Swagger 生成轮廓代码，这里只需要添加一个新的 `Controller` 去实现预先定义好的 `MpQrApi` 即可：<br />​<br />\n```java\npackage com.uniheart.securing.web.wechat.mp;\n\nimport com.uniheart.securing.web.wechat.mp.services.MpServiceBean;\nimport com.uniheart.wechatmpservice.api.MpQrApi;\nimport com.uniheart.wechatmpservice.models.MpQR;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic final class WechatMpApiController implements MpQrApi {\n    @Autowired\n    private MpServiceBean mpServiceBean;\n\n    @Override\n    public ResponseEntity<MpQR> mpQrUrl() {\n        return new ResponseEntity<>(this.mpServiceBean.getMpQrCode(), HttpStatus.OK);\n    }\n}\n```\n\n<br />可见核心业务逻辑在 `MpServiceBean` 中，代码如下：<br />​<br />\n```java\npackage com.uniheart.securing.web.wechat.mp.services;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonObject;\nimport com.uniheart.securing.web.wechat.mp.Constants;\nimport com.uniheart.wechatmpservice.models.MpQR;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.util.UnknownFormatConversionException;\n\n@Component\npublic class MpServiceBean {\n    private final HttpClient httpClient;\n\n    @Value(\"${weixin-qr-code-creation-endpoint:default-test-value}\")\n    private String qrCodeCreateUrl;\n\n    @Value(\"${weixin-token-endpoint:default-test-value}\")\n    private String weixinAccessTokenEndpoint;\n\n    public String getQrCodeCreateUrl() {\n        return this.qrCodeCreateUrl;\n    }\n\n    public MpServiceBean() {\n        this.httpClient = HttpClient.newHttpClient();\n    }\n\n    public MpServiceBean(HttpClient client, String qrCodeCreateUrl, String tokenEndpoint) {\n        this.httpClient = client;\n        this.qrCodeCreateUrl = qrCodeCreateUrl;\n        this.weixinAccessTokenEndpoint = tokenEndpoint;\n    }\n\n    public void setQrCodeCreateUrl(String url) {\n        this.qrCodeCreateUrl = url;\n    }\n\n    public void setWeixinAccessTokenEndpoint(String url) {\n        this.weixinAccessTokenEndpoint = url;\n    }\n\n    Logger logger = LoggerFactory.getLogger(MpServiceBean.class);\n\n    public MpQR getMpQrCode() {\n        var mpTokenManager = new MpTokenManager(this.weixinAccessTokenEndpoint);\n\n        URI uri = URI.create(this.qrCodeCreateUrl + mpTokenManager.getAccessToken().accessToken);\n\n        logger.info(\"Getting qr code with \" + uri);\n\n        var payload = WeixinQrCodeRequestPayload.getRandomInstance();\n\n        HttpRequest request =\n                HttpRequest.newBuilder().POST(HttpRequest.BodyPublishers.ofString(payload.toJson())).uri(uri).build();\n\n        try {\n            HttpResponse<String> response = this.httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n            WeixinErrorResponse errorResponse = new Gson().fromJson(response.body(), WeixinErrorResponse.class);\n            WeixinTicketResponse ticketResponse = new Gson().fromJson(response.body(), WeixinTicketResponse.class);\n\n            if (ticketResponse.ticket != null) {\n                return new MpQR().ticket(ticketResponse.ticket).imageUrl(ticketResponse.url).expireSeconds(ticketResponse.expiresInSeconds).url(ticketResponse.url).sceneId(String.valueOf(payload.action_info.scene.scene_id));\n            }\n\n            if (errorResponse.errcode == (40001)) {\n                return new MpQR().ticket(\"test\").imageUrl(Constants.FALLBACK_QR_URL);\n            }\n\n            throw new UnknownFormatConversionException(response.body());\n        } catch (InterruptedException ie) {\n            System.err.println(\"Exception = \" + ie);\n            ie.printStackTrace();\n\n            return new MpQR().ticket(\"interrupted\").imageUrl(Constants.FALLBACK_QR_URL);\n        } catch (Exception ex) {\n            System.err.println(\"Exception = \" + ex);\n            ex.printStackTrace();\n            return new MpQR().ticket(\"error\").imageUrl(Constants.FALLBACK_QR_URL);\n        }\n    }\n}\n```\n​\n\n代码比较长，不逐行解释了，建议对照项目中的测试代码一起看，主要是调用微信的 API，并根据响应走到不同的逻辑分支。以上的关键在于 `WeixinQrCodeRequestPayload.getRandomInstance()`，会生成场景值。场景值以及带参二维码，因为每个登录请求尝试都是独立发生的， 所以应该是全局唯一；为了防止恶意者攻击，这个场景值应该具有不可猜性。前面介绍其可以使用 UUID 来满足这两点，参见《[基于 keycloak 的关注公众号即登录功能的设计与实现](https://zhuanlan.zhihu.com/p/349504145)》的具体实现，这里给出一种简便的实现，即根据当前时间来计算出一个场景值，由于精确到纳秒，所以很难重复。<br />​<br />\n```java\npackage com.uniheart.securing.web.wechat.mp.services;\n\nimport com.google.gson.Gson;\nimport com.uniheart.securing.web.wechat.mp.Now;\nimport org.joda.time.Instant;\n\npublic class WeixinQrCodeRequestPayload {\n    public String action_name;\n    public ActionInfo action_info;\n    public int expire_seconds;\n\n    public String toJson() {\n        return new Gson().toJson(this);\n    }\n\n    public static WeixinQrCodeRequestPayload getRandomInstance() {\n        var timestamp = Now.instant();\n\n        var ret = new WeixinQrCodeRequestPayload();\n        ret.action_name = \"QR_SCENE\";\n        ret.expire_seconds = 604800;\n        ret.action_info = new ActionInfo();\n        ret.action_info.scene = new Scene();\n        ret.action_info.scene.scene_id = timestamp.getEpochSecond() + timestamp.getNano();\n\n        return ret;\n    }\n}\n\nclass ActionInfo{\n    public Scene scene;\n}\n\nclass Scene {\n    public long scene_id;\n}\n```\n​<br />\n<a name=\"FIUAX\"></a>\n## 实现微信消息的接收\n​\n\n消息接收后还需要存储起来，Redis 方案的实现详见《[基于 keycloak 的关注公众号即登录功能的设计与实现](https://zhuanlan.zhihu.com/p/349504145)》，这里给出利用 pulsar 的具体实现。<br />​<br />\n```java\npackage com.uniheart.securing.web.wechat.mp.services;\n\nimport com.google.gson.Gson;\nimport com.uniheart.wechatmpservice.models.Xml;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.apache.pulsar.client.api.*;\nimport org.springframework.stereotype.Component;\n\nimport java.util.concurrent.TimeUnit;\n\n@Component\npublic class MpMessageService {\n    Logger logger = LoggerFactory.getLogger(MpMessageService.class);\n\n    private final String pulsarUrl;\n    private final String pulsarToken;\n    private final String pulsarTopic;\n\n    public MpMessageService(@Value(\"${pulsar-service-url}\") String pulsarUrl, @Value(\"${pulsar-auth-token}\") String pulsarToken, @Value(\"${pulsar-producer-topic}\") String pulsarTopic) {\n        this.pulsarUrl = pulsarUrl;\n        this.pulsarToken = pulsarToken;\n        this.pulsarTopic = pulsarTopic;\n    }\n\n    public void saveMessageTo(Xml message) throws PulsarClientException {\n        var client = PulsarClient.builder().serviceUrl(pulsarUrl).authentication(AuthenticationFactory.token(pulsarToken)).build();\n        var producer = client.newProducer().topic(pulsarTopic).create();\n        producer.send(new Gson().toJson(message).getBytes());\n        producer.close();\n        client.close();\n    }\n\n    public synchronized Xml getMessageFor(String ticket) throws PulsarClientException {\n        var client = PulsarClient.builder().serviceUrl(pulsarUrl).authentication(AuthenticationFactory.token(pulsarToken)).build();\n        var consumer = client.newConsumer().topic(pulsarTopic).subscriptionName(\"my-subscription\").subscribe();\n        var xml = new Xml().fromUserName(\"empty\");\n\n        var received = false;\n\n        var count = 0;\n\n        do {\n            var msg = consumer.receive(1, TimeUnit.SECONDS);\n            count++;\n            if (msg != null) {\n                var json = new String(msg.getData());\n\n                try {\n                    xml = new Gson().fromJson(json, Xml.class);\n\n                    received = xml.getTicket().equals(ticket);\n\n                    if(received){\n                        consumer.acknowledge(msg);\n                    }\n                } catch (Exception ex) {\n                    logger.error(\"Failed to parse json: \" + json);\n                    xml.fromUserName(json);\n\n                    consumer.acknowledge(msg);\n                }\n            }\n        } while (!received && count < 30);\n\n        consumer.close();\n        client.close();\n\n        return xml;\n    }\n}\n\n```\n以上服务封装了保存和获取方法，消息接收的 `Controller` 调用起保存消息的方法：<br />​<br />\n```java\npackage com.uniheart.securing.web.wechat.mp;\n\nimport com.uniheart.securing.web.wechat.mp.services.MpMessageService;\nimport com.uniheart.wechatmpservice.api.MpMessageApi;\nimport com.uniheart.wechatmpservice.models.Xml;\nimport io.swagger.annotations.ApiParam;\nimport org.apache.pulsar.client.api.PulsarClientException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.validation.Valid;\n\n@RestController\npublic class WechatMessageController implements MpMessageApi {\n    Logger logger = LoggerFactory.getLogger(WechatMessageController.class);\n\n    private final MpMessageService mpMessageService;\n\n    public WechatMessageController(MpMessageService mpMessageService) {\n        this.mpMessageService = mpMessageService;\n    }\n\n    @Override\n    public ResponseEntity<Void> mpMessage(@ApiParam(value = \"wechat mp messages in xml format\", required = true) @Valid @RequestBody Xml xml) {\n        try {\n            this.mpMessageService.saveMessageTo(xml);\n            logger.info(\"saved info: \" + xml);\n            return new ResponseEntity<>(HttpStatus.OK);\n        } catch (PulsarClientException e) {\n            e.printStackTrace();\n            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);\n        }\n    }\n}\n```\n​<br />\n<a name=\"mEiky\"></a>\n## 实现扫码状态查询\n\n<br />从以上实现可以看出，接收到微信服务的消息通知后，会同时保存两个信息，即保存被扫描的二维码对应的用户标识 openid，以及更新该二维码的扫码状态为已扫描。这个消息很重要，如前所述， 我们对客户端的扫码状态查询请求使用了长连接方案。查询扫码状态的部分比较复杂，因为这里把将用户登录的逻辑也放在这里了。即查询到对应的二维码被扫描后，在返回扫码成功前，新建一个 HTTP 上下文，将登录的用户实例化出来：<br />​<br />\n```java\npackage com.uniheart.securing.web.wechat.mp;\n\nimport com.uniheart.securing.web.wechat.mp.services.MpMessageService;\nimport com.uniheart.wechatmpservice.api.MpQrScanStatusApi;\nimport com.uniheart.wechatmpservice.models.MpQRScanStatus;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.security.Principal;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@RestController\npublic final class WechatMpQRScanStatusApiController implements MpQrScanStatusApi {\n    private final MpMessageService mpMessageService;\n\n    public WechatMpQRScanStatusApiController(MpMessageService mpMessageService) {\n        this.mpMessageService = mpMessageService;\n    }\n\n    @Override\n    public ResponseEntity<MpQRScanStatus> mpQrScanStatus(String ticket) {\n        try {\n            var xml = this.mpMessageService.getMessageFor(ticket);\n\n            if(xml.getFromUserName().equals(\"empty\")){\n                return new ResponseEntity<>(new MpQRScanStatus().openId(\"\"), HttpStatus.REQUEST_TIMEOUT);\n            }\n\n            var user = new Object() {};\n\n            List<GrantedAuthority> authorities = new ArrayList<>();\n            authorities.add(new SimpleGrantedAuthority(\"WechatMP\"));\n\n\n            Authentication authentication = new UsernamePasswordAuthenticationToken(user, null, authorities);\n            SecurityContextHolder.getContext().setAuthentication(authentication);\n\n            return new ResponseEntity<>(new MpQRScanStatus().openId(xml.getFromUserName()).status(\"SCANNED\"), HttpStatus.OK);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            return new ResponseEntity<>(new MpQRScanStatus().openId(ex.getMessage()), HttpStatus.INTERNAL_SERVER_ERROR);\n        }\n    }\n}\n\n```\n​\n\n这样就实现了服务器端的三个开放 API。服务器端还有些逻辑，比如对微信的 Access Token 的管理等等，再次略过，详见 Github 仓库：[https://github.com/Jeff-Tian/securing-web-with-wechat-mp/tree/master/src/main/java/com/uniheart/securing/web/wechat/mp/services](https://github.com/Jeff-Tian/securing-web-with-wechat-mp/tree/master/src/main/java/com/uniheart/securing/web/wechat/mp/services) 。<br />​<br />\n<a name=\"sHumr\"></a>\n## 实现客户端逻辑\n\n<br />服务器端的 API，最终要由客户端来调用，这里的客户端逻辑，为了实现最小代码改动，直接写了原生 JavaScript 添加在了模版项目的 html 文件里（login.html），没有使用任何前端工程框架，直接手写了两个 ajax，完成：<br />​<br />\n```javascript\n        function queryScanStatus(ticket) {\n            var req = new XMLHttpRequest();\n\n            req.onreadystatechange = function () {\n                if(req.readyState === 4 && req.status === 200) {\n                    const json = JSON.parse(req.responseText);\n\n                    if (json.status === 'SCANNED') {\n                        location.href = '/hello';\n                    }else{\n                        alert('发生错误（也许是超时了）！')\n                    }\n                }\n            };\n\n            req.open(\"GET\", \"/mp-qr-scan-status?ticket=\" + ticket);\n            req.send();\n        }\n\n        function showQRCodeImage() {\n            var req = new XMLHttpRequest();\n            req.onreadystatechange = function () {\n                if (req.readyState === 4 && req.status === 200) {\n                    const json = JSON.parse(req.responseText);\n\n                    document.getElementById('wechat-mp-qr').setAttribute('src', 'https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket=' + encodeURIComponent(json.ticket));\n\n                    queryScanStatus(json.ticket);\n                }\n            };\n\n            req.open(\"GET\", \"/mp-qr\", true);\n            req.send();\n        }\n\n        showQRCodeImage();\n```\n\n\n<a name=\"Nkvwk\"></a>\n# 总结\n\n<br />本文通过一个实际的具有商业价值的项目，展示了 API 优先的开发方法。通过薅羊毛的方式，落地了 Free Arch 架构。\n"
  },
  {
    "id": 47969967,
    "title": "同步用户微信头像的 NodeJs 实现",
    "description": "对于使用微信登录的系统，在用户授权后，将其微信头像直接同步到服务器，可以省去用户上传的操作。本文最终给出一个 NodeJs 中间层的实现，并展示实现的过程和在实施过程中几个需要注意的地方。BFF 架构微服务架构已然成为了企业信息化架构中的主流，这种架构风格给前端带来了挑战。为了灵活应对业务需求...",
    "custom_description": null,
    "updated_at": "2021-06-29T09:53:58.000Z",
    "created_at": "2021-06-29T09:53:58.000Z",
    "slug": "ie87li",
    "word_count": 2321,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1624879466049-62e9674d-08aa-41cb-b6a5-000e913020b1.png",
    "body": "对于使用微信登录的系统，在用户授权后，将其微信头像直接同步到服务器，可以省去用户上传的操作。本文最终给出一个 NodeJs 中间层的实现，并展示实现的过程和在实施过程中几个需要注意的地方。<br />​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1624879466049-62e9674d-08aa-41cb-b6a5-000e913020b1.png#clientId=u3d73ec44-36c4-4&from=paste&id=u891c0c81&margin=%5Bobject%20Object%5D&name=image.png&originHeight=638&originWidth=413&originalType=binary∶=1&size=44464&status=done&style=none&taskId=u5913daf1-bb2b-4805-a07a-d0e2db8e928)<br />\n\n<a name=\"V5Kpa\"></a>\n# BFF 架构\n\n<br />微服务架构已然成为了企业信息化架构中的主流，这种架构风格给前端带来了挑战。为了灵活应对业务需求的变化和适配不同的前端用户体验，BFF 层应运而生。<br />​\n\n由于天然的限制或者使用场景的区别，不同的前端用户体验并不一致。拿阿迪达斯的微信小程序和其原生 APP 举例，你会看到用户体验完全不同，有些是因为微信小程序的限制（比如分享体验），有些是不同的产品运营需要。<br />​<br />\n\n| **小程序** | **APP** |\n| --- | --- |\n| ![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1624880156326-3cf94d3b-3b20-46ec-963e-68ccdc664158.png#clientId=u3d73ec44-36c4-4&from=paste&height=520&id=ucfdb05b7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2079&originWidth=960&originalType=binary∶=1&size=1232512&status=done&style=none&taskId=u06c1f753-c68e-4f52-972c-51e2bd418c6&width=240) | ![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1624880164682-0aea42b9-79a7-4542-bb07-9f12c31dedcc.png#clientId=u3d73ec44-36c4-4&from=paste&height=520&id=u30ccd415&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2079&originWidth=960&originalType=binary∶=1&size=2405575&status=done&style=none&taskId=u61930d82-38b2-402b-8149-15ab508e4a3&width=240) |\n\n\n<br />BFF 是 Backend for Frontend 的简称，它用来对众多后端微服务进行聚合和裁剪，以适配前端。如今，**端用户体验层 -> 网关层 -> BFF 层 -> 微服务层**这种分层模式已经成为了典型的现代微服务架构分层方式。<br />​<br />\n<a name=\"L4Pkg\"></a>\n# NodeJs\n\n<br />NodeJs 的出现使得 JavaScript 可以运行在服务器上，并且天然适合网络 IO 密集型的场景，以及不适合计算密集型场景。这使得它作为 BFF 层非常适合，因为 BFF 层通常只是联结前端与后端，做一些透传，没有密集的计算，但是重网络传输。<br />​<br />\n<a name=\"pXaj6\"></a>\n# 分析微信头像的存储方案\n​<br />\n<a name=\"h7ysH\"></a>\n## 直接存储微信头像的 url\n​\n\n比如，我目前的微信头像 url 是 [https://thirdwx.qlogo.cn/mmopen/vi_32/rgPgbf5XE2ancz9ibobSibZEMPOibp4LdsQEXiaQeRZ78WJgVe7xgMamYXd6eibo9rg0Wje1rnh9aLMc87DVS4vrItA/132](https://thirdwx.qlogo.cn/mmopen/vi_32/rgPgbf5XE2ancz9ibobSibZEMPOibp4LdsQEXiaQeRZ78WJgVe7xgMamYXd6eibo9rg0Wje1rnh9aLMc87DVS4vrItA/132)。显然后端可以很简单的接收一个字符串，将其存储起来，这样前端下次拿到这个 url，就可以展示出来。<br />​\n\n但是这样做有个问题，以上链接是微信的 CDN 地址。一旦用户在微信端更新了头像，那么上面的地址将不再被使用。如果某一天它被清除了，那么系统的前端展示用户头像时将是一个死链接的图片。所以方案得改成：<br />​<br />\n<a name=\"b1BEz\"></a>\n## 将微信头像 url 下载下来以图片文件格式存储\n\n<br />这样就需要后端实现一个文件上传的接口，然后由 BFF 层把前端传过来的 url 转成表单数据传输给后端。所以最终后端不是存储一个字符串，而是存储图片文件。<br />​\n\n这样就没有用户更改微信头像后，系统中的头像失效的问题。至于微信头像更新后，系统中还是老的图片的不同步问题，第一种方案也不能解决。实际上这种情况下只需要再次同步即可，至于如何自动同步，不在本文讨论范围内。<br />​<br />\n<a name=\"kvpFi\"></a>\n## 结论\n​\n\n只需要在 BFF 层使用 NodeJs 将微信头像的 url 下载下来，再调用后端的文件上传接口即可。<br />​<br />\n<a name=\"vHkrS\"></a>\n# 代码实现\n​\n\n需求分析明确后，只差写代码了。经常有人问，高手写代码是不是不用百度，直接啪啪啪就能写出来？实际上，不需要搜索就能写代码的，那说明是熟练工，同样的事情干过很多回了。对于高手，也可能接到不熟悉的任务，这时他可能不用百度，而是用 Google 和 StackOverflow。<br />​<br />\n<a name=\"n0Qn6\"></a>\n## Axios\n​\n\n既然要使用 NodeJs 上传文件到后端，那么就需要给后端发起一个 Http 请求。通过简单搜索就能知道在 NodeJs 的世界里，Axios 是一个不错的 Http 客户端，因此再进一步搜索如何使用 Axios 发起一个文件上传的 Http 请求。<br />​<br />\n<a name=\"wLNiD\"></a>\n## 坑\n\n<br />搜索工具是程序员经常要使用的，虽然说如今搜索方便，但是要甄别结果的可靠性并没那么容易。被一些答案带到坑里是常有的事情。比如搜索使用 NodeJs 上传文件，多数答案如下：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1624955881002-971a3f3f-34c6-4971-9d1b-5ed3df6958b6.png#clientId=u9f3665ae-ccbd-4&from=paste&id=ua5ed6dc9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=446&originWidth=780&originalType=binary∶=2&size=74846&status=done&style=none&taskId=ue8edcc3c-9d02-4b0c-b5d5-53271e3a1d1)​\n```javascript\nvar formData = new FormData();\nformData.append(\"image\", yourFile);\naxios.post('upload_file', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n})\n```\n注意上面的代码显式指定了 Content-Type 这个请求头，然后实际试过后你就知道这并不工作！<br />​<br />\n<a name=\"Uy8z7\"></a>\n## Postman\n​\n\nPostman 是一个强大的 Http 请求监控工具，可以按需定制请求体。BFF 层要同步微信头像，无非就是要调用后端接口，发送一个 Http 请求，将用户头像存储起来。因此真正的高手对这个需求是真的不会去搜索的，而是直接使用 Postman 构造一个 Http 请求，手动上传文件，拿到后端的响应结果。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1624956609988-7e3879c5-0f50-43a7-b370-b389ee53428d.png#clientId=u9f3665ae-ccbd-4&from=paste&id=u9b3dddb7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=553&originWidth=956&originalType=binary∶=2&size=76745&status=done&style=none&taskId=u7ac30b6f-11f9-4475-9516-ecb9c066d6d)<br />然后，点击代码，就能选择将刚才手动构造的 Http 请求，转换成可以构造同样请求的代码。我们选择 NodeJs Axios：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1624956825959-645ef07f-d26e-488d-8ad1-46add66bcf21.png#clientId=u9f3665ae-ccbd-4&from=paste&id=u8a4495cf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=701&originWidth=1419&originalType=binary∶=2&size=166239&status=done&style=none&taskId=u48a926ef-548f-4d1a-a68d-ef483bd4027)\n<a name=\"GemWL\"></a>\n## 抄作业\n\n<br />从 Postman 生成的代码可以看出，第一 NodeJs 的世界里，没有原生的表单数据结构，需要引入 form-data 包；第二在请求头里不能直接写死 Content-Type = 'multipart/form-data'，而是要用 form-data 生成的请求头。<br />​<br />\n<a name=\"VEf3d\"></a>\n## 题外话\n\n<br />如果是前端直接文件上传，那么在 Browser 的 JavaScript 世界里，是自带 FormData 数据结构的，这时候要显式**不指定**  Content-Type，以实现自动生成 Content-Type 请求头。对于文件上传不能显示指定 Content-Type 的原因是，构造 Http 请求时，payload 中要使用 Content-Type 请求头中的 boundary 来分割文件和其他非文件字段，而这个 boundary 需要动态生成。如果不显示指定 Content-Type，就能享受浏览器端 FormData 或者 NodeJs 端的 form-data 自动生成的 Content-Type 以及 boundary。<br />​<br />\n<a name=\"bEXn1\"></a>\n## TDD\n​\n\n在写实现代码前，建议先将自动化测试代码写上，以便构建重构屏障。详细步骤参考 TDD 相关的文章。<br />\n\n<a name=\"WJ8V2\"></a>\n## jest/nock/TypeScript\n\n<br />在实际的 NodeJs 工程项目中，还是建议引入 TypeScript，以享受类型系统带来的好处。这里使用 jest 测试框架。为了控制后端的 Http 响应，可以使用 nock 将之前的 Postman 抓到的后端服务器响应作为 mock。<br />​\n\n后端服务器的 API 可能做了 token 验证，只信任指定的客户端（BFF 层）发来的请求，因此还需要做好相关 Token 端点的 nock，最终测试代码如下（假定要将实现写在一个叫 MemberService 的类中）：<br />​<br />\n```typescript\nimport { MemberService } from './member.service'\nimport * as nock from 'nock'\n\ndescribe('MemberService', () => {\n  beforeEach(async () => {\n    const mockConfig = {\n      backend: {\n        url: 'https://your.back.end',\n        auth: {\n          url: 'https://your.back.end/auth/token',\n          clientId: 'fakeId',\n          clientSecret: 'fakeSecret',\n          clientKey: 'fakeKey'\n        }\n      }\n    }\n    \n    describe('update user\\'s head image', () => {\n      it('pipe weixin head img to back end', async () => {\n        const mockRes = {\n          code: 200,\n          message: '操作成功',\n          success: true,\n          data: 'https://upload.image.url',\n          time: '2021-06-29 11:20:30'\n        }\n        \n        nock(mockConfig.backend.url).post('/auth/token').reply(200, {status: 'SUCCESS', data: {access_token: 'xxx', expires_in: 3600, refresh_token: 'yyy'}})\n        nock(mockConfig.backend.url).put('/upload/image/head/abcdefg').reply(200, mockRes)\n        \n        const sut = new MemberService(nockConfig)\n        \n        const res = await sut.updateAvatar('abcdefg', 'https://thirdwx.qlogo.cn/mmopen/vi_32/rgPgbf5XE2ancz9ibobSibZEMPOibp4LdsQEXiaQeRZ78WJgVe7xgMamYXd6eibo9rg0Wje1rnh9aLMc87DVS4vrItA/132')\n        expect(res).toStrictEqual(mockRes)\n      })\n    })\n  })\n})\n```\n​<br />\n<a name=\"MuB0l\"></a>\n## 流到流\n\n<br />前面分析了，实现代码只需要将微信的 url 对应的图片下载下来，再上传到后端服务器即可，但是为了提高效率，可以不用等待先全部下载完毕再进行上传，而是将下载流直接对接到上传流上。这只需要对 Postman 生成的代码稍加改造。仔细观察 Postman 生成的代码，由于我们是从本地文件系统选择的文件构造出的请求，因此生成的代码创建了一个本地文件读取流，我们需要把这个本地文件读取流改造成远程文件下载流。<br />​\n\n下载文件其实也就是想微信服务器（CDN）端构造一个 Http GET 请求，仍然采用 Axios，那么只需要设置 responseType 为 stream，就能得到文件下载流：<br />​<br />\n```typescript\nimport axios from 'axios'\nimport * as FormData from 'form-data'\n\nexport class MemberService {\n  constructor(private readonly config: Config) {}\n  \n  async updateAvatar(userId: string, avatar: string | undefined) {\n    if (!avatar) {\n      return undefined\n    }\n    \n    // 大致逻辑，实际上从统一的令牌管理类中拿可用的 token\n    \n    const {data: {access_token}} = await axios.post(this.config.backend.auth.url, {clientId, clientSecret, ...})\n    \n    const formData = new FormData()\n    formData.append('headImg', (await axios.get(avatar, { responseType: 'stream' })).data, 'headImage.jpg')\n    \n    return axios.put(`${this.config.backend.url}/upload/image/head/${userId}`, {\n      data: formData,\n      headers: {\n        'Authorization': `Bearer ${access_token}`,\n        ...formData.getHeaders(),\n      }\n    })\n  }\n}\n```\n\n\n<a name=\"cRIOS\"></a>\n# 总结\n\n<br />在实际的 BFF 开发中，可以使用 Postman 手动调用后端服务，然后生成实际的代码，这节省了搜索的工作，而且保证代码可靠。<br />​\n\n对于微信头像的同步，一定不能只保存微信的 CDN url，而要下载后保存图片。通过使用 NodeJs Axios，下载到上传是可以很方便地流到流接上的。\n"
  },
  {
    "id": 47263990,
    "title": "构造器注入与循环依赖",
    "description": "接上一篇《邪恶的字段注入》，再谈谈构造器注入。上一篇《邪恶的字段注入》主要是针对随处可见的字段注入现状提出了批评，并强烈推荐使用构造器注入。在历数各种字段注入的缺点，也就是相对来说使用构造器注入的优点后，只发现了 java 世界里构造器注入的一个缺点，那就是得多写点代码（当然也以 js 工程师...",
    "custom_description": null,
    "updated_at": "2021-06-18T02:19:02.000Z",
    "created_at": "2021-06-18T02:19:02.000Z",
    "slug": "duvwb2",
    "word_count": 2601,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1623893319725-0a7bf8d6-a494-4ae7-89ee-87cdd47921c0.png",
    "body": "> 接上一篇《[邪恶的字段注入](https://zhuanlan.zhihu.com/p/381290161)》，再谈谈构造器注入。\n\n​\n\n上一篇《[邪恶的字段注入](https://zhuanlan.zhihu.com/p/381290161)》主要是针对随处可见的字段注入现状提出了批评，并强烈推荐使用构造器注入。在历数各种字段注入的缺点，也就是相对来说使用构造器注入的优点后，只发现了 java 世界里构造器注入的一个缺点，那就是得多写点代码（当然也以 js 工程师的角度，对 java 工程师进行了劝退，因为 js 的构造器注入连这个仅有的缺点都没有）。<br />​\n\n但是实际上，即便在 java 的世界里需要多写点代码，也根本不是问题，因为有 IDE 来帮忙。那还等什么，快来改造吧！<br />​<br />\n<a name=\"yqmHE\"></a>\n# 怎么做\n​\n\n将光标定位到字段注入代码处，按下 Alt + Enter：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1623893319725-0a7bf8d6-a494-4ae7-89ee-87cdd47921c0.png#clientId=u82b44fa6-3947-4&from=paste&height=183&id=u2f3512a4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=183&originWidth=885&originalType=binary∶=1&size=34052&status=done&style=none&taskId=u126860b3-23da-4db5-b361-dfeccf5375a&width=885)<br />\n<br />在弹出的 popup 里选择第一个，回车，就自动完成了字段注入到构造器注入的改造：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1623893334812-f47a5f42-0406-495f-b5cf-574c8c5a15ba.png#clientId=u82b44fa6-3947-4&from=paste&height=140&id=uae3d2fac&margin=%5Bobject%20Object%5D&name=image.png&originHeight=140&originWidth=672&originalType=binary∶=1&size=19499&status=done&style=none&taskId=ua0cf8f7b-3e9b-4395-aabb-efc3a3a8093&width=672)<br />可以看到，使用构造器注入，连 @Autowired 关键字都可以省略。<br />​<br />\n<a name=\"vGyi9\"></a>\n# 构造器注入还有什么缺点？\n​\n\n上面用 IDE 的强大功能抵消了《[邪恶的字段注入](https://zhuanlan.zhihu.com/p/381290161)》中提到的构造器注入的唯一缺点，不过仍然有人不喜欢构造器注入，说原因是构造器注入在**极端情况**下有循环依赖异常问题。但是对于循环依赖，就可以使用字段注入，并且是 Spring 官方文档推荐的方式。似乎 ——<br />​<br />\n<a name=\"v6z2k\"></a>\n## 构造器注入不如字段注入强大。\n​\n\n**这其实也是误解了**。首先，对于循环依赖，这是明显的代码坏味道，应该首先反思设计，是不是有明显的 BUG？这里涉及到一个价值观问题，对于缺陷或者异常，是尽早暴露出来 fail fast，还是尽量把问题隐藏得越久越好？我站在 fail fast 这一边，所以我认为，构造器注入即使不如字段注入强大也不要紧，因为这个时候首先应该反思代码设计。<br />​\n\n但是，构造器注入并非不如字段注入强大，通过在构造器注入里使用 @Lazy 注解，也可以解决循环依赖异常问题。<br />​<br />\n<a name=\"nz3GP\"></a>\n## 总结：无论什么场景，构造器注入都优于字段注入。\n\n<br />以下详细说说循环依赖的异常问题：<br />​<br />\n<a name=\"Zr5DP\"></a>\n# 什么是循环依赖？\n​\n\n当 bean A 依赖 bean B，并且 bean B 也依赖 bean A 时，就产生了循环依赖：<br />​\n\nBean A -> Bean B -> Bean A<br />​\n\n当然，有时候这种循环依赖比较含蓄（隐藏得比较深）：<br />​\n\nBean A -> Bean B -> Bean C -> Bean D -> Bean E -> Bean A<br />​<br />\n<a name=\"iK3NT\"></a>\n# Spring 中发生了什么？\n​\n\n当 Spring 上下文加载所有 bean 时，会依照一定的顺序创建 bean 从而使得他们可以完全工作。对于没有循环依赖的情况，比如这样的依赖关系：<br />​\n\nBean A -> Bean B -> Bean C<br />​\n\nSpring 会先创建 bean C，然后是 bean B（同时将 bean C 注入 B），最后创建 bean A（同时把 bean B 注入 A）。<br />​\n\n但是当有循环依赖时，Spring 无法决定那个 bean 应该最先被创建出来，因为它们相互依赖。在这样的情况下，Spring 只好在加载上下文时抛出 _BeanCurrentlyInCreationException _异常。<br />​\n\n当然，这种异常只会在你使用构造器注入时抛出；如果使用别的注入方式的话，由于依赖只会在它们实际被使用时而非在上下文加载时被注入，所以不会有异常抛出。<br />​<br />\n<a name=\"XJzdI\"></a>\n# 举个例子\n​\n\n定义两个互相依赖的 bean，并且使用构造器注入：<br />​<br />\n```java\n@Component\npublic class CircularDependencyA {\n\n    private CircularDependencyB circB;\n\n    @Autowired\n    public CircularDependencyA(CircularDependencyB circB) {\n        this.circB = circB;\n    }\n}\n```\n```java\n@Component\npublic class CircularDependencyB {\n\n    private CircularDependencyA circA;\n\n    @Autowired\n    public CircularDependencyB(CircularDependencyA circA) {\n        this.circA = circA;\n    }\n}\n```\n​\n\n接着我们写一个配置类用来测试，就命名为 TestConfig 吧，它指定了扫描组件的基准包名。假设上面的 bean 定义在包“com.hardway.circular”里：<br />​<br />\n```java\n@Configuration\n@ComponentScan(basePackages = { \"com.hardway.circular\" })\npublic class TestConfig {\n}\n```\n​\n\n最后我们写一个 JUnit 测试来检查循环依赖。测试可以是空的，因为我们只要触发上下文加载即可检测到循环依赖。<br />​<br />\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = { TestConfig.class })\npublic class CircularDependencyTest {\n\n    @Test\n    public void givenCircularDependency_whenConstructorInjection_thenItFails() {\n        // 测试可以是空的，因为我们只要触发上下文加载即可检测到循环依赖。\n    }\n}\n```\n尝试运行测试，得到如下异常：<br />​<br />\n```shell\nBeanCurrentlyInCreationException: Error creating bean with name 'circularDependencyA':\nRequested bean is currently in creation: Is there an unresolvable circular reference?\n```\n\n\n<a name=\"gTHg0\"></a>\n# 绕过的方法\n\n<br />前面说了，发生循环依赖，首先应该重新思考代码设计。不过这里还是完整地列出所有可以绕过异常的办法。<br />​<br />\n<a name=\"TR1W6\"></a>\n## 重新设计\n​\n\n如果发生循环依赖，很有可能出现了设计问题：职责划分不合理。这时候应该重新设计组件让它们的层次结构变得合理和良好，从而不需要循环依赖。<br />​\n\n如果真的因为某些原因不能重新设计组件（比如遗留代码、不允许被修改的代码、没时间没资源做完整的重新设计等……），那么你可以尝试：<br />​<br />\n<a name=\"V5Edr\"></a>\n## 使用 @Lazy\n​\n\n打破环的简单办法是让 Spring 对 bean 进行懒惰的初始化，即：不要完全初始化 bean，而是创建一个代理来将它注入到其他 bean 中。被注入的 bean 仅仅在第一次被使用时才会完全初始化。<br />​\n\n比如你可以把前面的组件 CircularDependencyA 改造成这样：<br />​<br />\n```java\n@Component\npublic class CircularDependencyA {\n\n    private CircularDependencyB circB;\n\n    @Autowired\n    public CircularDependencyA(@Lazy CircularDependencyB circB) {\n        this.circB = circB;\n    }\n}\n```\n​\n\n如果你再次运行测试，就会看到错误不见了。<br />​<br />\n<a name=\"XNdRC\"></a>\n## 使用设置器/字段注入\n​\n\nSpring 官方文档提出的，也是最流行的（但是我不推荐）绕过方式是使用设置器注入。简单来说就是你将 bean 们的缠绕方式从构造器注入改成设置器注入（或者字段注入），就能搞定问题。通过这个方式 Spring 只创建 bean，但是在依赖被真正用到之前都不会事先注入。<br />​\n\n我们可以把前面的例子中的类改成使用设置器注入，然后添加另一个 message 字段到 CircularDependencyB 中以便于写一个合适的单元测试：<br />​<br />\n```java\n@Component\npublic class CircularDependencyA {\n\n    private CircularDependencyB circB;\n\n    @Autowired\n    public void setCircB(CircularDependencyB circB) {\n        this.circB = circB;\n    }\n\n    public CircularDependencyB getCircB() {\n        return circB;\n    }\n}\n```\n​<br />\n```java\n@Component\npublic class CircularDependencyB {\n\n    private CircularDependencyA circA;\n\n    private String message = \"Hi!\";\n\n    @Autowired\n    public void setCircA(CircularDependencyA circA) {\n        this.circA = circA;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n}\n```\n\n<br />单元测试改成这样：<br />​<br />\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = { TestConfig.class })\npublic class CircularDependencyTest {\n\n    @Autowired\n    ApplicationContext context;\n\n    @Bean\n    public CircularDependencyA getCircularDependencyA() {\n        return new CircularDependencyA();\n    }\n\n    @Bean\n    public CircularDependencyB getCircularDependencyB() {\n        return new CircularDependencyB();\n    }\n\n    @Test\n    public void givenCircularDependency_whenSetterInjection_thenItWorks() {\n        CircularDependencyA circA = context.getBean(CircularDependencyA.class);\n\n        Assert.assertEquals(\"Hi!\", circA.getCircB().getMessage());\n    }\n}\n```\n\n<br />上面用到一些注解，解释如下：<br />​\n\n@Bean： 告诉 Spring 框架必须使用这些方法来获取需要被注入的 bean 的实现。<br />@Test：  测试要从上下文中获取 CircularDependencyA 这个 bean，然后断言它的 CircularDependencyB 已经被稳妥地注入了，并检查它的 message 属性的值。<br />​<br />\n<a name=\"SG2BS\"></a>\n## 使用 @PostConstruct\n\n<br />另一个打破环的方式是通过在众多 bean 中的其中一个上面应用 @Autowired 来注入依赖，然后在一个方法上面应用 @PostConstruct 注解来设置其他的依赖。<br />​\n\n比如有这样的 bean 相关的代码：<br />​<br />\n```java\n@Component\npublic class CircularDependencyA {\n\n    @Autowired\n    private CircularDependencyB circB;\n\n    @PostConstruct\n    public void init() {\n        circB.setCircA(this);\n    }\n\n    public CircularDependencyB getCircB() {\n        return circB;\n    }\n}\n```\n```java\n@Component\npublic class CircularDependencyB {\n\n    private CircularDependencyA circA;\n\t\n    private String message = \"Hi!\";\n\n    public void setCircA(CircularDependencyA circA) {\n        this.circA = circA;\n    }\n\t\n    public String getMessage() {\n        return message;\n    }\n}\n\n```\n\n<br />然后可以运行之前写好的同样的测试，你可以看到依赖能够被稳妥地注入并且不会抛出循环依赖异常。<br />​<br />\n<a name=\"uJPhF\"></a>\n## 实现 ApplicationContextAware 和 InitializingBean\n​\n\n如果有 bean 实现了 ApplicationContextAware，则这个 bean 就能够访问 Spring 上下文并能够从中抽取到其他的 bean。而通过实现 InitializingBean 可以指示这个 bean 在当其所有的属性都被设置好后必须执行一些动作；在这个场景下我们手动设置依赖。<br />​\n\nbean 相关的代码像这样：<br />​<br />\n```java\n@Component\npublic class CircularDependencyA implements ApplicationContextAware, InitializingBean {\n\n    private CircularDependencyB circB;\n\n    private ApplicationContext context;\n\n    public CircularDependencyB getCircB() {\n        return circB;\n    }\n\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        circB = context.getBean(CircularDependencyB.class);\n    }\n\n    @Override\n    public void setApplicationContext(final ApplicationContext ctx) throws BeansException {\n        context = ctx;\n    }\n}\n\n```\n```java\n@Component\npublic class CircularDependencyB {\n\n    private CircularDependencyA circA;\n\n    private String message = \"Hi!\";\n\n    @Autowired\n    public void setCircA(CircularDependencyA circA) {\n        this.circA = circA;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n}\n\n```\n再一次运行之前的测试可以验证仍然能够通过并且没有异常。<br />​<br />\n<a name=\"mXCaE\"></a>\n# 总结\n​\n\n本文接续《[邪恶的字段注入](https://zhuanlan.zhihu.com/p/381290161)》，强烈推荐使用构造器注入，并且手把手地讲解了如何将字段注入改造成构造器注入，以及反驳了构造器注入不如字段注入的观点。同时对循环依赖这个极端场景进行了举例说明，列举了所有可能的绕过方法，并展示了通过 @Lazy 注解，构造器注入仍然优于字段注入，但是最优的方案是重新设计代码，因为出现循环依赖是一个设计缺陷的表征。<br />​\n\n尽管 Spring 官方文档更喜欢用设置器注入和字段注入，但是我仍然更加推崇构造器注入。因为设置器/字段注入以及其他的几种绕过方法基本上都是阻拦了 Spring 对 bean 的初始化和注入的管理，然后手动来进行，这违背了使用 Spring 的初衷。<br />​\n\n​<br />\n"
  },
  {
    "id": 47246848,
    "title": "邪恶的字段注入",
    "description": "继《给 Java gradle 工程添加 git hooks》之后，再次延续《后端工程圣殿形象的崩塌以及重建》一文，用 JavaScript 工程师的视角，来改造理论上本该高大上但是现实中却大面积倒塌的 java 后端工程。今天面试了一个号称有着 8 年 java 开发经验的工程师（据说所谓的...",
    "custom_description": null,
    "updated_at": "2021-06-16T12:42:55.000Z",
    "created_at": "2021-06-16T12:42:55.000Z",
    "slug": "gg7lmd",
    "word_count": 1489,
    "cover": null,
    "body": "继《[给 Java gradle 工程添加 git hooks](https://zhuanlan.zhihu.com/p/378996745)》之后，再次延续《[后端工程圣殿形象的崩塌以及重建](https://zhuanlan.zhihu.com/p/376821879)》一文，用 JavaScript 工程师的视角，来改造理论上本该高大上但是现实中却大面积倒塌的 java 后端工程。<br />​\n\n今天面试了一个号称有着 8 年 java 开发经验的工程师（据说所谓的 java 工程师，事实上就是 Spring 工程师而已）。我问她这两种写法有什么区别？你更倾向哪一种？\n```java\n@Service\nclass ServiceX {...}\n\n// 写法 1\n\nclass A1 {\n    @Autowired\n    private ServiceX service;\n    \n    ...\n}\n\n// 写法 2\n\nclass A2 {\n    private final ServiceX service;\n    \n    public A2 (@Autowired ServiceX service) {\n        this.service = service;\n    }\n}\n```\n​\n\n她看了大惊失色：啊？还有 A2 这种写法？没见过啊，都是像第一种那样去写啊！<br />​\n\n我不惊讶她的回答，因为我们公司的实际项目中也是这样的，所有人都是像第一种那样去写的，从来没有人觉得任何不适。<br />​\n\n但是我很不适，**首先 IDE 会给第一种写法画上波浪线**，给一个黄色警告。我不明白那些看不起 JavaScript 工程师的 java 工程师们，为什么从来不去注意这种警告？<br />​\n\n**其次是我在写测试时，觉得更加不爽**。原来没有人觉得不适，因为项目中根本没有测试。通过写测试，我切身体会到了两种写法的区别和各自的优劣，结论是强烈建议使用第二种写法，应该没有不得不使用第一种写法的场景。<br />​\n\n以下是个人粗浅的理解的总结<br />​\n\n以上的代码就是要写一个类，该类依赖一个 Service，使用 Spring 框架实现这个依赖 Service 的类，当然要使用依赖注入，这个 @Autowired 注解就是用来注入依赖的。但是注入的方式有两种，以上第一种写法是字段注入，而第二种写法是构造器注入。<br />​<br />\n<a name=\"cl6k6\"></a>\n# 为什么不建议采用字段注入？\n​<br />\n<a name=\"lLryE\"></a>\n## 一、测试不仅难写，而且难以运行\n​\n\n测试时需要控制依赖项，所以往往需要将真正的依赖项模拟掉。如果使用字段注入，测试就很难写。因为要模拟这个依赖项，就要写更多的代码。测试也很难运行，因为要花更长时间运行，更耗机器资源，还让反馈变慢。<br />\n<br />比如对于字段注入的代码进行测试，你需要先在测试类上注解上 Spring 相关的环境，而且在运行测试时会真的启动 Spring 容器，所以运行起来很慢：<br />​<br />\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\nclass A1Test {\n    @MockBean\n    private Service mockService;\n    \n    @Autowired\n    private A1 sut;\n    \n    @Test\n    void testIt() {\n        ...\n    }\n}\n```\n\n<br />事实上，除非是写集成测试，根本没有必要启动 Spring 环境。所以对于构造器注入，测试代码不仅更加简洁且运行更快：<br />​<br />\n```java\nclass A2Test {\n    private final A2 sut;\n    private final Service mockService;\n    \n    {\n        mockService = Mockito.mock(Service.class);\n        \n        // 直接 new，避开了 Spring 容器的开销\n        sut = new A2(mockService);\n    }\n    \n    @Test\n    void testIt() {\n        when(mockService.method(any(Object.class)).thenReturn(0);\n        ...\n    }\n}\n```\n\n\n<a name=\"IhmCT\"></a>\n## 二、字段注入方式违反了不可变性原则\n​\n\n对比 A1 的实现，注意在 A2 的实现中（构造器注入），使用了 `final` 关键字。这带来了很大的好处，因为这个字段内容在应用的整个生命周期中不能再被改变，从而可以避免编程错误（比如忘掉初始化这个字段会导致编译报错）。<br />​<br />\n<a name=\"TUbQx\"></a>\n## 三、字段注入实现的代码不够安全\n​\n\n当构造器执行完毕，对象就准备好被使用了。采用构造器注入方式，对象只有准备好或者没有准备好的状态，不存在中间态。但是采用字段注入，导致对象存在一个中间状态，这个对象会比较脆弱。<br />​<br />\n<a name=\"G5k16\"></a>\n## 四、字段注入方式对依赖的表述不够清晰\n​\n\n采用构造器注入，使得类的必要依赖一目了然。<br />​<br />\n<a name=\"riSNs\"></a>\n## 五、逼迫开发者思考类的设计\n​\n\n如果你的构造器里出现了很多参数，就是非常明显的一个坏的设计，实际上是一种上帝对象这样的反模式。不管类通过构造器还是字段的方式依赖多个其他服务，这都是错的，但是通过构造器注入更能让人在依赖变多时停下来思考代码结构的设计。<br />​<br />\n<a name=\"G5MY9\"></a>\n# 总结\n​\n\n综上所述，如果非要说构造器注入有什么不好的地方，那就是增加了实现上代码量，因为字段注入只需要写一个字段，而构造器注入既要写构造器，还免不了要写字段。但作为 JavaScript 工程师，不得不说这是 java 语言本身的问题，在 JavaScript 或者 TypeScript 的世界里，采用构造器注入，连这个缺点都没有。<br />​<br />\n<a name=\"lK4yy\"></a>\n## 举个例子\n\n<br />如果你使用 NestJs（[https://docs.nestjs.com/fundamentals/injection-scopes](https://docs.nestjs.com/fundamentals/injection-scopes)），那么可以这样写：\n```typescript\n@Injectable()\nclass Service {}\n\nclass A2 {\n  constructor(@Inject(Service) private service) {}\n}\n```\n注意到在构造器里可以直接写上 `private`，这样 A2 类就自动有了 service 这个私有字段。<br />​\n\n如果你不用 InversifyJs（[https://doc.inversify.cloud/zh_cn/classes_as_id.html](https://doc.inversify.cloud/zh_cn/classes_as_id.html)），那么也类似：\n```typescript\n@injectable()\nclass Service {...}\n\nclass A2 {\n  constructor(private readonly service: Service) {}\n}\n```\n最后再次强调，如果你发现自己的项目中还在用字段注入，赶紧改成构造器注入的方式吧！\n"
  },
  {
    "id": 46819972,
    "title": "给 Java gradle 工程添加 git hooks",
    "description": "接《后端工程圣殿形象的崩塌以及重建》，今天记录一下使用土办法给 Java gradle 工程添加 git hooks 的步骤，并且创建了一个样例项目和提交记录放在了 GitHub：https://github.com/Jeff-Tian/securing-web-with-wechat-mp/...",
    "custom_description": null,
    "updated_at": "2021-06-08T11:56:24.000Z",
    "created_at": "2021-06-08T11:56:24.000Z",
    "slug": "giptcw",
    "word_count": 1086,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1623153288082-cb73eb59-104c-4fd1-8136-932886a2faf5.png",
    "body": "接《[后端工程圣殿形象的崩塌以及重建](https://zhuanlan.zhihu.com/p/376821879)》，今天记录一下使用土办法给 Java gradle 工程添加 git hooks 的步骤，并且创建了一个样例项目和提交记录放在了 GitHub：[https://github.com/Jeff-Tian/securing-web-with-wechat-mp/commit/2a844e890cb0d91eaf5b5684f9d750cf586613a2](https://github.com/Jeff-Tian/securing-web-with-wechat-mp/commit/2a844e890cb0d91eaf5b5684f9d750cf586613a2)。欢迎👏 围观和批评，毕竟这是一个很土的办法。<br />\n\n<a name=\"EwTxM\"></a>\n# 背景简介\n​\n\nGit 钩子可以在某些事件发生时，执行指定的任务。比如我希望在自己的工程里，当进行 git commit 和 push 前，跑一边测试，确保新的代码改动没有带来问题，那么就可以分别添加 pre-commit 和 pre-push 两个钩子事件任务。<br />​\n\n默认的 Git 钩子目录是 `.git/hooks`。这个目录就是 Git 会在项目的事件发生时去检查可能需要执行的脚本的地方。<br />​<br />\n<a name=\"OaKcj\"></a>\n# 思路\n​\n\n还是因为对 Java 的世界不熟悉，因此走了土办法途径。很容易想到，直接写两个脚本，分别对应 pre-commit 和 pre-push，放在 `.git/hooks` 目录下。但这样做的缺点是，当你换一台机器时，这个信息就丢失了，因为这个改动没有纳入到源代码管理中。<br />​\n\n所以想到的改进方案时将脚本写在源代码里，然后向 `build.gradle` 文件中添加一个安装钩子的任务，这样一来，所有拉去改项目的机器，都可以一键安装钩子。<br />​<br />\n<a name=\"qkqw2\"></a>\n# 实现\n​<br />\n<a name=\"Rcuy9\"></a>\n## 创建脚本\n​\n\n针对背景简介里的需求，一共需要创建两种钩子，分别是 pre-commit 和 pre-push。为了支持 macOS 和 windows 开发机，对每种钩子分别创建两个文件。以 pre-push 为例，分别创建 pre-push-macos 和 pre-push-windows 两个文件，如下：<br />​<br />\n<a name=\"LYMB9\"></a>\n### pre-push-macos：\n```shell\n#!/bin/bash\n\necho \"运行测试...\"\n\n./gradlew test --info\n\nstatus=$?\n\n# 如果测试失败会返回码置为 1\n[ $status -ne 0 ] && exit 1\nexit 0\n```\n<a name=\"BxoXM\"></a>\n### pre-push-windows：\n```shell\n#!C:/Program\\ Files/Git/usr/bin/sh.exe\n\necho \"运行测试...\"\n\n./gradlew test --info\n\nstatus=$?\n\n# 如果测试失败会返回码置为 1\n[ $status -ne 0 ] && exit 1\nexit 0\n```\n两个文件几乎一致，只是第一行 She bang line 有区别，因为这两种系统对应的可以执行的 sh 文件所在目录有区别。<br />​<br />\n<a name=\"j2ub1\"></a>\n## 向 `build.gradle` 文件添加安装钩子的任务\n```groovy\nimport org.apache.tools.ant.taskdefs.condition.Os\n\n\ntask installGitHooks(type: Copy) {\n    def suffix = \"macos\"\n    if (Os.isFamily(Os.FAMILY_WINDOWS)) {\n        suffix = \"windows\"\n    }\n    from new File(rootProject.rootDir, \"scripts/pre-commit-$suffix\")\n    into { new File(rootProject.rootDir, '.git/hooks') }\n    rename(\"pre-commit-$suffix\", 'pre-commit')\n\n    from new File(rootProject.rootDir, \"scripts/pre-push-$suffix\")\n    into { new File(rootProject.rootDir, '.git/hooks') }\n    rename(\"pre-push-$suffix\", 'pre-push')\n\n    fileMode 0775\n}\n\ntasks.getByPath(':build').dependsOn installGitHooks\n```\n这个任务会判断系统的类型，并拷贝相应的脚本文件到 `.git/hooks` 目录下。这样当执行\n```shell\n./gradlew installGitHooks\n```\n命令时就会安装 Git 钩子。注意这里还指定 `build` 任务依赖 `installGitHooks` 任务，于是即使执行 `./gradlew build` 也会触发自动安装 Git 钩子。<br />​<br />\n<a name=\"Te6zg\"></a>\n## CI/CD\n​\n\n当然，在提交前运行 Git 钩子确保测试通过是很好的实践，但是不排除仍然可以绕过，以至于没有测试就推送了代码到仓库。为了避免将不工作的代码部署到线上（这里开发环境也属于线上，[线上不单指生产环境](https://github.com/Jeff-Tian/egg-error-display#%E7%BA%BF%E4%B8%8A--%E7%94%9F%E4%BA%A7)），那么有必要在 CI/CD 环节也加上运行测试步骤。如果使用 GitHub Actions，你可以写一个如下的 `.github/workflows/gradle.yml` 文件，注意，下面的示例还在 Github Action 里集成了 Sonar 扫描步骤：<br />​<br />\n```yaml\nname: Java CI with Gradle\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n\n  sonar-build:\n    name: Build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n      - name: Set up JDK 11\n        uses: actions/setup-java@v1\n        with:\n          java-version: 11\n      - name: Cache SonarCloud packages\n        uses: actions/cache@v1\n        with:\n          path: ~/.sonar/cache\n          key: ${{ runner.os }}-sonar\n          restore-keys: ${{ runner.os }}-sonar\n      - name: Cache Gradle packages\n        uses: actions/cache@v1\n        with:\n          path: ~/.gradle/caches\n          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}\n          restore-keys: ${{ runner.os }}-gradle\n      - name: Build and analyze\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n        run: ./gradlew build sonarqube --info\n\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up JDK 11\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n        distribution: 'adopt'\n    - name: Grant execute permission for gradlew\n      run: chmod +x gradlew\n    - name: Build with Gradle\n      run: ./gradlew build\n    - name: Test with Gradle\n      run: ./gradlew test\n```\n这样你就可以在提交历史里查看每次提交的测试结果和代码扫描结果了：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1623153288082-cb73eb59-104c-4fd1-8136-932886a2faf5.png#clientId=u91a6ec18-68c9-4&from=paste&height=708&id=ubfc92f75&margin=%5Bobject%20Object%5D&name=image.png&originHeight=708&originWidth=1602&originalType=binary∶=1&size=169430&status=done&style=none&taskId=u57b95a4c-fd61-46aa-9534-e962ca56ef7&width=1602)\n"
  },
  {
    "id": 46733140,
    "title": "一个老外都经常用错的单词",
    "description": "今天是高考的第一天，现在第一天的高考已经结束了，我才反应过来。还好我 XX 年前就完成了高考，不然今天肯定考试迟到不让进考场了。明天是英语科目的考试，聊点英语话题吧，有个单词，就是 \"comprise\"，希望你不要在高考题目里碰到它。按理说这个单词很常见，但如果拿来考试的话，就很坑了，毕竟，很...",
    "custom_description": null,
    "updated_at": "2021-06-07T11:05:41.000Z",
    "created_at": "2021-06-07T11:05:41.000Z",
    "slug": "qoatm7",
    "word_count": 1377,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1623058101153-5e2bcc63-74f1-40ee-b4b5-b7857a0d7cfa.png",
    "body": "今天是高考的第一天，现在第一天的高考已经结束了，我才反应过来。还好我 XX 年前就完成了高考，不然今天肯定考试迟到不让进考场了。<br />​\n\n明天是英语科目的考试，聊点英语话题吧，有个单词，就是 \"comprise\"，希望你不要在高考题目里碰到它。按理说这个单词很常见，但如果拿来考试的话，就很坑了，毕竟，很多外国人都用错！<br />​\n\n我是一个程序员，职业病就是喜欢找 BUG，今天看到一篇很牛的文章《Architectural considerations for event-driven microservices-based systems》，作者是 IBM 公司的 Tanmay Ambre。文章不算太老，2020 年 7 月 10 日发表的，讲架构的，太牛逼了，超出了我的能力范围，只能学习，完全找不到技术上的 BUG。<br />​\n\n不过嘿嘿，找到了一点儿措辞上的问题，鸡蛋里挑骨头，也算一个微乎其微的 BUG 吧。<br />​\n\n其中有好几段错误的用法，比如：\n> _Big data layer_, which **is comprised of** data warehouses, ODS, data marts, and AI/ML model processing.\n\n> Event schema **is comprised of **event metadata (such as type, time, source system, and so on) and payload (that is, information) that is used for processing by event processors. \n\n​\n\n是的，它用的\"is comprised of\"这个短语，严格来说是错误的（如果你是一个已经工作多年的老鸟，一定对它屡见不鲜，甚至觉得没毛病吧）。<br />​\n\n你在谷歌搜索框里输入 comprise，可以见到它的意思就是包含，而且本身就是 be made up of，已经有 be of 的涵义了，所以再在他前后分别加上 be 和 of，就显得多此一举了。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1623058101153-5e2bcc63-74f1-40ee-b4b5-b7857a0d7cfa.png#clientId=u95956826-801a-4&from=paste&height=180&id=uc51a42a9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=360&originWidth=536&originalType=binary∶=2&size=28900&status=done&style=none&taskId=u07d65ba2-8250-4d89-8aed-6f2aa1e02b7&width=268)<br />\n<br />作为程序员，免不了经常用谷歌搜索（是的还有 StackOverflow），用得多了，会发现它的纠错能力特别强，偶尔输错了关键词，它也知道你本来想要表达什么，并且会给出一个正确的建议。但是我平时的体会是技术上的词汇它的纠错能力很强。那么对于这种非技术方面的，它表现得怎么样呢？<br />​\n\n于是我故意输入 is comprised of，看到结果令人惊呼 Google 大脑不愧是最强大脑呀：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1623058232029-4c9daba7-8331-4627-8bc4-092fa5e64515.png#clientId=u95956826-801a-4&from=paste&height=291&id=u6ac50ce0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=388&originWidth=867&originalType=binary∶=2&size=59362&status=done&style=none&taskId=u51e391ce-bdd5-4a6a-b21a-6e75773dcb1&width=650)<br />它不仅解释了 comprise 的含义，还告诉你 is comprised of 的正确说法其实就是 comprise。当然，如果你就是喜欢使用被动语态，那么可以用 is composed of。还贴心地给你两个例句：the galaxy comprises many stars，或者用被动语态 the galaxy is composed of many stars. <br />​\n\n作为程序员，推荐你少用被动语态，在平时的 README 这样的 markdown 文件编辑工作中，如果你使用了被动语态，lint 工具就会对你进行警告（如果你还没有配置这样的 lint 工具，强烈推荐你配置一下）。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1623062285973-714ece1b-9a79-4ad6-aac2-12902918774c.png#clientId=u95956826-801a-4&from=paste&height=175&id=u17fbd2dc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=350&originWidth=1344&originalType=binary∶=2&size=44151&status=done&style=none&taskId=ue4531e3d-8ad2-4e04-9a32-4f4def4408f&width=672)<br />你一定会 argue 为什么不推荐使用被动语态吧，这不就是一种个人风格吗？程序员这么奇葩的吗？<br />​\n\n其实这条推荐不局限在程序员里，对所有的写作者来说，都不推荐使用被动语态。一名外国作家** **[Liz Bureman](https://thewritepractice.com/author/liz/)** **在一篇英语写作指导里，就推荐尽量不要使用被动语态，因为主动语态相比被动语态，有这些好处：<br />​<br />\n\n- 更加直截了当。她说“Beth stubbed her toe”比起“The toe was stubbed by Beth”更加清晰、直接以及有趣。所以她推荐使用主动语态直接切入主题以吸引读者。\n- 更加精准。她举例说“Country music is sometimes hated”相比“People sometimes hate country music”，传达的信息更少。尽管你可以把句子延长成“Country music is sometimes hated by poeple”，但是何必呢？直接使用主动语态不香吗？\n- 更加简洁。她指出主动语态往往比相对应的被动语态更加短小，所以推荐你剪掉那些冗余的词，用主动语态让你的文章更紧凑。\n\n​\n\n当然，出现以下情况，被动语态还是不得不被使用的（咳咳，不得不使用被动语态，OK？）：<br />​<br />\n\n- 你不知道主语是谁\n- 主语不重要\n- 你希望读者将注意力集中在宾语上\n\n​\n\n似乎扯远了，再看了下维基百科，它也指出了尽管 comprised of 在书面语和口头语中很常见，但是应该被视作错误的用法：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1623058286276-e4bec840-74bc-4f8a-a67d-66f2fcad7013.png#clientId=u95956826-801a-4&from=paste&id=uc44401cd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=314&originWidth=1145&originalType=binary∶=2&size=56493&status=done&style=none&taskId=u81ce306b-a206-40e8-a359-9f982116e4d)\n<a name=\"elr8n\"></a>\n# 总结\n​\n\n无论出于主动语态优于被动语态的原因，还是追求语法正确，都应该直接使用 comprise，避免 is comprised of。<br />​\n\n最后，祝你高考考出水平赛出风格，如果你还有余力，或者早就完成了高考这个里程碑，那么给你出个思考题：这个 lint 工具是怎么检测到文章中的被动语态的呢？如果你觉得这道题很难，那么一定是你想复杂了。<br />​\n\n欢迎留言分享你的思考。\n"
  },
  {
    "id": 46539246,
    "title": "打桩与模拟的区别（以 http client 为例）",
    "description": "缘起最初是从专业的 TDD 群里得知在测试中还有打桩与模拟的区别，我之前只有一个笼统的概念，当需要控制被依赖方的某些操作的返回结果时（比如调用数据库的保存操作，我希望它在测试中返回一个固定的成功结果；或者调用 rpc 服务，得到某个固定的 json），就需要 mock 这个被依赖方。至于这个 ...",
    "custom_description": null,
    "updated_at": "2021-06-04T05:56:45.000Z",
    "created_at": "2021-06-04T05:32:12.000Z",
    "slug": "slmsft",
    "word_count": 3177,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1622786127716-655ae3fb-a4fa-4650-8030-d1c99dc5b490.png",
    "body": "<a name=\"JQdWI\"></a>\n# 缘起\n\n<br />最初是从专业的 TDD 群里得知在测试中还有打桩与模拟的区别，我之前只有一个笼统的概念，当需要控制被依赖方的某些操作的返回结果时（比如调用数据库的保存操作，我希望它在测试中返回一个固定的成功结果；或者调用 rpc 服务，得到某个固定的 json），就需要 mock 这个被依赖方。至于这个 mock，到底是 mock（模拟） 还是 stub（打桩），没有深究。<br />\n<br />后来一看 Martin Fowler 的文章，居然对这个我头脑中笼统的 mock，细分了 4 种不同的情况！当然，我并没有看懂，但是在实践中，的确明显感受到了 2 种 mock 的细微区别，这两种，就是 Martin Fowler 所说的打桩和模拟，也就是最早从 TDD 群里得知的这两种 mock。<br />\n<br />比如，当被测对象以来第三方服务，需要使用 http client 调用第三方服务时，在测试中希望固定第三方服务的返回结果，然后测试被测对象的行为。这个时候，就有两种策略，第一是把这个 http client 替换成一个假的 client，拥有和真实 http client 相同的方法，但是这个假对象的对应方法，会立即返回固定的结果。第二是不替换这个 http client，而是利用某些神奇的工具，对目标 url 进行监听，一看到 http client 发了请求到这个 url，立即给到 http client 一个固定返回结果。在我看来，第一个方法是打桩，第二个方法是模拟。<br />\n<br />举个例子，你的待测试对象，依赖第三方接口（比如需要调用微信的 api 以获取临时二维码的链接），你的服务需要从微信的接口返回的原始 json 里解析出这个图片地址，在测试中你需要一个固定的原始 json 返回值，通过打桩的方式就是替换发起 http 请求的 client，比如像这样\n```typescript\ntest('extract qrcode image url', async () => {\n  class MockHttpClient extends HttpClient {\n    request: () => ({the: 'fixed json'})\n    ...\n  }\n  \n\tconst mpService = new MpService(new MockHttpClient())\n  const res = await mpService.getQrCodeImage()\n  expect(res).toBe('https://qr.url')\n})\n```\n而通过模拟的方式，则可以引用 `nock` 这个库，代码如同这样：\n```typescript\nimport nock from 'nock'\n\ntest('extract qrcode image url', async () => {\n  nock('https://api.weixin.qq.com').post('/qr-code').reply(200, {the: 'fixed json'})\n  \n\tconst mpService = new MpService(new RealHttpClient())\n  const res = await mpService.getQrCodeImage()\n  expect(res).toBe('https://qr.url')\n})\n```\n打桩似乎比较土，只要自己写个假的对象，并实现相应的方法即可。模拟比较高级是因为往往需要借助第三方工具，从而不需要自己写假对象，只需要写假的返回结果就行。从实际操作层面看，打桩要写很多代码，但是模拟代码量比较少（其实原因是引入了第三方工具，如果自己实现模拟，需要比打桩更多的代码量）。而打桩也并非只能自己写假对象，也可以引用第三方工具，比如 `ts-mockery` 就可以帮你完成写模拟对象的事情，你只需要写一下关注的方法的假的实现：\n```typescript\nimport { Mock } from 'ts-mockery'\n\ntest('extract qrcode image url', async () => {\n  const mockHttpClient = Mock.of<RealHttpClient>({request: () => ({the: 'fixed json'})})\n  \n\tconst mpService = new MpService(mockHttpClient())\n  const res = await mpService.getQrCodeImage()\n  expect(res).toBe('https://qr.url')\n})\n```\n**从这个库的使用来看，名字叫 mock，而实际做的是打桩，所以说，打桩和模拟的区别，很多人都没有注意到。**<br />\n<br />为什么模拟方式可以使用真正的依赖，而改变其行为？我并没有去看 nock 的实现代码，但是它一定也是替换了某些真正对象的，比如对于发送 http 请求来说，很可能在底层有一个全局的对象来做这件事情，我们通常使用的 http client 比如 axios 等，最终还是依赖了这个全局对象，而 nock 就是替换了这个全局对象，从而在测试中，真实 http client 的逻辑也会被走到。（纯属臆测，经不起考证）<br />\n\n<a name=\"tBfT0\"></a>\n# 太长不看\n\n<br />以我目前粗浅的理解，打桩和模拟有这些区别：\n\n|  | **打桩** | **模拟** |\n| --- | --- | --- |\n| **调用深度** | 浅<br />​\n\n被依赖方的方法调用整个被替换了，因此原来的被依赖对象的方法逻辑完全没有被走到 | 深<br />​\n\n被依赖的真正对象没有完全被替换，因此部分逻辑还是会走到，只有某些关键部位被替换。 |\n| **介入的接触点** | 表面 | 深层 |\n| **以依赖 http client 的待测对象举例说明** | 替换 http client | 替换 http server |\n| **测试纯度** | 更纯<br />​\n\n因为只执行待测对象的代码，而替身代码往往很简单 | 不纯<br />​\n\n还会走真正的依赖部分的逻辑 |\n| **适用场景** | 单元测试 | 端到端测试 |\n\n<a name=\"Y6eeq\"></a>\n# \n<a name=\"oSq4Y\"></a>\n# 且看 Martin Fowler 的说明\n\n<br />对于假对象来说，存在多个定义，一般的术语叫测试替身。这个术语包含了：dummy（木偶）、fake（伪造）、stub（打桩）、mock（模拟）。可见说了半天，我也才仅仅体会到了最后两种测试替身的区别，对于 dummy 和 fake，目前没有感知。据 Martin Fowler 说：<br />\n\n> - 木偶对象被传来传去但是根本不会被真正使用到。它们通常只是用来填塞参数列表\n> - 伪造对象实际上是有能够工作的实现，但通常会走捷径从而并不适合生产环境（比如内存数据库就是个很好的例子）\n> - 打桩提供了测试中调用时所对应的响应返回值，通常对于测试目的之外的逻辑根本不进行响应。打桩还可能被用来记录调用的信息，比如一个邮件网关打桩会记住它“发送”的信息，或者是它“发送”的信息的计数。这里的“发送”打了引号，因为对于打桩来说，根本不用真正发送。\n> - 模拟是事先写好的期待的调用规格说明。\n\n\n<br />也有人说，打桩是一个简单的伪造对象，只是为了让测试能够顺畅运行；而模拟则是一个更加智能的打桩，你可以验证测试代码通过了它的内部。<br />\n<br />我没有感知到前两种测试替身，可能与使用的语言有关系。在 NodeJs 世界，我可以随时给参数列表一些任意的原始值，或者自由对象，所以没有意识到他们是木偶。<br />\n\n<a name=\"XDt9s\"></a>\n# 再次拿 http client 举个例子\n\n<br />最近学习 Java，正在尝试用 Java 把自己以前用 NodeJs 实现过的东西再重新实现一遍。这里用 Java 把上面的 NodeJs 例子重新说明一遍，以消除自己对于 Java 的恐惧。<br />\n\n<a name=\"Xphum\"></a>\n## 任务\n测试 MpService 类中的 `getMpQrCode` 方法。<br />\n<br />这个 MpService 类，就是利用 Http Client 发送请求给微信 API，然后封装一个 MpQR 对象返回。这个 MpQR 大致长这样：\n```java\npublic class MpQR {\n  @JsonProperty(\"expire_seconds\")\n  private Long expireSeconds;\n\n  @JsonProperty(\"imageUrl\")\n  private String imageUrl;\n\n  @JsonProperty(\"sceneId\")\n  private String sceneId;\n\n  @JsonProperty(\"ticket\")\n  private String ticket;\n\n  @JsonProperty(\"url\")\n  private String url;\n}\n```\n这个 MpService 类，在请求微信 API 碰到异常时，会封装一个 Fallback 的 MpQR 类：\n```java\npublic MpQR getMpQrCode() {\n    URI uri = URI.create(this.qrCodeCreateUrl);\n    HttpRequest request = HttpRequest.newBuilder().POST(HttpRequest.BodyPublishers.ofString(\"\")).uri(uri).build();\n\n    try {\n        HttpResponse<String> response = this.httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n        WeixinTicketResponse ticketResponse = new Gson().fromJson(response.body(), WeixinTicketResponse.class);\n        ...\n        return new MpQR().ticket(ticketResponse.ticket).imageUrl(ticketResponse.url).expireSeconds(ticketResponse.expiresInSeconds).url(ticketResponse.url);\n        } catch (InterruptedException ie){\n        return new MpQR().ticket(\"interrupted\").imageUrl(Constants.FALLBACK_QR_URL);\n    } catch (Exception ex) {\n        return new MpQR().ticket(\"error\").imageUrl(Constants.FALLBACK_QR_URL);\n    }\n}\n```\n\n\n<a name=\"MuPAG\"></a>\n## 使用土办法打桩的方式\n\n<br />测试 MpService 类的正常路径（API 请求正常返回）<br />\n<br />自己写个土的 MockHttpClient （好吧，还是叫了 mock 的名字，但是实际上它是用来打桩的）：\n```java\npublic class MockHttpClient extends HttpClient {\n    @Override\n    public Optional<CookieHandler> cookieHandler() {\n        return Optional.empty();\n    }\n\n    @Override\n    public Optional<Duration> connectTimeout() {\n        return Optional.empty();\n    }\n\n    @Override\n    public Redirect followRedirects() {\n        return null;\n    }\n\n    @Override\n    public Optional<ProxySelector> proxy() {\n        return Optional.empty();\n    }\n\n    @Override\n    public SSLContext sslContext() {\n        return null;\n    }\n\n    @Override\n    public SSLParameters sslParameters() {\n        return null;\n    }\n\n    @Override\n    public Optional<Authenticator> authenticator() {\n        return Optional.empty();\n    }\n\n    @Override\n    public Version version() {\n        return null;\n    }\n\n    @Override\n    public Optional<Executor> executor() {\n        return Optional.empty();\n    }\n\n    @Override\n    public <T> HttpResponse<T> send(HttpRequest request, HttpResponse.BodyHandler<T> responseBodyHandler) throws IOException, InterruptedException {\n        return new HttpResponse<T>() {\n            @Override\n            public int statusCode() {\n                return 200;\n            }\n\n            @Override\n            public HttpRequest request() {\n                return null;\n            }\n\n            @Override\n            public Optional<HttpResponse<T>> previousResponse() {\n                return Optional.empty();\n            }\n\n            @Override\n            public HttpHeaders headers() {\n                return null;\n            }\n\n            @Override\n            public T body() {\n                return (T) \"{\\\"ticket\\\":\\\"gQH47joAAAAAAAAAASxodHRwOi8vd2VpeGluLnFxLmNvbS9xL2taZ2Z3TVRtNzJXV1Brb3ZhYmJJAAIEZ23sUwMEmm\\n3sUw==\\\",\\\"expire_seconds\\\":60,\\\"url\\\":\\\"http://weixin.qq.com/q/kZgfwMTm72WWPkovabbI\\\"}\";\n            }\n\n            @Override\n            public Optional<SSLSession> sslSession() {\n                return Optional.empty();\n            }\n\n            @Override\n            public URI uri() {\n                return null;\n            }\n\n            @Override\n            public Version version() {\n                return null;\n            }\n        };\n    }\n\n    @Override\n    public <T> CompletableFuture<HttpResponse<T>> sendAsync(HttpRequest request, HttpResponse.BodyHandler<T> responseBodyHandler) {\n        return null;\n    }\n\n    @Override\n    public <T> CompletableFuture<HttpResponse<T>> sendAsync(HttpRequest request, HttpResponse.BodyHandler<T> responseBodyHandler, HttpResponse.PushPromiseHandler<T> pushPromiseHandler) {\n        return null;\n    }\n}\n\n```\n这真是麻烦，只想返回假的 json，结果要写一大段代码（尽管多数是 IDE 帮忙生成的）。<br />\n<br />然后就可以这样来写测试：\n```java\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)\npublic class MpServiceTest {\n    private MpService mpService = new MpService(new MockHttpClient());\n    \n    @Test\n    void testGetMpQrCode() {\n        MpQR mpQR = mpService.getMpQrCode();\n        assertThat(mpQR.getTicket()).isEqualTo(\"gQH47joAAAAAAAAAASxodHRwOi8vd2VpeGluLnFxLmNvbS9xL2taZ2Z3TVRtNzJXV1Brb3ZhYmJJAAIEZ23sUwMEmm\");\n    }\n}\n```\n<a name=\"hRPC0\"></a>\n## \n<a name=\"CfVx3\"></a>\n## 使用 Mockito 打桩\n\n<br />使用上面那种手写打桩对象的方式不灵活，当要测试异常场景时，又得新写一个打桩对象，仅仅在 send 方法的实现有所差别：直接抛出错误。如果采用第三方库，就会灵活很多，比如 mockito。以上的测试完全可以使用 mockito 来做，由于不需要手写打桩对象，代码量少很多。主要利用了 `@Mock` 注解。\n```java\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)\npublic class MpServiceTest {\n    private MpService mpService;\n\n    @Mock\n    private HttpClient mockHttpClient;\n\n    @BeforeEach\n    void setup() {\n        MockitoAnnotations.initMocks(MpServiceTest.class);\n    }\n     \n    @Test\n    void testGetMpQrCode() {\nwhen(mockHttpClient.send(any(), any())).thenReturn(new HttpResponse<Object>() {\n            @Override\n            public int statusCode() {\n                return 0;\n            }\n\n            @Override\n            public HttpRequest request() {\n                return null;\n            }\n\n            @Override\n            public Optional<HttpResponse<Object>> previousResponse() {\n                return Optional.empty();\n            }\n\n            @Override\n            public HttpHeaders headers() {\n                return null;\n            }\n\n            @Override\n            public Object body() {\n                return \"{\\\"ticket\\\":\\\"gQH47joAAAAAAAAAASxodHRwOi8vd2VpeGluLnFxLmNvbS9xL2taZ2Z3TVRtNzJXV1Brb3ZhYmJJAAIEZ23sUwMEmm\\n3sUw==\\\",\\\"expire_seconds\\\":60,\\\"url\\\":\\\"http://weixin.qq.com/q/kZgfwMTm72WWPkovabbI\\\"}\";\n            }\n\n            @Override\n            public Optional<SSLSession> sslSession() {\n                return Optional.empty();\n            }\n\n            @Override\n            public URI uri() {\n                return null;\n            }\n\n            @Override\n            public HttpClient.Version version() {\n                return null;\n            }\n        });        \n\n        mpService = new MpService(mockHttpClient);\n        MpQR mpQR = mpService.getMpQrCode();\n        assertThat(mpQR.getTicket()).isEqualTo(\"gQH47joAAAAAAAAAASxodHRwOi8vd2VpeGluLnFxLmNvbS9xL2taZ2Z3TVRtNzJXV1Brb3ZhYmJJAAIEZ23sUwMEmm\");\n    }\n```\n如果现在需要加一个测试异常的用例，就非常简单：\n```java\n@Test\nvoid testGetMpQrCodeMetInterruptedException() throws IOException, InterruptedException {\n    when(mockHttpClient.send(any(), any())).thenThrow(new InterruptedException(\"Test Exception\"));\n\n    mpService = new MpService(mockHttpClient);\n    MpQR mpQR = mpService.getMpQrCode();\n    assertThat(mpQR.getTicket()).isEqualTo(\"interrupted\");\n}\n```\n<a name=\"wIeNj\"></a>\n## \n<a name=\"yKfhh\"></a>\n## 如何采用模拟的方式来写这样的测试？\n\n<br />采用模拟的方式来实现这些测试用例，就需要使用真实的 http client，那么要被替换的内容就得往后靠。在 NodeJs 中，可以使用 nock ，直接 `nock(\"[https://api.weixin.qq.com](https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token=TOKEN)\")`。但是在 Java 的世界里，我没有找到对等的工具。于是似乎得把微信 API 的域名，抽象出来，在测试时，灌入一个 localhost，然后在 localhost 启动一个模拟的服务，让其返回期待的 json。这种方式，搜一搜，可以找到 MockWebServer 的方法。<br />\n<br />这里给出第一个测试用例的 MockWebServer 实现\n```java\nimport okhttp3.mockwebserver.MockResponse;\nimport okhttp3.mockwebserver.MockWebServer;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.web.client.TestRestTemplate;\nimport org.springframework.core.env.Environment;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport java.io.IOException;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.None)\npublic class WechatMpApiControllerTest {\n    public static MockWebServer mockBackEnd;\n\n    @BeforeAll\n    static void setUp() throws IOException {\n        mockBackEnd = new MockWebServer();\n        mockBackEnd.start();\n    }\n\n    @AfterAll\n    static void tearDown() throws IOException {\n        mockBackEnd.shutdown();\n    }\n\n    @BeforeEach\n    void initialize() {\n        String baseUrl = String.format(\"http://localhost:%s\",\n                mockBackEnd.getPort());\n\n        mpService.setQrCodeCreateUrl(baseUrl + \"/test\");\n    }\n\n    private MpService mpService;\n    \n    @Test\n    void testMpUrlHappyPath() {\n        MockResponse mockResponse = new MockResponse();\n        mockResponse.setBody(\"{\\\"ticket\\\":\\\"gQH47joAAAAAAAAAASxodHRwOi8vd2VpeGluLnFxLmNvbS9xL2taZ2Z3TVRtNzJXV1Brb3ZhYmJJAAIEZ23sUwMEmm\\n\" +\n                \"3sUw==\\\",\\\"expire_seconds\\\":60,\\\"url\\\":\\\"http://weixin.qq.com/q/kZgfwMTm72WWPkovabbI\\\"}\");\n        mockResponse.addHeader(\"Content-Type\", \"application/json\");\n        assertThat(mockBackEnd.getRequestCount()).isEqualTo(0);\n        mockBackEnd.enqueue(mockResponse);\n\n        mpService = new MpService();\n        MpQR mpQR = mpService.getMpQrCode();\n        assertThat(mpQR.getTicket()).isEqualTo(\"gQH47joAAAAAAAAAASxodHRwOi8vd2VpeGluLnFxLmNvbS9xL2taZ2Z3TVRtNzJXV1Brb3ZhYmJJAAIEZ23sUwMEmm\");\n        \n        assertThat(mockBackEnd.getRequestCount()).isEqualTo(1);\n    }\n}\n\n```\n\n\n<a name=\"D9bnV\"></a>\n# 总结\n\n<br />对于打桩和模拟，我有个粗浅的理解，不知道对不对。举例来说明：<br />\n<br />对于依赖 http client 的待测试对象，要测试它，不是替换 http client 本身，就是要替换它背后的 http server。通过替换 http client 本身来测试，就是打桩测试；通过替换背后的 http server，就是模拟测试。打桩测试似乎更纯粹，因为只测试待测对象的逻辑，将依赖替换成简单的立刻反弹对象，从而避免代码走得过深，可能更适合单元测试。而模拟测试，则使用了真实的 http client，可能更适合端到端集成测试。<br />​\n\n![Untitled Diagram.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1622786127716-655ae3fb-a4fa-4650-8030-d1c99dc5b490.png#height=321&id=rN5Wm&margin=%5Bobject%20Object%5D&name=Untitled%20Diagram.png&originHeight=321&originWidth=561&originalType=binary&size=51482&status=done&style=none&width=561)<br />\n<br />还有个偏题的小感悟：写 java 果然很累，原因是为了满足静态类型的要求，不得不写很多填充型的代码。当然 Mockito 可以缓解，IDE 的自动填充也可以缓解，但是仍然有点累！\n"
  },
  {
    "id": 46500870,
    "title": "基于微服务的事件驱动系统的架构考量",
    "description": "意译自：https://developer.ibm.com/depmodels/microservices/articles/eda-and-microservices-architecture-best-practices/使用这两种架构风格构建分布式、高扩展性和高可用、具有容错性和弹性的系...",
    "custom_description": null,
    "updated_at": "2021-06-23T04:20:08.000Z",
    "created_at": "2021-06-23T04:20:08.000Z",
    "slug": "bmtrcf",
    "word_count": 8844,
    "cover": "https://cdn.nlark.com/yuque/0/2021/jpeg/221736/1623117004781-9fa90225-0849-4778-9994-0fcd838b5af6.jpeg",
    "body": "意译自：[https://developer.ibm.com/depmodels/microservices/articles/eda-and-microservices-architecture-best-practices/](https://developer.ibm.com/depmodels/microservices/articles/eda-and-microservices-architecture-best-practices/)\n> 使用这两种架构风格构建分布式、高扩展性和高可用、具有容错性和弹性的系统。\n\n<a name=\"I46up\"></a>\n# \n<a name=\"pZMP8\"></a>\n# 概念科普\n​\n\n首先，有必要搞清楚高可用和容错（以及灾难恢复，因为后面会聊到系统的可恢复性）的概念：\n\n| **术语** | **解释** | **可视化** |\n| --- | --- | --- |\n| 容错 | 容错解决方案有能力在一个或者多个组件发生故障的情况下**保持系统不中断的运行**。 | ![translated (1).jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/221736/1623117004781-9fa90225-0849-4778-9994-0fcd838b5af6.jpeg#clientId=u3d7afc81-656b-4&from=ui&id=ucebf645d&margin=%5Bobject%20Object%5D&name=translated%20%281%29.jpg&originHeight=263&originWidth=400&originalType=binary∶=1&size=81741&status=done&style=none&taskId=u72a5741b-944b-4916-8da8-54063843894) |\n| 高可用 | 高可用设计**并不保证不中断**，这是容错设计要做的。高可用设计意味着**中断时间很短**，因为重新部署必要的组件非常快。 | ![translated (2).jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/221736/1623117033910-f1ead46f-2646-4b1f-a9cc-44a7b8fa9157.jpeg#clientId=u3d7afc81-656b-4&from=ui&id=uc4a137a0&margin=%5Bobject%20Object%5D&name=translated%20%282%29.jpg&originHeight=353&originWidth=288&originalType=binary∶=1&size=79479&status=done&style=none&taskId=u0cde910a-080e-4492-9d9e-4ebcf926ada) |\n| 灾难恢复 | 通过抛弃受损的部件来保护业务。好的灾难恢复方案就是从坏掉的基础设施中将业务的高价值数据和操作保留出来并有能力再次在新的基础设施中运行起来。**灾难恢复并不是保护基础设施，而是保护业务。** | ![translated (3).jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/221736/1624353374300-35a6be76-e576-4ff1-bb28-9e0f0aaf3666.jpeg#clientId=u7a7b7dc9-d56c-4&from=ui&id=u55587a28&margin=%5Bobject%20Object%5D&name=translated%20%283%29.jpg&originHeight=273&originWidth=384&originalType=binary∶=2&size=70027&status=done&style=none&taskId=u49ec6516-960a-4507-85a3-2037888bfee) |\n\n​\n\n<a name=\"MyFrD\"></a>\n# 背景\n\n\n今天的 IT 系统正在产生、收集以及处理前所未有的不断增加的数据。并且，他们正在应对高度复杂的处理流程（自动化的）并且往往要在跨越典型组织界限的系统和设备之间集成。同时，IT 系统被期望要开发得越来越快，而且要越来越便宜，同时需要具备高可用性、可扩展性以及弹性。\n\n\n要实现以上目标，开发者们正在采用诸如微服务架构和事件驱动架构的架构风格以及编程范式、以及 DevOps 等等。新的工具和框架正在被构建来帮助开发者们完成达到这些期望的交付。\n\n\n开发者们正在结合事件驱动架构（EDA）以及微服务架构风格来构建特别有扩展性、可用性、容错性、并发性以及易于开发和维护的系统。\n\n\n在这篇文章中，我将讨论当使用这两种架构风格来构建这样的系统时的架构特征、复杂性、关注点、主要的架构考量点以及最佳实践。虽然诸如 API、API 网关以及用户界面等等组件在架构上存在显著区别，但是本篇文章中我将仅仅聚焦在事件驱动微服务上。\n\n\n<a name=\"Ds7vw\"></a>\n# 事件驱动架构以及微服务架构的总览\n\n\n**事件驱动架构（EDA）**已经存在很长时间了。云、微服务、以及 serverless 编程范式和复杂的开发框架正在增加 EDA 在解决实时性关键业务问题的可应用性。诸如 Kafka、IBM Cloud Pak for Integration、以及 Lightbend 等技术和平台，和诸如 Spring Cloud Stream、Quarkus 以及 Camel 等开发框架都提供了对 EDA 开发的一等公民级别支持。EDA 也为流数据处理做了扩展，这对开发实时人工智能或者机器学习解决方案来说是必备的。文章《事件驱动架构进阶》定义了什么是 EDA 并且解释了为什么开发者应该使用它。\n\n\n**微服务架构**在将单体应用使用领域驱动设计拆分成自包含、独立部署的服务的转型项目中被广泛接纳和使用。Martin Fowler 和 James Lewis 的一篇文章对微服务架构及其特性做了很好的介绍。微服务可以暴露 API 并且拥有生产和消费事件的界面来和 EDA 做无缝地集成。它的很多特性都非常适合与 EDA 结合。《微服务架构风格的挑战和好处》一文中讨论了开发者们在实现微服务时面临的挑战。\n\n\n以下表格显示了两种架构风格的互补：\n\n\n\n| EDA | 微服务架构 |\n| --- | --- |\n| 组件/服务间低耦合 | 捆绑上下文来提供关注点分离 |\n| 有能力对组件进行独立伸缩 | 独立部署和扩展 |\n| 处理组件可以各自独立开发 | 支持多种语言开发 |\n| 高度云倾向 | 云原生 |\n| 异步本质。并且有能力调控负载 | 弹性扩展 |\n| 容错以及更好的弹性 | 可见性好、故障检测迅速 |\n| 有能力构建处理流水线 | 演进的本质 |\n| 拥有复杂事件代理的能力，降低了代码复杂性 | 一套标准可复用的技术服务，通常被称为微服务底座 |\n| 拥有丰富的被证明了的企业集成模式 | 提供丰富的可复用的实现模式的代码仓库 |\n\n通过结合这两种架构风格，开发者们可以构建分布式的、高度可伸缩的、高可用的、具有容错性的、以及可扩展的系统。这些系统可以消费、处理、聚合或者关联非常大量的实时性事件或者信息。开发者们可以通过使用工业级标准的开源框架以及云平台来轻松地扩展并且增强这些系统。\n\n\n架构问题和复杂性\n\n\n通过结合 EDA 和微服务架构风格，开发者们能够轻松地达到很高的非功能性质量要求比如性能、可伸缩性、可用性、弹性，而且还能简化开发。但是这两种架构风格也带来了一些主要的问题。\n\n\n这些问题包括：\n\n\n- 非常多数量的分布式独立部署的组件或者服务，带来了如下问题：\n   - 设计与实现的复杂度。理解并调试这样的系统很困难。事件处理工作流不直观，需要文档化。\n   - 多重单点故障。测试、调试以及异常处理的复杂度都增加了。\n   - 发布流程、部署以及系统监控更加复杂了，而且需要更高水平的自动化。\n   - 从开发视角看，渴望实现的一致性、设计得到遵守以及实现有一定标准，但是往往存在多个开发团队，这可能导致实现上的不一致从而带来质量问题。从而开发一个架构参考，列出架构模式如何使用、开发框架、开发可复用的服务和工具、以及建立一个强健并有效的管理模型变得至关重要。\n- 异步事件处理相比同步处理更加困难，因为需要协调事件顺序、回调以及异常处理。\n- 丢失信息或者事件显然是不被期待的。所以，极高可用性、可伸缩性、以及容错能力的系统特别重要，这使得系统的设计和部署尤其复杂。事件的生产方和消费方必须要为失败而设计，必须拥有失败事件重放的能力，以及去重能力。\n- 维持数据的一致性。由于分布式的天然属性以及多个系统的记录，维持数据一致性非常复杂。多数情况下，由于缺少跨多个分布式系统的原子事务性，所以只能做到最终一致性。\n- 事件消费方和生产方必须考虑那些为事件中间人、数据缓存等等的特定于产品的属性。比如，送达保证这一因素就影响着生产者和消费者的设计。\n\n\n\n<a name=\"zlTYW\"></a>\n# EDA-微服务系统的架构蓝图\n下图是一个基于 EDA-微服务的企业架构图。一些微服务组件以及类型单独呈现以求更好的架构明晰度。\n![translated.jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/221736/1623035277806-d88431f8-2d79-4143-b6e3-b77b938e3f4e.jpeg#height=751&id=ucc292ed7&margin=%5Bobject%20Object%5D&name=translated.jpg&originHeight=751&originWidth=933&originalType=binary∶=1&size=469842&status=done&style=none&width=933)\n这个蓝图中涉及到的 EDA 和微服务相关组件有：\n\n- **事件骨干**。事件骨干主要负责传输、路由和时间序列化。它提供 API 处理时间流。事件骨干支持多种序列化格式并且对架构质量有着主要的影响，如容错、弹性伸缩、吞吐量等等。事件也可以存储起来用来创建事件存储。事件存储是恢复和弹性的关键架构模式。\n- **服务层**。服务层由微服务、集成和数据以及分析服务组成。这些服务通过不同的接口暴露其功能，包括 REST API、UI 和 EDA 事件生产者和消费者。服务层也包含针对 EDA 特定的横切关注点的服务，比如编排服务、流数据处理服务等等。\n- **数据层**。数据层通常由两个子层组成。在这个蓝图里，没有展示微服务独立的数据库。\n   - 缓存层，提供分布式的内存数据缓存或者网格来改进性能并且支持诸如 CQRS 这样的模式。这是水平可伸缩的并且可以做到一定程度的复制以及持久化以保持弹性。\n   - 大数据层，由数据仓库、ODS、数据集市、AI/ML 模型处理组成。\n- **微服务底座**。微服务底座提供必要的技术和横切面服务给到系统不同的层。它提供开发和运行时能力。通过使用微服务底座，你可以在减少设计和开发复杂度以及运维成本的同时增加对市场、交付质量以及对大量微服务的管理水平的时间投入。\n- **部署平台**：弹性、优化后的成本、安全以及对云平台的易用性都要被考虑到。开发者应该尽可能使用 PaaS 服务来减少运维和管理负担。该架构还应为混合云的建立预留资源，所以可以考虑像 Red Hat OpenShift 这样的平台。\n<a name=\"L7aJs\"></a>\n# \n<a name=\"AER5p\"></a>\n# 架构的主要考量点\n\n\n架构的考量点会影响系统的实际架构，它们对做架构决定有着指导作用，并且对系统的非功能性特性有主要的影响。如下的架构考量对基于事件驱动的微服务系统尤其重要：\n\n\n- 架构模式\n- 技术栈\n- 事件模型\n- 处理器的拓扑结构\n- 部署的拓扑结构\n- 异常处理\n- 利用事件骨干的能力\n- 安全\n- 可观测性\n- 容错和响应\n\n\n\n<a name=\"uQKJO\"></a>\n## 架构模式\n\n\n选择架构和集成模式是事件驱动的微服务系统的非常重要的架构考量。它们提供了被证明过和被测试过的解决方案以大量的符合期望的架构质量。在开发事件驱动的基于微服务的系统中，如下的架构模式尤其有用：\n\n\n- 管道与过滤器\n- 分阶段的事件驱动架构（SEDA）\n- 事件溯源\n- 命令查询职责分离（CQRS）\n- SAGA\n- 流处理\n- 微服务底座\n- 死信队列（DLQ）\n\n\n\n另外很多企业集成模式和微服务模式提供了事件驱动的基于微服务的系统的基础成分。\n\n\n应该根据需求和系统期望的架构质量来进行模式的选择。\n\n\n<a name=\"diVnG\"></a>\n## 技术栈\n\n\n诸如时间代理、数据缓存或者网格、微服务框架、安全机制、分布式数据库、监控系统和告警系统这样的组件形成了事件驱动的基于微服务的系统的技术骨干。该骨干为关键的架构质量（性能、可用性、可靠性、运维成本、容错性等）提供支持，并且简化了开发。它还影响着几个设计和开发的决策。\n\n\n当你选择技术战时，要考虑这些特性：\n\n\n- 单个组件的**水平伸缩能力**。伸缩能力不应该牺牲可用性。就是说添加节点不需要宕机。\n- 但个组件的**高可用**。选择的产品或者框架要支持将跨不同可用区或者地理区域的成员集群、支持滚动更新、支持数据复制以及容错，即集群在节点丢失后可以重新平衡自己。\n- **云亲和性**，即部署到云上非常容易。事实上，如果可以在 PaaS 平台用作服务那么更好，这是因为减少了管理和运维负担。支持容器化是必须项。\n- **低运维成本**，即应该能够运行在廉价的硬件上，节约对于 CPU、内存和存储的使用。\n- **可配置性**以及不宕机微调行为和非功能特性的能力。\n- **可管理性**。\n- 要避免**厂商绑定**。选择基于开放标准或者开源的产品。当挑选开源产品时，考虑产品被使用的广度，是否拥有繁荣的开发者社区，并且需要开放的许可证，不能太多约束（比如 Apache License V2.0）。\n- 对事件代理和开发框架来说，应该支持：\n   - 多序列化格式（JSON、AVRO、Protobuf 等）\n   - 异常处理以及死信队列（DLQ）\n   - 流处理（包括对聚合、联合以及窗口的支持）\n   - 分区和事件顺序的保持\n- 最好有**响应式编程**支持\n- 事件骨干最好有**多语言编程**支持\n\n\n\n下面的表格列出了不同组件流行的选型：\n\n\n\n| 组件类型 | 选型 |\n| --- | --- |\n| 事件骨干 | Apache Kafka、诸如 IBM cloud pak for integration、Lightbend 这样的集成平台、AWS Eventbridge + Kinesis |\n| 微服务开发框架 | 像 Spring Boot、Spring Cloud Stream 这样的 Spring frameworks，以及 Quarkus 和 Apache Camel |\n| 数据缓存/网格 | Apache Ignite、Redis、Ehcache、Elasticsearch 和 Hazelcast |\n| 可观测性 | Prometheus + Grafana、ELK、StatsD + Graphite、Sysdig、AppDynamics、Datadog |\n\n\n\n<a name=\"QzeSg\"></a>\n## 事件建模\n\n<br />事件建模包括定义事件类型、事件层级结构、事件元数据和负载格式。以下事件建模特性需要仔细斟酌：<br />\n\n- **事件类型**。在一个企业级系统中，多个业务领域相互消费和生产不同类型的事件。建模的重要方面之一是识别事件的类型和事件本身。使用诸如事件风暴以及事件溯源这样的领域驱动设计和实践来对事件进行识别和分类。事件类型可以是天然的层次化结构，从而帮助形成一个分层的事件处理形式。定义涵盖所有业务需求的事件类型和事件后需要将他们映射到不同的业务流程或者工作流中。事件类型的粒度对避免在组件中产生紧耦合至关重要。事件的类型是定义路由规则的关键点。\n- **事件模式**。事件模式包括事件元数据（比如类型、事件、源系统等等）和负载（即信息载体），由事件处理器处理。事件类型典型的用途是路由。事件元数据的典型用途是事件关联与排序，但也可以用作为审计和授权目的。负载影响队列的大小、主题和事件存储、网络性能、（反）序列化性能以及资源利用率。要避免重复内容。只要需要应当总是允许通过重放事件来重新生成状态。\n- **版本控制。**需求与实现总是随着时间不断演进，这通常会影响事件模型，而对事件模型的改变又可能会影响太多的微服务，但是同时更新所有被影响到的微服务不太现实。所以，事件模型需要支持多个版本并且保证向后兼容从而不同的微服务可以在自己方便的时刻更新。同时，通过给负载添加新的属性而不是直接更改现有属性是一个好的做法（废弃，而非更改）。版本控制和序列化格式彼此独立。\n- **序列化格式。**可以用来编码事件及其负载的序列化格式有多种，比如 JSON、protobuf 和 Apache Avro。这里模式演进支持、（反）序列化性能和序列化大小需要重点考虑。虽然 JSON 由于人类可读性友好从而便于开发和调试，但是 JSON 性能并不好，并且导致事件存储需求变大。Avro 或者 Protobuf 不仅减小了存储需求，还更快，并且支持模式演进，只是需要额外的设计和开发负担。\n- **分区。**事件的分区对于增加并发度、可伸缩性以及可用性至关重要。分区还是事件排序的关键影响因素。从架构角度上说，选取分区主键尤为重要。太粗粒度的主键影响可伸缩性和并发度。非常细粒度的主键可能对事件保序没有太多帮助。在诸如 Kafka 这样的事件代理中，分区和事件消费者的可伸缩性是绑定在一起的。\n- **排序。**一些事件可能需要基于它们的到达时间来排序（至少对给定的实体来说）。比如，对于给定的账号，该账号的交易流水需要按序得到处理。识别那些事件需要排序很重要。因为排序对性能和吞吐量有影响，所以事件排序只应该用在必要的场合。在 Apache Kafka 中，事件排序和分区直接相关。\n- **事件耐久性。**耐久性是指事件在队列或者主题中存在多长的可用时间。比如，要不要在消费事件后立即删除它？要不要删除那些超过了配置好的保持时间的事件，以及要不要删除被显式标记为死信的事件（比如 Kafka 中的 tombstones）？这些都应该基于需求做相关配置。当使用基于时间的保持性时，需要考虑到事件需要为重放保持多久？而当使用事件存储模式时，则需要额外考虑对于相同的事件或者负载需要保持多少个版本？像 Kafka 这样的事件代理为指定事件的持久性提供了不同的配置选项，可以在主题级别进行设置。\n\n\n\n<a name=\"HpZhI\"></a>\n## 事件处理拓扑\n\n<br />EDA 中的处理拓扑是指生产者、消费者、企业集成模式、以及主题和提供事件处理能力的队列的组织结构。他们基本上是事件处理流水线，部分职能逻辑（处理器）使用企业集成模式和队列以及主题联合在一起。处理拓扑是 SEDA、EIP 以及管道和过滤器模式的组合。复杂的事件处理需要多个能够连接在一起的处理拓扑。<br />\n<br />处理拓扑中的另一个关键概念是**编排还是编舞**。编排指一个中心编排者通过调用不同组件来编排处理工作流，需要严格控制处理过程，比如在支付处理时会选择编排模式。通常在 SAGA 模式被应用时需要编排。编排存在性能和可用性的权衡（因为编排者存在单点故障）。编舞是指完全去中心化的处理方式。也就是说，通过发布事件和感兴趣的组件去订阅主题的方式来处理。由于没有中心组件控制处理流，编舞在实现和维护上比较复杂。<br />\n<br />创建处理拓扑时考虑以下指导方针：<br />\n\n- 处理阶段（处理器）使用持久化的队列和主题连接。\n- 在每个队列和主题中配置分区主键和消息保持政策。\n- 处理粒度很重要。如果处理器粒度太细，则存在处理器间紧耦合的可能。理想上，每个处理器应该彼此逻辑独立。\n- 能够使用微服务实现处理器。这可以实现松耦合、职责分离、简化开发。\n- 处理并发度应能在处理器级别被配置。\n- 使用被验证过的企业集成模式（EIP）。采用内置 EIP 支持（如 Apache Camel 或者 Srping Cloud Stream）的开发框架。\n- 构建模块化和层次化的处理拓扑从而使得复杂的事件处理可以由简单处理流水线组装而来。这让实现模块化并且易于维护。\n- 如果处理器存在状态（随事件变化），考虑存储来备份状态从而增加容错性和可恢复性。\n\n\n<br />\n<br />诸如处理事件流和事件托管状态的架构实践可被用来设计处理拓扑。定义处理拓扑时能对时间代理能力有细致的理解是很好的。例如 Kafka 流提供了对定义事件流处理拓扑的一等公民级别的支持。Kafka 也自带对事件流执行聚合和联结操作时状态存储支持。<br />\n<br />下图摘取了一个处理拓扑的蓝图。<br />\n<br />![translated (4).jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/221736/1624354334603-5f93a410-e5d2-4684-92ab-8677720e236c.jpeg#height=432&id=u547743ef&margin=%5Bobject%20Object%5D&name=translated%20%284%29.jpg&originHeight=432&originWidth=990&originalType=binary∶=1&size=239772&status=done&style=none&width=990)<br />\n<br />下图是简化的线上购物订单处理拓扑。路由器拥有动态路由事件到多个主题的能力。需要注意事件处理器还要拥有“事件过滤器”来根据上下文控制事件的消费和生产。<br />\n<br />![translated (5).jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/221736/1624354570350-1d6200d3-58b7-4517-9c67-35bbfa43ce5f.jpeg#height=354&id=uf940c2a8&margin=%5Bobject%20Object%5D&name=translated%20%285%29.jpg&originHeight=354&originWidth=830&originalType=binary∶=1&size=185180&status=done&style=none&width=830)<br />\n\n<a name=\"nuqxa\"></a>\n## 部署拓扑\n\n<br />在 EDA-微服务架构下，要部署的组件特别多。应选择能够满足架构需求的部署拓扑，这些需求与可伸缩性、可用性、弹性、安全性以及成本相关。但是，在冗余、性能和成本间需要做出权衡和取舍。部署到云让架构更加高性能、更有弹性和更有性价比。需要充分利用云部署提供的能力（比如 Kubernetes 里的高可用性）。<br />\n<br />你的部署拓扑应该考虑这些关键原则：<br />\n\n- 每个部署组件应该可以独立伸缩和部署为集群来增加并发度和弹性。\n- 保证每个集群分布在多个可用区。这样的安排提供了更好的韧性以防万一数据中心出现故障。这样做的额外好处是不存在被动的灾难恢复，而是用跨不同可用区/地域的多活部署代替。\n- 复制因子决定了一个事件或者信息的副本数。没有复制，单实例故障（尽管是集群）会导致数据丢失。这对于事件代理和数据库尤其重要。但是，复制增加了计算和存储成本。复制应该基于像可用区、数据地域、节点数量等因子来建立。\n- 如果使用 Kafka，主题分区数量是消费者并发的上限。\n- 工作负载调节。配置线程池和消费者以及生产者的数量来调节吞吐量。这些参数要取决于下游处理器的容量和吞吐量做调整。\n- 数据压缩。依据组织的安全标准，配置事件代理、生产者和消费者（以及数据库）间的 TLS，认证和授权。要注意开启 TLS 会增加 CPU 的使用率。\n\n\n<br />另外，对自动化部署、自动故障转移、滚动更新或者蓝绿部署、以及使得部署物的环境彼此独立的配置外部化的支持很重要。<br />\n\n<a name=\"npjrc\"></a>\n## 异常处理策略\n\n<br />拥有完整和一致的异常处理策略对提高 EDA 的韧性很重要。异常处理策略包含下面所有或者其中一些点：<br />\n\n- 记录异常日志\n- 以指定的重试间隔重试事件指定的次数\n- 耗尽重试次数后移动事件到死信队列（或者停止对事件的处理）\n- 告警\n- 在某些情况下生成一个事件\n- 纠正异常根因并重放事件\n\n\n<br />异常有两种：业务异常和系统异常。当校验或者业务条件失败抛出的是业务异常。系统异常是由组件失败（如数据库、事件代理、或者其他微服务等）或者资源问题（如内存耗尽错误）、网络或者传输相关问题（如负载序列化、反序列化错误）、未期待的故障代码（如空指针异常或者类型转换异常）引起的一个广泛的故障类别。<br />\n<br />处理不同类型的异常存在显著差别。下面列出了一些异常处理机制：<br />\n\n- 预期中的业务异常通常由代码处理。处理包括记录异常日志、更新实体和状态、生成异常事件、或者消费异常并继续。\n- 由无效负载引起的异常（包括序列化、反序列化问题）无法用重试解决。这些事件在 Kafka 中被喻为毒药丸（因为它阻碍了分区中接下来的消息流）。这种事件需要被打断。建议把它们移到死信队列（DLQ）中。DLQ 的消费者可以纠正它们并重放事件。\n- 由于组件不可用会天然导致系统异常。所以，需要配置多次重试机制。另一个关键配置参数是退避乘数。它用来在连续的两次重试中指数式增加时间间隔。对于重试仍然有错的情况不同框架有不同策略。如 Camel 会把事件移到 DLQ。Kafka 流会停止处理。在这样的场景下推荐使用框架的默认行为。\n- 资源问题（如内存耗尽错误）通常在组件级别并且会导致组件不可用。由于事件代理的天然容错机制，丢失事件的风险被最小化。当部署在 Kubernetes 环境时，新的 pod 会启动替换掉故障 pod｡\n- 当数据一致性非常重要并且处理过程涉及到多个微服务时可以使用 SAGA 模式。当数据一致性需求非常严格时可采用 SAGA 模式。\n- 从最开始就要考虑恢复和重放机制而不能做事后诸葛（事后会变得异常复杂）。恢复和重放组件通常定制开发并且基于事件处理过程有所区别。最简单的重放组件可能只需要将失败事件重新发布到输入主题中。\n\n​\n\n开发框架应该拥有跨所有微服务的一致异常处理策略。它应该提供一系列预先定义好的业务异常类以及提供一个通用的可由配置定制化的异常处理器，但不应该强制异常处理相关的架构决策。多数开发框架都提供了这些支持。但是它们需要配置正确或者扩展后才能提供必要的特性。<br />​<br />\n<a name=\"gMeP4\"></a>\n## 事件骨干的能力和限制\n​\n\n不同事件骨干产品或者平台提供的架构质量支持是不同的。同时，它们在设计和架构上引入了限制。当定义架构时，需要考虑它们的能力和限制以最有效地满足非功能性需求。比如，以下是 Kafka 的几条重要能力和限制：<br />​<br />\n\n- Kafka 提供基于分区主键的事件排序支持。它也保证一个分区只有一个监听消费者（线程）。这让它非常易于通过选择合适的分区主键排序事件。比如，当 OrderId 用作分区主键时，可以保证所有和特定订单的事件依照它们到达的顺序得到处理。\n- Kafka 支持生产者的幂等性。这意味着 Kafka 保证了一个生产者只会生成同一事件一次。开发者不需要关心这个。\n- Kafka 提供最少一次交付保证。这意味着消费者可以消费重复消息。\n- Kafka 另一个重要的方面是为消费者提供的偏移提交功能，这意味着事件是否需要自动或者手动确认。如果启用了自动提交，事件出现的错误可能会丢失（如果异常被吞掉的话）或者消费者可能看到重复消息。手动提交可能可以解决这个问题，但是需要额外的代码。诸如 Spring-cloud-stream 这样的框架可以和 Kafka 无缝对接工作，提供了错误产生时非自动提交的选项，也可以在自动/手动提交的基础上移动失败事件到 DLQ。在设计中这需要重点考量。\n- Kafka 流提供了处理事件流的能力，在事件流上可以容易地执行不同的高级复杂操作，如聚合和联结等。这让执行实时分析非常容易。比如，计算事件按照不同维度分组的统计量只需要很小的代码量。这是有状态的操作并且需要维护状态。Kafka 也通过状态存储提供自动容错。\n\n​<br />\n<a name=\"hsMDb\"></a>\n## 安全性\n​\n\n在 EDA-微服务架构中开发者必须考虑这些安全方面上的因素。<br />\n\n- 传输级别安全\n- 事件生产和消费的认证和授权访问\n- 事件处理的审计追踪\n- 数据安全（如认证访问和加密存储）\n- 消除代码中易受攻击的部分\n- 周边安全设备和模式\n\n​<br />\n<a name=\"jehHa\"></a>\n## 可观测性\n​\n\n可观测性包括监控、日志、追踪和告警。系统的每个组件都应该易于观察来避免故障以及快速从故障中恢复。<br />​\n\n大多数 EDA 产品和开发框架都通过发布可以导入到工业级标准观测工具（如 Prometheus 和 Grafana、ELK、StasD 和 Graphite、Splunk 或者 AppDynamics）的指标值为可观测性提供支持。比如，Apache Kafka 提供了详细的指标可用来导入和集成到多数工具中。并且，为事件骨干提供托管服务的云平台（IBM Event Streams）给可观测性提供一等公民级别支持。诸如 Spring 或者 Camel 这样的微服务开发框架为监控的代码安装提供了良好的支持。<br />​\n\n从 EDA 角度来看，为发布指标而设置生产者和消费者代码，发布事件代理指标以及通过指标仪表盘关联它们是非常关键的，因为 EDA 中的分布式组建数量特别多。从 EDA 的角度，关注的一些关键指标是消息的入出比，消费延迟、网络延迟和主题大小等等。<br />​\n\n对微服务的监控，可以参考另外的专门文章以获取详细指导。<br />​<br />\n<a name=\"Jp5t1\"></a>\n## 容错和响应\n\n<br />要提供足够的**容错能力**，架构需要提供冗余、异常处理和弹性伸缩（当突破阈值时向上扩展，当负载回归到正常水平向下缩容）。多数 EDA 和云很容易做到这点。事件骨干通过支持队列和主题的分区和复制来实现容错。生产者和消费者能够拥有多个部署的实例。在 Kubernetes 平台上进行容器化部署，弹性伸缩可以通过自动伸缩（使用 pod 的水平自动伸缩器）很容易地实现， 但是异常处理需要为生产者和消费者特别设计。<br />​\n\n尽管基于 EDA 的系统通过分阶段的架构提供了韧性，为了避免延误和一致性问题，**快速故障响应和恢复**仍然至关重要。要实现快速恢复，需要：<br />​<br />\n\n- 自动化启动和停止实例、自动化重启故障实例。在基于 Kubernetes 的平台（比如 Red Hat OpenShift）这很容易配置。\n- 故障发生时进行告警、触发意外事件。\n- 良好定义的事件管理流程\n- 可用的日志和跨多个组件关联日志和追踪的能力。追踪需要在微服务中启用，可以使用如 Spring-sleuth 等的开发框架。日志聚合工具有 ELK、或者 Splunk。这将帮助团队定位根因并且快速解决问题。\n\n​<br />\n<a name=\"Yolcm\"></a>\n# 结论\n​\n\n开发者可以结合事件驱动架构和微服务架构风格来开发分布式、高可用、容错和高吞吐量的系统。这些系统可以处理大量信息并且特别易于扩展。但是，当构建这样的系统时，开发者必须考虑很多架构关注点以及复杂度，并且要做出关键的架构决策。本文讨论了关键的架构决策以及做这些决策时要考虑的因素。遵循这些指导，可以为实现预期的目标定义出强健的 EDA-微服务架构。\n"
  },
  {
    "id": 46417721,
    "title": "一次 Mac 微信的日志记录",
    "description": "Last login: Tue May 25 14:43:12 on ttys009 /Applications/WeChat.app/Contents/MacOS/WeChat ; exit; fatal: not a git repository (or any of the parent...",
    "custom_description": null,
    "updated_at": "2021-06-02T01:22:34.000Z",
    "created_at": "2021-06-02T01:22:34.000Z",
    "slug": "ng5tni",
    "word_count": 31014,
    "cover": null,
    "body": "```shell\nLast login: Tue May 25 14:43:12 on ttys009\n/Applications/WeChat.app/Contents/MacOS/WeChat ; exit;\nfatal: not a git repository (or any of the parent directories): .git\n\n~ \n➜ /Applications/WeChat.app/Contents/MacOS/WeChat ; exit;\nobjc[50323]: Class AFHTTPSessionManager is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383008) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b02d38). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFNetworkReachabilityManager is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107382f68) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b02dd8). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFSecurityPolicy is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107382fb8) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b02e28). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFQueryStringPair is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383148) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b02e78). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFHTTPRequestSerializer is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383198) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b02ec8). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFStreamingMultipartFormData is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x1073831c0) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b02ef0). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFMultipartBodyStream is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383210) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b02f40). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFHTTPBodyPart is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383238) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b02f68). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFJSONRequestSerializer is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x1073832d8) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b03008). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFPropertyListRequestSerializer is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383328) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b03058). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFHTTPResponseSerializer is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383378) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b030a8). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFJSONResponseSerializer is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x1073833c8) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b030f8). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFXMLParserResponseSerializer is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383418) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b03148). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFXMLDocumentResponseSerializer is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383468) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b03198). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFPropertyListResponseSerializer is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x1073834b8) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b031e8). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFImageResponseSerializer is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383508) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b03238). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFCompoundResponseSerializer is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383558) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b03288). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFURLSessionManagerTaskDelegate is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383058) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b032d8). One of the two will be used. Which one is undefined.\nobjc[50323]: Class _AFURLSessionTaskSwizzling is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x1073830d0) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b03350). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFURLSessionManager is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x1073830f8) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b03378). One of the two will be used. Which one is undefined.\nobjc[50323]: Class MarsReachability is implemented in both /Applications/WeChat.app/Contents/Frameworks/matrixreport.framework/Versions/A/matrixreport (0x1074607b8) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b0bfe8). One of the two will be used. Which one is undefined.\n2021-05-25 18:04:07.452 WeChat[50323:8889328] Event: kMMLoginEventUseOneClickLogin, from state: stateStart to state: stateShowingOneClick\n[WCDB]Code:283, Type:SQLiteGlobal, Msg:recovered 12 frames from WAL file /Users/cnjeftia/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/9505a027381d29abc18274656ac20813/KvConfig/kv_config.d\n2021-05-25 18:04:09.980 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:04:09.980 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:04:09.980 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:04:09.981 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:04:09.981 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:04:09.981 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:04:10.000 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:04:10.000 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:04:10.000 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:04:10.520 WeChat[50323:8889328] Event: kMMLoginEventOneClickRequestSent, from state: stateShowingOneClick to state: stateWaittingConfirm\n2021-05-25 18:04:19.410 WeChat[50323:8889328] Event: kMMLoginEventOneClickRequestConfirmed, from state: stateWaittingConfirm to state: stateLoggingIn\n<CFData 0x7fa908817dc0 [0x7fff806abb70]>{length = 6, capacity = 6, bytes = 0x88665a26aa4d}\n2021-05-25 18:04:20.291 WeChat[50323:8889328] <MMSplitView: 0x7fa90eb2ae40>: the delegate <MMMainViewController: 0x7fa90dea2410> was sent -splitView:resizeSubviewsWithOldSize: and left the arranged view frames in an inconsistent state:\n2021-05-25 18:04:20.291 WeChat[50323:8889328] Split view bounds: {{0, 0}, {1284, 815}}\n2021-05-25 18:04:20.291 WeChat[50323:8889328]     Arranged view frame: {{0, 0}, {269, 815}}\n2021-05-25 18:04:20.291 WeChat[50323:8889328]     Arranged view frame: {{270, 0}, {1015, 815}}\n2021-05-25 18:04:20.291 WeChat[50323:8889328] The outer edges of the arranged view frames are supposed to line up with the split view's bounds' edges. NSSplitView is working around the problem, perhaps at the cost of more redrawing. (This message is only logged once per NSSplitView.)\n<CFData 0x7fa90debc060 [0x7fff806abb70]>{length = 6, capacity = 6, bytes = 0x88665a26aa4d}\n[SQLITERK_OK] Saved master info with 157 entries.\n[SQLITERK_OK] Saved master info with 111 entries.\n[SQLITERK_OK] Saved master info with 115 entries.\n2021-05-25 18:04:22.030 WeChat[50323:8889869] -[MMPinyinCacheInfo encodeWithCoder:]: unrecognized selector sent to instance 0x7fa90f9fb110\n2021-05-25 18:04:22.044 WeChat[50323:8889869] *** -[NSKeyedArchiver dealloc]: warning: NSKeyedArchiver deallocated without having had -finishEncoding called on it.\n2021-05-25 18:04:22.595 WeChat[50323:8889328] Warning: Expected min height of view: (<NSPopoverTouchBarItemButton: 0x7fa90f7872d0>) to be less than or equal to 30 but got a height of 32.000000. This error will be logged once per view in violation.\n[SQLITERK_OK] Saved master info with 117 entries.\n[SQLITERK_OK] Saved master info with 125 entries.\n[SQLITERK_OK] Saved master info with 137 entries.\n[SQLITERK_OK] Saved master info with 163 entries.\n[SQLITERK_OK] Saved master info with 109 entries.\n[SQLITERK_OK] Saved master info with 135 entries.\n[SQLITERK_OK] Saved master info with 85 entries.\n2021-05-25 18:04:24.164 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:04:24.164 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:04:24.164 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:04:24.164 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:04:24.164 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:04:24.164 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:04:24.413 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:04:24.413 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:04:24.413 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:04:24.413 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:04:24.413 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:04:24.413 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:05:27.969 WeChat[50323:8889328] Alive 5\n2021-05-25 18:07:07.992 WeChat[50323:8889328] Alive 10\n2021-05-25 18:08:14.296 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:08:14.296 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:08:14.296 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:08:14.302 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:08:14.302 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:08:14.302 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:08:48.023 WeChat[50323:8889328] Alive 15\n2021-05-25 18:08:57.868 WeChat[50323:8889328] Warning: Expected min height of view: (<NSButton: 0x7fa90fc3ed70>) to be less than or equal to 30 but got a height of 32.000000. This error will be logged once per view in violation.\n2021-05-25 18:08:57.872 WeChat[50323:8889328] Warning: Expected min height of view: (<NSButton: 0x7fa90f8081d0>) to be less than or equal to 30 but got a height of 32.000000. This error will be logged once per view in violation.\n2021-05-25 18:09:02.758 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:09:02.758 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:09:02.758 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:09:02.759 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:09:02.759 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:09:02.759 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:09:05.943 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:09:05.943 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:09:05.943 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:09:05.944 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:09:05.944 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:09:05.944 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:09:25.879 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:09:25.879 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:09:25.879 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:09:25.880 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:09:25.880 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:09:25.880 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:09:28.874 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90f8693a0> -[JTCaptureRequest init]\n2021-05-25 18:09:28.875 WeChat[50323:8889328] <JTCaptureManager: 0x7fa9067611b0> -[JTCaptureManager init]\n2021-05-25 18:09:28.911 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa912127bf0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-25 18:09:28.957 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa912127bf0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-25 18:09:28.964 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f4c4780> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-25 18:09:28.979 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9120fa7c0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-25 18:09:29.001 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9120fa7c0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-25 18:09:29.007 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa911d18600> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-25 18:09:29.171 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:09:29.171 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:09:29.171 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:09:29.171 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:09:29.171 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:09:29.171 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:09:37.607 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa9121a2f80> -[JTToolbarView configAppearanceAndLayout]\n2021-05-25 18:09:37.622 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa91228d7e0> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-25 18:09:43.657 WeChat[50323:8889328] <JTPopoverView: 0x7fa91335ab60> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:09:43.661 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91327b7f0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:09:43.668 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa90ebc11b0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-25 18:09:43.668 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa90eb116d0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-25 18:09:43.668 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa90f48eff0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-25 18:09:43.668 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9132bb390> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:09:43.671 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa911fc4bd0> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-25 18:09:43.673 WeChat[50323:8889328] <JTPopoverView: 0x7fa91335ab60> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:09:43.674 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9132bb390> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:09:43.676 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91327b7f0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:09:45.726 WeChat[50323:8889328] <JTPopoverView: 0x7fa91335ab60> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:09:45.728 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9132bb390> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:09:45.730 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91327b7f0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:09:45.739 WeChat[50323:8889328] <JTPopoverView: 0x7fa91335ab60> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:09:45.740 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9132bb390> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:09:45.742 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91327b7f0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:09:51.439 WeChat[50323:8889328] <JTPopoverView: 0x7fa91335ab60> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:09:51.440 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9132bb390> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:09:51.442 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91327b7f0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:09:52.817 WeChat[50323:8889328] <JTPopoverView: 0x7fa91335ab60> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:09:52.818 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9132bb390> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:09:52.819 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91327b7f0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:09:52.826 WeChat[50323:8889328] <JTPopoverView: 0x7fa91335ab60> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:09:52.827 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9132bb390> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:09:52.828 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91327b7f0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:09:54.961 WeChat[50323:8889328] <JTCaptureManager: 0x7fa9067611b0> -[JTCaptureManager dealloc]\n2021-05-25 18:09:54.961 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90f8693a0> -[JTCaptureRequest dealloc]\n2021-05-25 18:09:54.961 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa911d18600> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-25 18:09:54.961 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9120fa7c0> -[JTCaptureViewController dealloc]\n2021-05-25 18:09:54.964 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f4c4780> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-25 18:09:54.964 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa912127bf0> -[JTCaptureViewController dealloc]\n2021-05-25 18:09:54.966 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa91228d7e0> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-25 18:09:54.971 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa911fc4bd0> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-25 18:10:13.772 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90dc0a380> -[JTCaptureRequest init]\n2021-05-25 18:10:13.772 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90dc52b90> -[JTCaptureManager init]\n2021-05-25 18:10:13.788 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa910e946e0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-25 18:10:13.831 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa910e946e0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-25 18:10:13.835 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f136ed0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-25 18:10:13.849 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9120fa7c0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-25 18:10:13.872 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9120fa7c0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-25 18:10:13.876 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa911f2b280> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-25 18:10:13.981 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:10:13.981 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:10:13.981 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:10:13.981 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:10:13.981 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:10:13.982 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:10:16.786 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:10:16.786 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:10:16.786 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:10:16.786 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:10:16.786 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:10:16.786 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:10:18.261 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa912126e70> -[JTToolbarView configAppearanceAndLayout]\n2021-05-25 18:10:18.273 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa9121c6760> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-25 18:10:20.935 WeChat[50323:8889328] <JTPopoverView: 0x7fa911a2e6d0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:10:20.938 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91275cfe0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:10:20.944 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa912129200> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-25 18:10:20.944 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa912128e90> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-25 18:10:20.944 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa90de7db80> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-25 18:10:20.944 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90f8e81a0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:10:20.946 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa90fac3790> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-25 18:10:20.949 WeChat[50323:8889328] <JTPopoverView: 0x7fa911a2e6d0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:10:20.950 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90f8e81a0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:10:20.951 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91275cfe0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:10:22.558 WeChat[50323:8889328] <JTPopoverView: 0x7fa911a2e6d0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:10:22.559 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90f8e81a0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:10:22.561 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91275cfe0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:10:22.568 WeChat[50323:8889328] <JTPopoverView: 0x7fa911a2e6d0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:10:22.569 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90f8e81a0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:10:22.571 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91275cfe0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:10:25.450 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90dc52b90> -[JTCaptureManager dealloc]\n2021-05-25 18:10:25.450 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90dc0a380> -[JTCaptureRequest dealloc]\n2021-05-25 18:10:25.451 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa911f2b280> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-25 18:10:25.451 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9120fa7c0> -[JTCaptureViewController dealloc]\n2021-05-25 18:10:25.454 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f136ed0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-25 18:10:25.454 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa910e946e0> -[JTCaptureViewController dealloc]\n2021-05-25 18:10:25.457 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa9121c6760> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-25 18:10:25.462 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa90fac3790> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-25 18:10:28.038 WeChat[50323:8889328] Alive 20\n2021-05-25 18:12:08.077 WeChat[50323:8889328] Alive 25\n2021-05-25 18:13:48.131 WeChat[50323:8889328] Alive 30\n2021-05-25 18:14:02.231 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:14:02.231 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:14:02.231 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:14:44.394 WeChat[50323:8889328] TSM AdjustCapsLockLEDForKeyTransitionHandling - _ISSetPhysicalKeyboardCapsLockLED Inhibit\n2021-05-25 18:14:52.367 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-25 18:15:15.756 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90f325910> -[JTCaptureRequest init]\n2021-05-25 18:15:15.757 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90f37d050> -[JTCaptureManager init]\n2021-05-25 18:15:15.777 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9148c60c0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-25 18:15:15.820 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9148c60c0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-25 18:15:15.824 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa912290700> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-25 18:15:15.857 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa912bfeb80> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-25 18:15:15.882 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa912bfeb80> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-25 18:15:15.886 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa914952740> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-25 18:15:16.018 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:15:16.018 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:15:16.018 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:15:16.018 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:15:16.018 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:15:16.018 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:15:23.598 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa914f46d40> -[JTToolbarView configAppearanceAndLayout]\n2021-05-25 18:15:23.609 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa9130b3150> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-25 18:15:28.141 WeChat[50323:8889328] Alive 35\n2021-05-25 18:15:34.128 WeChat[50323:8889328] <JTPopoverView: 0x7fa90f9138c0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:15:34.132 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90f193750> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:15:34.138 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa9148dbe20> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-25 18:15:34.138 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa91486d570> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-25 18:15:34.139 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa9148d5a10> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-25 18:15:34.139 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa914f31ed0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:15:34.141 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa90de4c9c0> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-25 18:15:34.143 WeChat[50323:8889328] <JTPopoverView: 0x7fa90f9138c0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:15:34.144 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa914f31ed0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:15:34.146 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90f193750> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:15:36.674 WeChat[50323:8889328] <JTPopoverView: 0x7fa90f9138c0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:15:36.675 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa914f31ed0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:15:36.677 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90f193750> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:15:36.684 WeChat[50323:8889328] <JTPopoverView: 0x7fa90f9138c0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:15:36.684 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa914f31ed0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:15:36.686 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90f193750> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:15:39.313 WeChat[50323:8889328] <JTPopoverView: 0x7fa90f9138c0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:15:39.314 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa914f31ed0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:15:39.316 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90f193750> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:15:39.327 WeChat[50323:8889328] <JTPopoverView: 0x7fa90f9138c0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:15:39.328 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa914f31ed0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:15:39.329 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90f193750> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:15:42.363 WeChat[50323:8889328] <JTPopoverView: 0x7fa90f9138c0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:15:42.364 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa914f31ed0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:15:42.366 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90f193750> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:15:42.379 WeChat[50323:8889328] <JTPopoverView: 0x7fa90f9138c0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:15:42.380 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa914f31ed0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:15:42.381 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90f193750> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:15:51.380 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90f37d050> -[JTCaptureManager dealloc]\n2021-05-25 18:15:51.380 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90f325910> -[JTCaptureRequest dealloc]\n2021-05-25 18:15:51.380 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa912290700> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-25 18:15:51.381 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9148c60c0> -[JTCaptureViewController dealloc]\n2021-05-25 18:15:51.383 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa914952740> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-25 18:15:51.383 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa912bfeb80> -[JTCaptureViewController dealloc]\n2021-05-25 18:15:51.384 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa9130b3150> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-25 18:15:51.387 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa90de4c9c0> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-25 18:17:08.154 WeChat[50323:8889328] Alive 40\n2021-05-25 18:18:48.175 WeChat[50323:8889328] Alive 45\n2021-05-25 18:20:28.188 WeChat[50323:8889328] Alive 50\n2021-05-25 18:22:08.199 WeChat[50323:8889328] Alive 55\n2021-05-25 18:23:48.203 WeChat[50323:8889328] Alive 60\n2021-05-25 18:25:28.219 WeChat[50323:8889328] Alive 65\n2021-05-25 18:27:08.239 WeChat[50323:8889328] Alive 70\n2021-05-25 18:28:48.263 WeChat[50323:8889328] Alive 75\n2021-05-25 18:30:28.275 WeChat[50323:8889328] Alive 80\n2021-05-25 18:32:08.293 WeChat[50323:8889328] Alive 85\n2021-05-25 18:33:48.307 WeChat[50323:8889328] Alive 90\n2021-05-25 18:35:28.324 WeChat[50323:8889328] Alive 95\n2021-05-25 18:37:08.342 WeChat[50323:8889328] Alive 100\n2021-05-25 18:38:48.338 WeChat[50323:8889328] Alive 105\n2021-05-25 18:40:12.037 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:40:12.037 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:40:12.037 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:40:28.356 WeChat[50323:8889328] Alive 110\n2021-05-25 18:42:08.375 WeChat[50323:8889328] Alive 115\n2021-05-25 18:43:48.388 WeChat[50323:8889328] Alive 120\n2021-05-25 18:45:28.405 WeChat[50323:8889328] Alive 125\n2021-05-25 18:47:08.426 WeChat[50323:8889328] Alive 130\n2021-05-25 18:48:48.435 WeChat[50323:8889328] Alive 135\n2021-05-25 18:50:28.448 WeChat[50323:8889328] Alive 140\n2021-05-25 18:52:08.466 WeChat[50323:8889328] Alive 145\n2021-05-25 18:53:48.528 WeChat[50323:8889328] Alive 150\n2021-05-25 18:55:28.932 WeChat[50323:8889328] Alive 155\n2021-05-25 18:57:08.564 WeChat[50323:8889328] Alive 160\n2021-05-25 18:58:48.577 WeChat[50323:8889328] Alive 165\n2021-05-25 19:00:28.600 WeChat[50323:8889328] Alive 170\n2021-05-25 19:02:08.615 WeChat[50323:8889328] Alive 175\n2021-05-25 19:03:48.631 WeChat[50323:8889328] Alive 180\n[SQLITERK_OK] Saved master info with 115 entries.\n2021-05-25 19:05:28.646 WeChat[50323:8889328] Alive 185\n2021-05-25 19:07:08.664 WeChat[50323:8889328] Alive 190\n2021-05-25 19:08:48.662 WeChat[50323:8889328] Alive 195\n2021-05-25 19:10:28.681 WeChat[50323:8889328] Alive 200\n2021-05-25 19:12:08.699 WeChat[50323:8889328] Alive 205\n2021-05-25 19:12:10.692 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 19:12:10.692 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 19:12:10.693 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 19:12:10.693 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 19:12:10.693 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 19:12:10.693 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 19:12:21.140 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 19:12:21.140 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 19:12:21.140 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 19:12:21.150 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 19:12:21.150 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 19:12:21.150 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 19:12:23.845 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"B8D894EC-8574-488F-B220-D5E665FBCBE6\\\"}\"\n)\n2021-05-25 19:12:24.490 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"setNavigationBarColor\\\",\\\"params\\\":{\\\"color\\\":\\\"#ffffff\\\",\\\"__context_key\\\":\\\"fb855a315ec06beb6539ca19fb31780f6e5cad45\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-05-25 19:12:24.491 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"setBounceBackground\\\",\\\"params\\\":{\\\"backgroundColor\\\":\\\"#ffffff\\\",\\\"footerBounceColor\\\":\\\"#f2f2f2\\\",\\\"__context_key\\\":\\\"fb855a315ec06beb6539ca19fb31780f6e5cad45\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1001\\\"}\"\n)\n2021-05-25 19:12:24.511 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"writeLog\\\",\\\"params\\\":{\\\"level\\\":\\\"info\\\",\\\"msg\\\":\\\"__wap__ wx config web compt result,wxOpen,{\\\\\\\"err_msg\\\\\\\":\\\\\\\"handleMPPageAction:fail_webcompt unsupported\\\\\\\"} location:[https://mp.weixin.qq.com/s?__biz=MzIwOTEzNzA2Nw==∣=2661720133&idx=1&sn=b0cf7fcd0919f550e5abc31090b40831&chksm=8c2a7c81bb5df597838a3bfc182dcbceaa47333fa5a0e51b7881d576fc64cb4fc33d41462254&scene=0&xtrack=1&key=89adbed35bcb3f2f4f86f003d19f5c6babdd05c2b45412970f5d3cd5e34b6e11ba470ab1b790a1540b76f48a1768ce25fdb093222ce2ba3e2e9b889a07048c8265776ad14ee589d0b3772e475ad749570127727daf2e98a72208709d5ae88237b414b58f9088c84148b0eda94dc4ba457c63ed01f177b5db498a6113baf7951f&ascene=1&uin=MzcxNTQ0NDAw&devicetype=iMac+MacBookPro16%2C1+OSX+OSX+10.16+build(20E241)&version=13000310&nettype=WIFI⟨=en&fontScale=100&exportkey=AhAAngJYzlaJQCgNRprHNfo%3D&pass_ticket=TH8A6TpJTCG3fbKZXIElYgvKLc7LNnSZy2NGCx9hvTuHJ1KTrMxODzWmODWULWKB&wx_header=0&fontgear=2.000000]\\\",\\\"__context_key\\\":\\\"fb855a315ec06beb6539ca19fb31780f6e5cad45\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1002\\\"}\"\n)\n2021-05-25 19:12:24.526 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"currentMpInfo\\\",\\\"params\\\":{\\\"userName\\\":\\\"gh_eeb49daa28c0\\\",\\\"brandName\\\":\\\"\\U7f8e\\U672f\\U540d\\U5e08\\\",\\\"title\\\":\\\"21\\U5c81\\U529e\\U4e2a\\U4eba\\U753b\\U5c55\\U4e00\\U591c\\U6210\\U540d\\Uff0c\\U5374\\U9003\\U79bb\\U8ffd\\U6367\\U5230\\U897f\\U85cf\\U753b\\U753b\\Uff0c8\\U5e74\\U540e\\U60ca\\U8273\\U4f17\\U4eba\\Uff01\\\",\\\"brandIcon\\\":\\\"http://wx.qlogo.cn/mmhead/Q3auHgzwzM6LzTibHlP2U1YHK8asnjJJ4oBgRMGWG4z6vR88JdSv22A/132\\\",\\\"topBarStyle\\\":0,\\\"topBarShowed\\\":false,\\\"isMenuShowBrandInfo\\\":1,\\\"cover\\\":\\\"https://mmbiz.qlogo.cn/mmbiz_jpg/6WEibP134ujOG2pV0cROMria6bGTJAawicx6Dl1YibEksFBVRDAibSN3LPVM6mhWY1RMhCZz7cibX5T47PPhsTAz9ZUg/0?wx_fmt=jpeg\\\",\\\"digest\\\":\\\"\\\",\\\"itemShowType\\\":\\\"0\\\",\\\"isPaySubscribe\\\":0,\\\"forbidForward\\\":0,\\\"__context_key\\\":\\\"fb855a315ec06beb6539ca19fb31780f6e5cad45\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1003\\\"}\"\n)\n2021-05-25 19:12:24.527 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"createWebViewForFastLoad\\\",\\\"params\\\":{\\\"scene\\\":1,\\\"__context_key\\\":\\\"fb855a315ec06beb6539ca19fb31780f6e5cad45\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1004\\\"}\"\n)\n2021-05-25 19:12:25.110 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"hideToolbar\\\",\\\"params\\\":{\\\"__context_key\\\":\\\"fb855a315ec06beb6539ca19fb31780f6e5cad45\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1005\\\"}\"\n)\n2021-05-25 19:12:25.110 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"showOptionMenu\\\",\\\"params\\\":{\\\"__context_key\\\":\\\"fb855a315ec06beb6539ca19fb31780f6e5cad45\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1006\\\"}\"\n)\n2021-05-25 19:12:25.173 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"getNetworkType\\\",\\\"params\\\":{\\\"__context_key\\\":\\\"fb855a315ec06beb6539ca19fb31780f6e5cad45\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1007\\\"}\"\n)\n2021-05-25 19:12:25.409 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"handleHaokanAction\\\",\\\"params\\\":{\\\"imgUrl\\\":\\\"http://wx.qlogo.cn/mmhead/Q3auHgzwzM6LzTibHlP2U1YHK8asnjJJ4oBgRMGWG4z6vR88JdSv22A/132\\\",\\\"link\\\":\\\"http://mp.weixin.qq.com/s?__biz=MzIwOTEzNzA2Nw==∣=2661720133&idx=1&sn=b0cf7fcd0919f550e5abc31090b40831&chksm=8c2a7c81bb5df597838a3bfc182dcbceaa47333fa5a0e51b7881d576fc64cb4fc33d41462254#rd\\\",\\\"desc\\\":\\\"\\\",\\\"title\\\":\\\"21\\U5c81\\U529e\\U4e2a\\U4eba\\U753b\\U5c55\\U4e00\\U591c\\U6210\\U540d\\Uff0c\\U5374\\U9003\\U79bb\\U8ffd\\U6367\\U5230\\U897f\\U85cf\\U753b\\U753b\\Uff0c8\\U5e74\\U540e\\U60ca\\U8273\\U4f17\\U4eba\\Uff01\\\",\\\"action\\\":\\\"update_recommend_status\\\",\\\"permission\\\":1,\\\"recommend\\\":0,\\\"__context_key\\\":\\\"fb855a315ec06beb6539ca19fb31780f6e5cad45\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1008\\\"}\"\n)\n2021-05-25 19:12:26.159 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"getNetworkType\\\",\\\"params\\\":{\\\"__context_key\\\":\\\"fb855a315ec06beb6539ca19fb31780f6e5cad45\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1009\\\"}\"\n)\n2021-05-25 19:12:26.183 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"ae44944e1f48a6eb88a1e813b330ba13cfe2a96d\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1010\\\"}\"\n)\n2021-05-25 19:12:26.428 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"handleMPPageAction\\\",\\\"params\\\":{\\\"action\\\":\\\"syncReadState\\\",\\\"state\\\":0,\\\"__context_key\\\":\\\"ae44944e1f48a6eb88a1e813b330ba13cfe2a96d\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1011\\\"}\"\n)\n2021-05-25 19:13:48.715 WeChat[50323:8889328] Alive 210\n2021-05-25 19:15:28.733 WeChat[50323:8889328] Alive 215\n2021-05-25 19:17:08.746 WeChat[50323:8889328] Alive 220\n2021-05-25 19:18:48.759 WeChat[50323:8889328] Alive 225\n2021-05-25 19:20:28.775 WeChat[50323:8889328] Alive 230\n2021-05-25 19:22:08.797 WeChat[50323:8889328] Alive 235\n2021-05-25 19:23:48.860 WeChat[50323:8889328] Alive 240\n2021-05-25 19:25:28.874 WeChat[50323:8889328] Alive 245\n2021-05-25 19:27:08.892 WeChat[50323:8889328] Alive 250\n2021-05-25 19:28:48.907 WeChat[50323:8889328] Alive 255\n2021-05-25 19:30:28.924 WeChat[50323:8889328] Alive 260\n2021-05-25 19:32:08.941 WeChat[50323:8889328] Alive 265\n2021-05-25 19:33:48.952 WeChat[50323:8889328] Alive 270\n2021-05-25 19:35:28.973 WeChat[50323:8889328] Alive 275\n2021-05-25 19:37:08.990 WeChat[50323:8889328] Alive 280\n2021-05-25 19:38:48.906 WeChat[50323:8889328] Alive 285\n2021-05-25 19:40:28.925 WeChat[50323:8889328] Alive 290\n2021-05-25 19:42:08.939 WeChat[50323:8889328] Alive 295\n2021-05-25 19:43:48.955 WeChat[50323:8889328] Alive 300\n2021-05-25 19:45:28.967 WeChat[50323:8889328] Alive 305\n2021-05-25 19:47:08.982 WeChat[50323:8889328] Alive 310\n2021-05-25 19:48:48.995 WeChat[50323:8889328] Alive 315\n2021-05-25 19:50:29.006 WeChat[50323:8889328] Alive 320\n2021-05-25 19:52:09.024 WeChat[50323:8889328] Alive 325\n2021-05-25 19:53:49.014 WeChat[50323:8889328] Alive 330\n2021-05-25 19:55:29.032 WeChat[50323:8889328] Alive 335\n2021-05-25 19:57:09.040 WeChat[50323:8889328] Alive 340\n2021-05-25 19:58:49.048 WeChat[50323:8889328] Alive 345\n2021-05-25 20:00:29.055 WeChat[50323:8889328] Alive 350\n2021-05-25 20:02:09.075 WeChat[50323:8889328] Alive 355\n2021-05-25 20:03:49.085 WeChat[50323:8889328] Alive 360\n2021-05-25 20:05:29.096 WeChat[50323:8889328] Alive 365\n2021-05-25 20:07:09.107 WeChat[50323:8889328] Alive 370\n2021-05-25 20:08:49.114 WeChat[50323:8889328] Alive 375\n2021-05-25 20:10:29.122 WeChat[50323:8889328] Alive 380\n2021-05-25 20:12:09.137 WeChat[50323:8889328] Alive 385\n2021-05-25 20:13:49.153 WeChat[50323:8889328] Alive 390\n2021-05-25 20:15:29.167 WeChat[50323:8889328] Alive 395\n2021-05-25 20:17:09.179 WeChat[50323:8889328] Alive 400\n2021-05-25 20:18:49.190 WeChat[50323:8889328] Alive 405\n2021-05-25 20:20:29.208 WeChat[50323:8889328] Alive 410\n2021-05-25 20:22:09.223 WeChat[50323:8889328] Alive 415\n2021-05-25 20:23:49.169 WeChat[50323:8889328] Alive 420\n2021-05-25 20:25:29.195 WeChat[50323:8889328] Alive 425\n2021-05-25 20:27:09.216 WeChat[50323:8889328] Alive 430\n2021-05-25 20:28:49.227 WeChat[50323:8889328] Alive 435\n2021-05-25 20:30:29.245 WeChat[50323:8889328] Alive 440\n2021-05-25 20:32:09.259 WeChat[50323:8889328] Alive 445\n2021-05-25 20:33:49.280 WeChat[50323:8889328] Alive 450\n2021-05-25 20:35:29.293 WeChat[50323:8889328] Alive 455\n2021-05-25 20:37:09.309 WeChat[50323:8889328] Alive 460\n2021-05-25 20:38:49.339 WeChat[50323:8889328] Alive 465\n2021-05-25 20:40:29.356 WeChat[50323:8889328] Alive 470\n2021-05-25 20:42:09.372 WeChat[50323:8889328] Alive 475\n2021-05-25 20:43:49.382 WeChat[50323:8889328] Alive 480\n2021-05-25 20:45:29.400 WeChat[50323:8889328] Alive 485\n2021-05-25 20:47:09.417 WeChat[50323:8889328] Alive 490\n2021-05-25 20:48:49.431 WeChat[50323:8889328] Alive 495\n2021-05-25 20:52:09.487 WeChat[50323:8889328] Alive 500\n2021-05-25 23:50:48.400 WeChat[50323:8889328] Alive 505\n2021-05-26 01:52:00.056 WeChat[50323:8889328] Alive 510\n2021-05-26 07:51:08.640 WeChat[50323:8889328] Alive 515\n2021-05-26 08:55:40.809 WeChat[50323:8889328] Alive 520\nd209900, n1, d600 -> 350 \n2021-05-26 08:57:20.816 WeChat[50323:8889328] Alive 525\n[SQLITERK_OK] Saved master info with 117 entries.\n2021-05-26 09:11:38.545 WeChat[50323:8889328] Alive 530\n2021-05-26 09:13:18.558 WeChat[50323:8889328] Alive 535\n2021-05-26 12:05:24.546 WeChat[50323:8889328] Alive 540\n2021-05-26 12:20:48.774 WeChat[50323:8889328] Alive 545\n2021-05-26 12:23:14.075 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:23:14.089 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:23:19.959 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:23:20.713 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:23:20.773 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:23:22.249 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:23:22.836 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:23:22.857 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:23:22.967 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:23:32.513 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:23:32.656 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:23:33.088 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:23:33.203 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:23:33.287 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:23:36.141 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 12:23:36.141 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 12:23:36.141 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 12:23:36.141 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 12:23:36.141 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 12:23:36.141 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 12:23:41.110 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 12:23:41.110 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 12:23:41.110 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 12:23:41.110 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 12:23:41.110 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 12:23:41.110 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 12:23:48.392 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 12:23:48.392 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 12:23:48.392 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 12:23:48.393 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 12:23:48.393 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 12:23:48.393 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 12:23:48.641 WeChat[50323:8889328] Alive 550\n2021-05-26 12:23:52.941 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 12:23:52.941 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 12:23:52.942 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 12:23:52.942 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 12:23:52.942 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 12:23:52.942 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n[SQLITERK_OK] Saved master info with 157 entries.\n[SQLITERK_OK] Saved master info with 157 entries.\n[SQLITERK_OK] Saved master info with 157 entries.\n2021-05-26 12:25:28.654 WeChat[50323:8889328] Alive 555\n2021-05-26 12:25:47.857 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:25:47.863 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:25:48.036 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:25:48.456 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:25:48.473 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:26:01.791 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:26:02.197 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:26:02.210 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:26:24.918 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:26:24.923 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:26:26.030 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:26:27.293 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:26:27.309 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:26:50.786 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:26:51.353 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:26:52.436 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:27:08.664 WeChat[50323:8889328] Alive 560\n2021-05-26 12:27:28.561 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:27:33.560 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:27:37.940 WeChat[50323:8889328] Event: startTransfer, from state: notStart to state: connecting\n2021-05-26 12:27:37.961 WeChat[50323:8889328] Event: makeProgress, from state: connecting to state: transfering\n2021-05-26 12:27:38.424 WeChat[50323:8889328] Event: makeProgress, from state: transfering to state: transfering\nd13640, n1, d600 -> 23 \n2021-05-26 12:27:38.451 WeChat[50323:8889328] Event: transferCompleted, from state: notStart to state: completed\n2021-05-26 12:27:38.452 WeChat[50323:8889328] Event: transferCompleted, from state: transfering to state: completed\n2021-05-26 12:27:41.121 WeChat[50323:8889328] Warning: Expected min height of view: (<NSButton: 0x7fa8fb46fdb0>) to be less than or equal to 30 but got a height of 32.000000. This error will be logged once per view in violation.\n2021-05-26 12:27:54.264 WeChat[50323:8889328] Event: startTransfer, from state: notStart to state: connecting\n2021-05-26 12:27:54.285 WeChat[50323:8889328] Event: makeProgress, from state: connecting to state: transfering\n2021-05-26 12:27:54.513 WeChat[50323:8889328] Event: makeProgress, from state: transfering to state: transfering\nd5880, n1, d600 -> 10 \n2021-05-26 12:27:54.529 WeChat[50323:8889328] Event: transferCompleted, from state: transfering to state: completed\n2021-05-26 12:28:05.049 WeChat[50323:8889328] Event: startTransfer, from state: notStart to state: connecting\n2021-05-26 12:28:05.074 WeChat[50323:8889328] Event: makeProgress, from state: connecting to state: transfering\n2021-05-26 12:28:05.596 WeChat[50323:8889328] Event: makeProgress, from state: transfering to state: transfering\n2021-05-26 12:28:06.101 WeChat[50323:8889328] Event: makeProgress, from state: transfering to state: transfering\n2021-05-26 12:28:06.621 WeChat[50323:8889328] Event: makeProgress, from state: transfering to state: transfering\n2021-05-26 12:28:06.660 WeChat[50323:8889328] Event: makeProgress, from state: transfering to state: transfering\nd24320, n1, d600 -> 41 \n2021-05-26 12:28:06.696 WeChat[50323:8889328] Event: transferCompleted, from state: notStart to state: completed\n2021-05-26 12:28:06.696 WeChat[50323:8889328] Event: transferCompleted, from state: transfering to state: completed\n2021-05-26 12:28:42.988 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-26 12:28:43.753 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:28:47.934 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-26 12:28:47.950 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-26 12:28:47.967 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:28:48.678 WeChat[50323:8889328] Alive 565\n2021-05-26 12:28:54.122 WeChat[50323:8889328] Warning: Expected min height of view: (<NSButton: 0x7fa8fe349ad0>) to be less than or equal to 30 but got a height of 32.000000. This error will be logged once per view in violation.\n2021-05-26 12:28:54.125 WeChat[50323:8889328] Warning: Expected min height of view: (<NSButton: 0x7fa8fd528a30>) to be less than or equal to 30 but got a height of 32.000000. This error will be logged once per view in violation.\n2021-05-26 12:29:07.165 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:29:17.130 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-26 12:29:17.170 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-26 12:29:17.477 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-26 12:29:17.481 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:29:17.716 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-26 12:29:17.720 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-26 12:29:17.723 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-26 12:30:28.692 WeChat[50323:8889328] Alive 570\n2021-05-26 12:32:08.702 WeChat[50323:8889328] Alive 575\n2021-05-26 12:33:48.710 WeChat[50323:8889328] Alive 580\n2021-05-26 12:35:28.718 WeChat[50323:8889328] Alive 585\n2021-05-26 12:37:08.732 WeChat[50323:8889328] Alive 590\n2021-05-26 12:38:48.652 WeChat[50323:8889328] Alive 595\n2021-05-26 12:40:28.661 WeChat[50323:8889328] Alive 600\n2021-05-26 12:42:08.669 WeChat[50323:8889328] Alive 605\n2021-05-26 12:43:48.693 WeChat[50323:8889328] Alive 610\n2021-05-26 12:45:28.709 WeChat[50323:8889328] Alive 615\n2021-05-26 12:47:08.741 WeChat[50323:8889328] Alive 620\n2021-05-26 12:48:48.762 WeChat[50323:8889328] Alive 625\n2021-05-26 12:50:28.786 WeChat[50323:8889328] Alive 630\n2021-05-26 12:52:08.808 WeChat[50323:8889328] Alive 635\n2021-05-26 12:53:48.802 WeChat[50323:8889328] Alive 640\n2021-05-26 12:55:28.812 WeChat[50323:8889328] Alive 645\n2021-05-26 12:57:08.829 WeChat[50323:8889328] Alive 650\n2021-05-26 14:55:40.620 WeChat[50323:8889328] Alive 655\n[SQLITERK_OK] Saved master info with 115 entries.\n[SQLITERK_OK] Saved master info with 121 entries.\n2021-05-26 14:56:58.141 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"3ECB00DC-6525-4142-9158-983CC4661993\\\"}\"\n)\n2021-05-26 14:56:58.249 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"497f6b0cfff2b1e50f00749a31de80d4d35b14d4\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-05-26 14:56:58.358 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"getNetworkType\\\",\\\"params\\\":{\\\"__context_key\\\":\\\"497f6b0cfff2b1e50f00749a31de80d4d35b14d4\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1001\\\"}\"\n)\n2021-05-26 14:56:58.364 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"setNavigationBarColor\\\",\\\"params\\\":{\\\"color\\\":\\\"#ffffff\\\",\\\"__context_key\\\":\\\"497f6b0cfff2b1e50f00749a31de80d4d35b14d4\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1002\\\"}\"\n)\n2021-05-26 14:56:58.365 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"setBounceBackground\\\",\\\"params\\\":{\\\"backgroundColor\\\":\\\"#ffffff\\\",\\\"footerBounceColor\\\":\\\"#f2f2f2\\\",\\\"__context_key\\\":\\\"497f6b0cfff2b1e50f00749a31de80d4d35b14d4\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1003\\\"}\"\n)\n2021-05-26 14:56:58.382 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"writeLog\\\",\\\"params\\\":{\\\"level\\\":\\\"info\\\",\\\"msg\\\":\\\"__wap__ wx config web compt result,wxOpen,{\\\\\\\"err_msg\\\\\\\":\\\\\\\"handleMPPageAction:fail_webcompt unsupported\\\\\\\"} location:[https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==∣=2651077685&idx=1&sn=7b53a1f32d84386a1dc9d2a289ed63df&chksm=bdb9c4668ace4d706d07ac5c25f43ed5b07ec7963786936b3c41e24590df30806ead4a06ab7c&mpshare=1&scene=2&srcid=0526Jtgy1kSsmQnEVR7RngGP&sharer_sharetime=1622011695264&sharer_shareid=69397c4b67a382953de1a4b6883769a9&key=36a1175a1e86453e64f7821872f26b07b8394c89c536370f97a613209c75653588ed322c0302503bb4339e66306b48d94cbc2f1aa031bf3e040905479e1fec172b26c5a46088f5436827c6458bdb9ba642ac0cf2c7d96e30347ed2cef9e6c110eaab64d7596bc274a7c52dc1434375664be97dca82d203713a752b02c6ad3795&ascene=1&uin=MzcxNTQ0NDAw&devicetype=iMac+MacBookPro16%2C1+OSX+OSX+10.16+build(20E241)&version=13000310&nettype=WIFI⟨=en&fontScale=100&exportkey=Ajeg9kBFmVxePt17POrFhuk%3D&pass_ticket=U0LVCLITD2k1GUcHmR7dX11OFHKh2Wr1rhc5qnIsatzFg8R%2FVwzoZzZsP%2Bv%2B6hHI&wx_header=0&fontgear=2.000000]\\\",\\\"__context_key\\\":\\\"497f6b0cfff2b1e50f00749a31de80d4d35b14d4\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1004\\\"}\"\n)\n2021-05-26 14:56:58.387 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"currentMpInfo\\\",\\\"params\\\":{\\\"userName\\\":\\\"gh_b443474846ae\\\",\\\"brandName\\\":\\\"InfoQ\\\",\\\"title\\\":\\\"\\U7ec8\\U4e8e\\Uff01Fuchsia OS\\U6b63\\U5f0f\\U516c\\U5f00\\U53ef\\U7528\\Uff0c\\U8c37\\U6b4c\\U8fc8\\U51fa\\U4e86\\U4e94\\U5e74\\U6765\\U6700\\U5173\\U952e\\U7684\\U4e00\\U6b65\\\",\\\"brandIcon\\\":\\\"http://wx.qlogo.cn/mmhead/Q3auHgzwzM63wOyLI60Bro3CVPy56dw74XCwWqB7w7UN0z4REqUDWA/132\\\",\\\"topBarStyle\\\":0,\\\"topBarShowed\\\":false,\\\"isMenuShowBrandInfo\\\":1,\\\"cover\\\":\\\"https://mmbiz.qlogo.cn/mmbiz_jpg/YriaiaJPb26VNrK4HSyxkRX2hmdI3nTwTQWE2hSjPArxiamqg9uHUI3JdiaggvsnZ6d557ciae9A8ZzKklpAsouhWuQ/0?wx_fmt=jpeg\\\",\\\"digest\\\":\\\"5 \\U6708 25 \\U65e5\\Uff0c\\U8c37\\U6b4c\\U8fc8\\U51fa\\U4e86\\U91cd\\U8981\\U7684\\U4e00\\U6b65\\U3002\\\",\\\"itemShowType\\\":\\\"0\\\",\\\"isPaySubscribe\\\":0,\\\"forbidForward\\\":0,\\\"__context_key\\\":\\\"497f6b0cfff2b1e50f00749a31de80d4d35b14d4\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1005\\\"}\"\n)\n2021-05-26 14:56:58.392 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"createWebViewForFastLoad\\\",\\\"params\\\":{\\\"scene\\\":1,\\\"__context_key\\\":\\\"497f6b0cfff2b1e50f00749a31de80d4d35b14d4\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1006\\\"}\"\n)\n2021-05-26 14:56:58.393 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"hideToolbar\\\",\\\"params\\\":{\\\"__context_key\\\":\\\"497f6b0cfff2b1e50f00749a31de80d4d35b14d4\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1007\\\"}\"\n)\n2021-05-26 14:56:58.393 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"showOptionMenu\\\",\\\"params\\\":{\\\"__context_key\\\":\\\"497f6b0cfff2b1e50f00749a31de80d4d35b14d4\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1008\\\"}\"\n)\n2021-05-26 14:56:58.448 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"getNetworkType\\\",\\\"params\\\":{\\\"__context_key\\\":\\\"497f6b0cfff2b1e50f00749a31de80d4d35b14d4\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1009\\\"}\"\n)\n2021-05-26 14:56:58.492 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"handleHaokanAction\\\",\\\"params\\\":{\\\"imgUrl\\\":\\\"http://wx.qlogo.cn/mmhead/Q3auHgzwzM63wOyLI60Bro3CVPy56dw74XCwWqB7w7UN0z4REqUDWA/132\\\",\\\"link\\\":\\\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==∣=2651077685&idx=1&sn=7b53a1f32d84386a1dc9d2a289ed63df&chksm=bdb9c4668ace4d706d07ac5c25f43ed5b07ec7963786936b3c41e24590df30806ead4a06ab7c#rd\\\",\\\"desc\\\":\\\"5 \\U6708 25 \\U65e5\\Uff0c\\U8c37\\U6b4c\\U8fc8\\U51fa\\U4e86\\U91cd\\U8981\\U7684\\U4e00\\U6b65\\U3002\\\",\\\"title\\\":\\\"\\U7ec8\\U4e8e\\Uff01Fuchsia OS\\U6b63\\U5f0f\\U516c\\U5f00\\U53ef\\U7528\\Uff0c\\U8c37\\U6b4c\\U8fc8\\U51fa\\U4e86\\U4e94\\U5e74\\U6765\\U6700\\U5173\\U952e\\U7684\\U4e00\\U6b65\\\",\\\"action\\\":\\\"update_recommend_status\\\",\\\"permission\\\":1,\\\"recommend\\\":0,\\\"__context_key\\\":\\\"497f6b0cfff2b1e50f00749a31de80d4d35b14d4\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1010\\\"}\"\n)\n2021-05-26 14:56:58.692 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"handleMPPageAction\\\",\\\"params\\\":{\\\"action\\\":\\\"syncReadState\\\",\\\"state\\\":0,\\\"__context_key\\\":\\\"497f6b0cfff2b1e50f00749a31de80d4d35b14d4\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1011\\\"}\"\n)\n2021-05-26 14:57:05.494 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"downloadPageDataForFastLoad\\\",\\\"params\\\":{\\\"itemList\\\":[{\\\"item_show_type\\\":\\\"0\\\",\\\"url\\\":\\\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==∣=2651077511&idx=1&sn=73f8bf5825bb7f61ae158fd6a423e3c5&chksm=bdb9c3d48ace4ac23047defcb0206afee2d1955b6fda61bcc38aec54664fb5991cbad17d3f29&scene=21#wechat_redirect\\\"}],\\\"__context_key\\\":\\\"497f6b0cfff2b1e50f00749a31de80d4d35b14d4\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1012\\\"}\"\n)\n2021-05-26 14:57:05.510 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"downloadPageDataForFastLoad\\\",\\\"params\\\":{\\\"itemList\\\":[{\\\"item_show_type\\\":\\\"11\\\",\\\"url\\\":\\\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==∣=2651077382&idx=1&sn=cfd705410cf8a205b1cf6fef7ffb3543&chksm=bdb9c3558ace4a4363f3aa47880228bc7413479c85c9cfdb0d265fdbfd7c59629009e40ce842&scene=21#wechat_redirect\\\"}],\\\"__context_key\\\":\\\"497f6b0cfff2b1e50f00749a31de80d4d35b14d4\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1013\\\"}\"\n)\n2021-05-26 14:57:05.511 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"downloadPageDataForFastLoad\\\",\\\"params\\\":{\\\"itemList\\\":[{\\\"item_show_type\\\":\\\"0\\\",\\\"url\\\":\\\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==∣=2651077380&idx=1&sn=cf52fc1eb0ccc6537f063406695ce8e5&chksm=bdb9c3578ace4a41633f6a4dae3285b89514caf3c637ec6281819da64f7f4557647b1258e538&scene=21#wechat_redirect\\\"}],\\\"__context_key\\\":\\\"497f6b0cfff2b1e50f00749a31de80d4d35b14d4\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1014\\\"}\"\n)\n2021-05-26 14:57:12.476 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"handleMPPageAction\\\",\\\"params\\\":{\\\"action\\\":\\\"syncReadState\\\",\\\"state\\\":1,\\\"__context_key\\\":\\\"497f6b0cfff2b1e50f00749a31de80d4d35b14d4\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1015\\\"}\"\n)\n2021-05-26 14:57:20.636 WeChat[50323:8889328] Alive 660\n2021-05-26 14:57:30.776 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"A1DB2FA9-C6FC-4526-944E-2E5C402759BF\\\"}\"\n)\n2021-05-26 14:57:30.850 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"b895adb82330064077fb60fd01d0c02b315f45e8\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-05-26 14:57:30.927 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"getNetworkType\\\",\\\"params\\\":{\\\"__context_key\\\":\\\"b895adb82330064077fb60fd01d0c02b315f45e8\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1001\\\"}\"\n)\n2021-05-26 14:57:30.930 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"setNavigationBarColor\\\",\\\"params\\\":{\\\"color\\\":\\\"#ffffff\\\",\\\"__context_key\\\":\\\"b895adb82330064077fb60fd01d0c02b315f45e8\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1002\\\"}\"\n)\n2021-05-26 14:57:30.930 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"setBounceBackground\\\",\\\"params\\\":{\\\"backgroundColor\\\":\\\"#ffffff\\\",\\\"footerBounceColor\\\":\\\"#f2f2f2\\\",\\\"__context_key\\\":\\\"b895adb82330064077fb60fd01d0c02b315f45e8\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1003\\\"}\"\n)\n2021-05-26 14:57:30.944 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"writeLog\\\",\\\"params\\\":{\\\"level\\\":\\\"info\\\",\\\"msg\\\":\\\"__wap__ wx config web compt result,wxOpen,{\\\\\\\"err_msg\\\\\\\":\\\\\\\"handleMPPageAction:fail_webcompt unsupported\\\\\\\"} location:[https://mp.weixin.qq.com/s?__biz=MzkzMDIzNTcyNQ==∣=2247483933&idx=1&sn=00405c9420b27f27996ae8cd1c2d7f60&chksm=c27c163ff50b9f292d2ed41c46927b5efa9a8ee9c131ba625881ed8d45922152192059fee197&mpshare=1&scene=2&srcid=0526y8PMpNvzqayBw50CQopr&sharer_sharetime=1622009902497&sharer_shareid=d5f3a5d6aa09356707946ff9a60890cf&key=89adbed35bcb3f2fbde3628e924fd13eab5445e256467fbfbb127c50bdcfaa3987a93b3cfc842f2760c7020cd711dd3d400af3f1ca80d7c4ac876fe7d76d835b78acf1d430aa4e98b8676f28a98162f25f4c3a6c2bfd893faac8d3e0a2a4ff85127a9303b1af1c96b08f7fabd6adf04751fd35924d2ef92e6a5250832bb1e1de&ascene=1&uin=MzcxNTQ0NDAw&devicetype=iMac+MacBookPro16%2C1+OSX+OSX+10.16+build(20E241)&version=13000310&nettype=WIFI⟨=en&fontScale=100&exportkey=AmUlYyZ558OLkBMRWP9Rt74%3D&pass_ticket=U0LVCLITD2k1GUcHmR7dX11OFHKh2Wr1rhc5qnIsatzFg8R%2FVwzoZzZsP%2Bv%2B6hHI&wx_header=0&fontgear=2.000000]\\\",\\\"__context_key\\\":\\\"b895adb82330064077fb60fd01d0c02b315f45e8\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1004\\\"}\"\n)\n2021-05-26 14:57:30.946 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"currentMpInfo\\\",\\\"params\\\":{\\\"userName\\\":\\\"gh_0899d14e71d0\\\",\\\"brandName\\\":\\\"\\U5c0f\\U706b\\U8f66\\U7684\\U4e13\\U5c5eTony\\\",\\\"title\\\":\\\"\\U4e3a\\U4ec0\\U4e48TA\\U7684\\U57f9\\U8bad\\U505a\\U7684\\U8fd9\\U4e48\\U68d2\\Uff1f\\U8fd9\\U91cc\\U6709\\U4efd\\U65b0\\U9c9c\\U7684TTT\\U7684\\U8bad\\U540e\\U7b14\\U8bb0\\U8bf7\\U67e5\\U6536\\\",\\\"brandIcon\\\":\\\"http://wx.qlogo.cn/mmhead/Q3auHgzwzM4jk1HurNiaicZBicr2HFRE70eDIbpPDUAhsj0H6k8XUibX7g/132\\\",\\\"topBarStyle\\\":0,\\\"topBarShowed\\\":false,\\\"isMenuShowBrandInfo\\\":1,\\\"cover\\\":\\\"https://mmbiz.qlogo.cn/mmbiz_jpg/VFrHgP0I8ZMA0g4FPI2FG8KvXOeoQ4KSCxhW11QygztcjOEHvx5gLwrNzWz6tV4sNrzWDvtUe3MhuLiaRd0T45g/0?wx_fmt=jpeg\\\",\\\"digest\\\":\\\"\\U4e0d\\U7ba1\\U662fPM \\U8fd8\\U662f\\U654f\\U6377\\U6559\\U7ec3\\Uff0c\\U76ee\\U524d\\U5728\\U516c\\U53f8\\U5185\\U90fd\\U9700\\U8981\\U53bb\\U505a\\U4e00\\U4e9b\\U57f9\\U8bad\\Uff0c\\U4f60\\U7684TTT\\Uff08Training the Trainer to Train\\Uff09\\U6280\\U80fd\\U70b9\\U70b9\\U4eae\\U4e86\\U5417\\Uff1f \\U6765\\U770b\\U770b\\U6211\\U7684\\U57f9\\U8bad\\U7b14\\U8bb0\\U5427\\\",\\\"itemShowType\\\":\\\"0\\\",\\\"isPaySubscribe\\\":0,\\\"forbidForward\\\":0,\\\"__context_key\\\":\\\"b895adb82330064077fb60fd01d0c02b315f45e8\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1005\\\"}\"\n)\n2021-05-26 14:57:30.952 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"createWebViewForFastLoad\\\",\\\"params\\\":{\\\"scene\\\":1,\\\"__context_key\\\":\\\"b895adb82330064077fb60fd01d0c02b315f45e8\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1006\\\"}\"\n)\n2021-05-26 14:57:30.952 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"hideToolbar\\\",\\\"params\\\":{\\\"__context_key\\\":\\\"b895adb82330064077fb60fd01d0c02b315f45e8\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1007\\\"}\"\n)\n2021-05-26 14:57:30.952 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"showOptionMenu\\\",\\\"params\\\":{\\\"__context_key\\\":\\\"b895adb82330064077fb60fd01d0c02b315f45e8\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1008\\\"}\"\n)\n2021-05-26 14:57:30.980 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"getNetworkType\\\",\\\"params\\\":{\\\"__context_key\\\":\\\"b895adb82330064077fb60fd01d0c02b315f45e8\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1009\\\"}\"\n)\n2021-05-26 14:57:31.025 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"handleHaokanAction\\\",\\\"params\\\":{\\\"imgUrl\\\":\\\"http://wx.qlogo.cn/mmhead/Q3auHgzwzM4jk1HurNiaicZBicr2HFRE70eDIbpPDUAhsj0H6k8XUibX7g/132\\\",\\\"link\\\":\\\"http://mp.weixin.qq.com/s?__biz=MzkzMDIzNTcyNQ==∣=2247483933&idx=1&sn=00405c9420b27f27996ae8cd1c2d7f60&chksm=c27c163ff50b9f292d2ed41c46927b5efa9a8ee9c131ba625881ed8d45922152192059fee197#rd\\\",\\\"desc\\\":\\\"\\U4e0d\\U7ba1\\U662fPM \\U8fd8\\U662f\\U654f\\U6377\\U6559\\U7ec3\\Uff0c\\U76ee\\U524d\\U5728\\U516c\\U53f8\\U5185\\U90fd\\U9700\\U8981\\U53bb\\U505a\\U4e00\\U4e9b\\U57f9\\U8bad\\Uff0c\\U4f60\\U7684TTT\\Uff08Training the Trainer to Train\\Uff09\\U6280\\U80fd\\U70b9\\U70b9\\U4eae\\U4e86\\U5417\\Uff1f \\U6765\\U770b\\U770b\\U6211\\U7684\\U57f9\\U8bad\\U7b14\\U8bb0\\U5427\\\",\\\"title\\\":\\\"\\U4e3a\\U4ec0\\U4e48TA\\U7684\\U57f9\\U8bad\\U505a\\U7684\\U8fd9\\U4e48\\U68d2\\Uff1f\\U8fd9\\U91cc\\U6709\\U4efd\\U65b0\\U9c9c\\U7684TTT\\U7684\\U8bad\\U540e\\U7b14\\U8bb0\\U8bf7\\U67e5\\U6536\\\",\\\"action\\\":\\\"update_recommend_status\\\",\\\"permission\\\":1,\\\"recommend\\\":0,\\\"__context_key\\\":\\\"b895adb82330064077fb60fd01d0c02b315f45e8\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1010\\\"}\"\n)\n2021-05-26 14:57:32.178 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"handleMPPageAction\\\",\\\"params\\\":{\\\"action\\\":\\\"syncReadState\\\",\\\"state\\\":0,\\\"__context_key\\\":\\\"b895adb82330064077fb60fd01d0c02b315f45e8\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1011\\\"}\"\n)\n2021-05-26 14:57:33.277 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"handleMPPageAction\\\",\\\"params\\\":{\\\"action\\\":\\\"syncReadState\\\",\\\"state\\\":1,\\\"__context_key\\\":\\\"b895adb82330064077fb60fd01d0c02b315f45e8\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1012\\\"}\"\n)\n2021-05-26 14:59:00.644 WeChat[50323:8889328] Alive 665\n2021-05-26 15:00:40.668 WeChat[50323:8889328] Alive 670\n2021-05-26 15:02:20.695 WeChat[50323:8889328] Alive 675\n2021-05-26 15:04:00.721 WeChat[50323:8889328] Alive 680\n2021-05-26 15:05:40.745 WeChat[50323:8889328] Alive 685\n2021-05-26 15:07:20.769 WeChat[50323:8889328] Alive 690\n2021-05-26 15:09:00.799 WeChat[50323:8889328] Alive 695\n2021-05-26 15:10:40.729 WeChat[50323:8889328] Alive 700\n2021-05-26 15:12:20.752 WeChat[50323:8889328] Alive 705\n2021-05-26 15:14:00.779 WeChat[50323:8889328] Alive 710\n2021-05-26 15:15:40.822 WeChat[50323:8889328] Alive 715\n2021-05-26 15:17:20.851 WeChat[50323:8889328] Alive 720\n2021-05-26 15:19:00.877 WeChat[50323:8889328] Alive 725\n2021-05-26 15:20:40.905 WeChat[50323:8889328] Alive 730\n2021-05-26 15:22:20.936 WeChat[50323:8889328] Alive 735\n2021-05-26 15:24:00.956 WeChat[50323:8889328] Alive 740\n2021-05-26 15:25:40.985 WeChat[50323:8889328] Alive 745\n2021-05-26 15:27:20.988 WeChat[50323:8889328] Alive 750\n2021-05-26 15:29:01.027 WeChat[50323:8889328] Alive 755\n2021-05-26 15:30:41.058 WeChat[50323:8889328] Alive 760\n2021-05-26 15:32:21.086 WeChat[50323:8889328] Alive 765\n2021-05-26 15:34:01.125 WeChat[50323:8889328] Alive 770\n2021-05-26 15:35:41.158 WeChat[50323:8889328] Alive 775\n2021-05-26 15:37:21.195 WeChat[50323:8889328] Alive 780\n2021-05-26 15:39:01.226 WeChat[50323:8889328] Alive 785\n2021-05-26 15:40:41.262 WeChat[50323:8889328] Alive 790\n2021-05-26 15:42:21.336 WeChat[50323:8889328] Alive 795\n2021-05-26 15:44:01.378 WeChat[50323:8889328] Alive 800\n2021-05-26 15:45:41.410 WeChat[50323:8889328] Alive 805\n2021-05-26 15:47:21.441 WeChat[50323:8889328] Alive 810\n2021-05-26 15:49:01.468 WeChat[50323:8889328] Alive 815\n2021-05-26 15:50:41.496 WeChat[50323:8889328] Alive 820\n2021-05-26 15:52:11.342 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa9088e2b30> -[JTCaptureRequest init]\n2021-05-26 15:52:11.344 WeChat[50323:8889328] <JTCaptureManager: 0x7fa9119e53c0> -[JTCaptureManager init]\n2021-05-26 15:52:11.374 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90664e880> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-26 15:52:11.433 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90664e880> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-26 15:52:11.440 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9088e6520> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-26 15:52:11.464 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa908c76620> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-26 15:52:11.488 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa908c76620> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-26 15:52:11.493 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f488e60> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-26 15:52:14.904 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa90fc51c50> -[JTToolbarView configAppearanceAndLayout]\n2021-05-26 15:52:14.917 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fd422e30> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-26 15:52:16.236 WeChat[50323:8889328] <JTPopoverView: 0x7fa9088e4980> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 15:52:16.239 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fd50c330> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 15:52:16.249 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fb5b3440> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-26 15:52:16.249 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fb5e0b60> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-26 15:52:16.249 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8f67d39d0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-26 15:52:16.249 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fb52eac0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 15:52:16.255 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8f98595a0> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-26 15:52:16.258 WeChat[50323:8889328] <JTPopoverView: 0x7fa9088e4980> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 15:52:16.265 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fb52eac0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 15:52:16.267 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fd50c330> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 15:52:17.300 WeChat[50323:8889328] <JTPopoverView: 0x7fa9088e4980> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 15:52:17.301 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fb52eac0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 15:52:17.303 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fd50c330> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 15:52:17.319 WeChat[50323:8889328] <JTPopoverView: 0x7fa9088e4980> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 15:52:17.320 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fb52eac0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 15:52:17.322 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fd50c330> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 15:52:19.497 WeChat[50323:8889328] <JTCaptureManager: 0x7fa9119e53c0> -[JTCaptureManager dealloc]\n2021-05-26 15:52:19.497 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa9088e2b30> -[JTCaptureRequest dealloc]\n2021-05-26 15:52:19.498 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9088e6520> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-26 15:52:19.498 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90664e880> -[JTCaptureViewController dealloc]\n2021-05-26 15:52:19.501 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f488e60> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-26 15:52:19.501 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa908c76620> -[JTCaptureViewController dealloc]\n2021-05-26 15:52:19.505 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fd422e30> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-26 15:52:19.508 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8f98595a0> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-26 15:52:21.504 WeChat[50323:8889328] Alive 825\n2021-05-26 15:54:01.525 WeChat[50323:8889328] Alive 830\n2021-05-26 15:55:41.570 WeChat[50323:8889328] Alive 835\n2021-05-26 15:57:21.538 WeChat[50323:8889328] Alive 840\n2021-05-26 15:59:01.563 WeChat[50323:8889328] Alive 845\n2021-05-26 16:00:41.593 WeChat[50323:8889328] Alive 850\n2021-05-26 16:02:21.619 WeChat[50323:8889328] Alive 855\n2021-05-26 16:04:01.645 WeChat[50323:8889328] Alive 860\n2021-05-26 16:05:41.688 WeChat[50323:8889328] Alive 865\n2021-05-26 16:07:21.714 WeChat[50323:8889328] Alive 870\n2021-05-26 16:09:01.741 WeChat[50323:8889328] Alive 875\n2021-05-26 16:10:41.774 WeChat[50323:8889328] Alive 880\n2021-05-26 16:12:21.854 WeChat[50323:8889328] Alive 885\n2021-05-26 16:14:01.891 WeChat[50323:8889328] Alive 890\n2021-05-26 16:15:41.918 WeChat[50323:8889328] Alive 895\n2021-05-26 16:17:21.946 WeChat[50323:8889328] Alive 900\n2021-05-26 16:19:01.969 WeChat[50323:8889328] Alive 905\n2021-05-26 16:20:42.002 WeChat[50323:8889328] Alive 910\n2021-05-26 16:22:22.024 WeChat[50323:8889328] Alive 915\n2021-05-26 16:24:02.050 WeChat[50323:8889328] Alive 920\n2021-05-26 16:25:42.081 WeChat[50323:8889328] Alive 925\n2021-05-26 16:27:22.013 WeChat[50323:8889328] Alive 930\n2021-05-26 16:29:02.033 WeChat[50323:8889328] Alive 935\n2021-05-26 16:30:42.058 WeChat[50323:8889328] Alive 940\n2021-05-26 16:32:22.081 WeChat[50323:8889328] Alive 945\n2021-05-26 16:34:02.106 WeChat[50323:8889328] Alive 950\n2021-05-26 16:35:42.133 WeChat[50323:8889328] Alive 955\n2021-05-26 16:37:22.173 WeChat[50323:8889328] Alive 960\n2021-05-26 16:39:02.198 WeChat[50323:8889328] Alive 965\n2021-05-26 16:40:42.222 WeChat[50323:8889328] Alive 970\n2021-05-26 16:42:22.309 WeChat[50323:8889328] Alive 975\n2021-05-26 16:44:02.346 WeChat[50323:8889328] Alive 980\n2021-05-26 16:45:42.374 WeChat[50323:8889328] Alive 985\n2021-05-26 16:47:22.400 WeChat[50323:8889328] Alive 990\n2021-05-26 16:49:02.423 WeChat[50323:8889328] Alive 995\n2021-05-26 16:50:42.457 WeChat[50323:8889328] Alive 1000\n2021-05-26 16:52:22.484 WeChat[50323:8889328] Alive 1005\n2021-05-26 16:54:02.520 WeChat[50323:8889328] Alive 1010\n2021-05-26 16:55:42.556 WeChat[50323:8889328] Alive 1015\n2021-05-26 16:57:22.563 WeChat[50323:8889328] Alive 1020\n2021-05-26 16:59:02.603 WeChat[50323:8889328] Alive 1025\n2021-05-26 17:00:42.631 WeChat[50323:8889328] Alive 1030\n2021-05-26 17:02:22.659 WeChat[50323:8889328] Alive 1035\n2021-05-26 17:04:02.694 WeChat[50323:8889328] Alive 1040\n2021-05-26 17:05:42.726 WeChat[50323:8889328] Alive 1045\n2021-05-26 17:07:22.761 WeChat[50323:8889328] Alive 1050\n2021-05-26 17:09:02.783 WeChat[50323:8889328] Alive 1055\n2021-05-26 17:10:42.814 WeChat[50323:8889328] Alive 1060\n2021-05-26 17:12:22.868 WeChat[50323:8889328] Alive 1065\n2021-05-26 17:14:02.899 WeChat[50323:8889328] Alive 1070\n2021-05-26 17:15:42.938 WeChat[50323:8889328] Alive 1075\n2021-05-26 17:17:22.968 WeChat[50323:8889328] Alive 1080\n2021-05-26 17:19:02.993 WeChat[50323:8889328] Alive 1085\n2021-05-26 17:20:43.027 WeChat[50323:8889328] Alive 1090\n[SQLITERK_OK] Saved master info with 135 entries.\n2021-05-26 17:22:23.056 WeChat[50323:8889328] Alive 1095\n2021-05-26 17:24:03.085 WeChat[50323:8889328] Alive 1100\n2021-05-26 17:25:43.105 WeChat[50323:8889328] Alive 1105\n2021-05-26 17:27:23.134 WeChat[50323:8889328] Alive 1110\n2021-05-26 17:29:03.164 WeChat[50323:8889328] Alive 1115\n2021-05-26 17:30:43.189 WeChat[50323:8889328] Alive 1120\n2021-05-26 17:32:23.206 WeChat[50323:8889328] Alive 1125\n2021-05-26 17:34:03.241 WeChat[50323:8889328] Alive 1130\n2021-05-26 17:35:43.265 WeChat[50323:8889328] Alive 1135\n2021-05-26 17:37:23.300 WeChat[50323:8889328] Alive 1140\n2021-05-26 17:39:03.328 WeChat[50323:8889328] Alive 1145\n2021-05-26 17:40:43.362 WeChat[50323:8889328] Alive 1150\n2021-05-26 17:42:23.379 WeChat[50323:8889328] Alive 1155\n2021-05-26 17:44:03.416 WeChat[50323:8889328] Alive 1160\n2021-05-26 17:45:43.443 WeChat[50323:8889328] Alive 1165\n2021-05-26 17:47:23.480 WeChat[50323:8889328] Alive 1170\n2021-05-26 17:49:03.521 WeChat[50323:8889328] Alive 1175\n2021-05-26 17:49:13.696 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa9067beda0> -[JTCaptureRequest init]\n2021-05-26 17:49:13.696 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90eb2dbd0> -[JTCaptureManager init]\n2021-05-26 17:49:13.718 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90ea64b30> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-26 17:49:13.774 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90ea64b30> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-26 17:49:13.778 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9067b9740> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-26 17:49:13.799 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa914b54740> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-26 17:49:13.824 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa914b54740> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-26 17:49:13.828 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8f8fba220> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-26 17:49:17.192 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa8fa698620> -[JTToolbarView configAppearanceAndLayout]\n2021-05-26 17:49:17.204 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fd675470> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-26 17:49:19.560 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fd145500> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 17:49:19.563 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8f76dc150> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 17:49:19.569 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8f82316b0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-26 17:49:19.569 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa9125cd830> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-26 17:49:19.569 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa912d89f90> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-26 17:49:19.569 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa91209c460> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 17:49:19.571 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa914d4f7e0> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-26 17:49:19.576 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fd145500> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 17:49:19.577 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa91209c460> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 17:49:19.601 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8f76dc150> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 17:49:21.159 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fd145500> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 17:49:21.160 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa91209c460> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 17:49:21.162 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8f76dc150> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 17:49:21.169 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fd145500> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 17:49:21.170 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa91209c460> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 17:49:21.171 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8f76dc150> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 17:49:26.813 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fd145500> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 17:49:26.813 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa91209c460> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 17:49:26.815 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8f76dc150> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 17:49:34.689 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90eb2dbd0> -[JTCaptureManager dealloc]\n2021-05-26 17:49:34.689 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa9067beda0> -[JTCaptureRequest dealloc]\n2021-05-26 17:49:34.690 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9067b9740> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-26 17:49:34.690 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90ea64b30> -[JTCaptureViewController dealloc]\n2021-05-26 17:49:34.693 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8f8fba220> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-26 17:49:34.693 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa914b54740> -[JTCaptureViewController dealloc]\n2021-05-26 17:49:34.698 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fd675470> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-26 17:49:34.700 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa914d4f7e0> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-26 17:50:43.551 WeChat[50323:8889328] Alive 1180\n2021-05-26 17:52:23.547 WeChat[50323:8889328] Alive 1185\n2021-05-26 17:54:03.562 WeChat[50323:8889328] Alive 1190\n2021-05-26 17:55:43.575 WeChat[50323:8889328] Alive 1195\n2021-05-26 17:57:23.555 WeChat[50323:8889328] Alive 1200\n2021-05-26 17:59:03.567 WeChat[50323:8889328] Alive 1205\n2021-05-26 18:00:43.584 WeChat[50323:8889328] Alive 1210\n2021-05-26 18:02:23.604 WeChat[50323:8889328] Alive 1215\n2021-05-26 18:04:03.615 WeChat[50323:8889328] Alive 1220\n2021-05-26 18:05:43.627 WeChat[50323:8889328] Alive 1225\n2021-05-26 18:07:23.634 WeChat[50323:8889328] Alive 1230\n2021-05-26 18:09:03.650 WeChat[50323:8889328] Alive 1235\n2021-05-26 18:10:43.673 WeChat[50323:8889328] Alive 1240\n2021-05-26 18:12:23.689 WeChat[50323:8889328] Alive 1245\n2021-05-26 18:14:03.707 WeChat[50323:8889328] Alive 1250\n2021-05-26 18:15:43.723 WeChat[50323:8889328] Alive 1255\n2021-05-26 18:17:23.741 WeChat[50323:8889328] Alive 1260\n2021-05-26 18:19:03.755 WeChat[50323:8889328] Alive 1265\n2021-05-26 18:20:43.777 WeChat[50323:8889328] Alive 1270\n2021-05-26 18:22:23.789 WeChat[50323:8889328] Alive 1275\n2021-05-26 18:24:03.807 WeChat[50323:8889328] Alive 1280\n2021-05-26 18:25:43.817 WeChat[50323:8889328] Alive 1285\n2021-05-26 18:27:23.763 WeChat[50323:8889328] Alive 1290\n2021-05-26 18:29:03.778 WeChat[50323:8889328] Alive 1295\n2021-05-26 18:30:43.792 WeChat[50323:8889328] Alive 1300\n2021-05-26 18:31:36.123 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:31:36.123 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:31:36.123 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:31:36.125 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:31:36.125 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:31:36.125 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:32:23.805 WeChat[50323:8889328] Alive 1305\n2021-05-26 18:34:03.820 WeChat[50323:8889328] Alive 1310\n2021-05-26 18:35:29.778 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90de91a30> -[JTCaptureRequest init]\n2021-05-26 18:35:29.778 WeChat[50323:8889328] <JTCaptureManager: 0x7fa908851500> -[JTCaptureManager init]\n2021-05-26 18:35:29.816 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa911eb40f0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-26 18:35:29.862 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa911eb40f0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-26 18:35:29.870 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa912e1c130> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-26 18:35:29.903 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fde67880> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-26 18:35:29.928 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fde67880> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-26 18:35:29.932 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fa3083b0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-26 18:35:30.063 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:35:30.063 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:35:30.063 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:35:30.064 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:35:30.064 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:35:30.064 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:35:31.418 WeChat[50323:8889328] <JTCaptureManager: 0x7fa908851500> -[JTCaptureManager dealloc]\n2021-05-26 18:35:31.418 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90de91a30> -[JTCaptureRequest dealloc]\n2021-05-26 18:35:31.418 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa912e1c130> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-26 18:35:31.419 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa911eb40f0> -[JTCaptureViewController dealloc]\n2021-05-26 18:35:31.421 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fa3083b0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-26 18:35:31.421 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fde67880> -[JTCaptureViewController dealloc]\n2021-05-26 18:35:43.834 WeChat[50323:8889328] Alive 1315\n2021-05-26 18:36:51.312 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:36:51.312 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:36:51.312 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:36:54.818 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:36:54.818 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:36:54.818 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:36:54.821 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:36:54.821 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:36:54.821 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:37:23.848 WeChat[50323:8889328] Alive 1320\n[SQLITERK_OK] Saved master info with 89 entries.\n2021-05-26 18:39:03.861 WeChat[50323:8889328] Alive 1325\n2021-05-26 18:40:43.873 WeChat[50323:8889328] Alive 1330\n2021-05-26 18:42:23.924 WeChat[50323:8889328] Alive 1335\n2021-05-26 18:44:03.944 WeChat[50323:8889328] Alive 1340\n2021-05-26 18:45:43.988 WeChat[50323:8889328] Alive 1345\n2021-05-26 18:47:24.009 WeChat[50323:8889328] Alive 1350\n2021-05-26 18:49:04.047 WeChat[50323:8889328] Alive 1355\n2021-05-26 18:50:12.490 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:50:12.490 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:50:12.490 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:50:12.490 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:50:12.490 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:50:12.490 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:50:13.504 WeChat[50323:8889328] 'NSStringPboardType' is not a valid UTI string.  Cannot set data for an invalid UTI.\n2021-05-26 18:50:15.205 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:50:15.205 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:50:15.205 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:50:15.206 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:50:15.206 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:50:15.206 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:50:24.376 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90de23770> -[JTCaptureRequest init]\n2021-05-26 18:50:24.377 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90884e6e0> -[JTCaptureManager init]\n2021-05-26 18:50:24.404 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90dc760a0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-26 18:50:24.452 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90dc760a0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-26 18:50:24.456 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fdde1090> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-26 18:50:24.477 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fdd3d5d0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-26 18:50:24.501 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fdd3d5d0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-26 18:50:24.506 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa914b56450> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-26 18:50:24.610 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:50:24.610 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:50:24.610 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:50:24.611 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:50:24.611 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:50:24.611 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:50:28.694 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa8fe49d660> -[JTToolbarView configAppearanceAndLayout]\n2021-05-26 18:50:28.705 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fe439900> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-26 18:50:42.366 WeChat[50323:8889328] <JTPopoverView: 0x7fa8ff2ee760> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 18:50:42.370 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90edffb60> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 18:50:42.377 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8f8b15170> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-26 18:50:42.377 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fb19abd0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-26 18:50:42.377 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fd4a8770> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-26 18:50:42.378 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90f065080> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 18:50:42.380 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8f7666ad0> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-26 18:50:42.383 WeChat[50323:8889328] <JTPopoverView: 0x7fa8ff2ee760> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 18:50:42.398 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90f065080> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 18:50:42.400 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90edffb60> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 18:50:44.068 WeChat[50323:8889328] Alive 1360\n2021-05-26 18:50:44.275 WeChat[50323:8889328] <JTPopoverView: 0x7fa8ff2ee760> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 18:50:44.276 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90f065080> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 18:50:44.278 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90edffb60> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 18:50:44.286 WeChat[50323:8889328] <JTPopoverView: 0x7fa8ff2ee760> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 18:50:44.287 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90f065080> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 18:50:44.289 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90edffb60> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 18:50:46.196 WeChat[50323:8889328] <JTPopoverView: 0x7fa8ff2ee760> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 18:50:46.197 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90f065080> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 18:50:46.199 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90edffb60> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 18:50:46.207 WeChat[50323:8889328] <JTPopoverView: 0x7fa8ff2ee760> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 18:50:46.208 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90f065080> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 18:50:46.209 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90edffb60> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 18:50:48.969 WeChat[50323:8889328] <JTPopoverView: 0x7fa8ff2ee760> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 18:50:48.970 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90f065080> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 18:50:48.971 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90edffb60> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 18:50:48.979 WeChat[50323:8889328] <JTPopoverView: 0x7fa8ff2ee760> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 18:50:48.980 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90f065080> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 18:50:48.981 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90edffb60> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 18:50:50.645 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90884e6e0> -[JTCaptureManager dealloc]\n2021-05-26 18:50:50.645 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90de23770> -[JTCaptureRequest dealloc]\n2021-05-26 18:50:50.645 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fdde1090> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-26 18:50:50.646 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90dc760a0> -[JTCaptureViewController dealloc]\n2021-05-26 18:50:50.649 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa914b56450> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-26 18:50:50.650 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fdd3d5d0> -[JTCaptureViewController dealloc]\n2021-05-26 18:50:50.655 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fe439900> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-26 18:50:50.658 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8f7666ad0> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-26 18:50:50.667 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:50:50.667 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:50:50.667 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:50:50.668 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:50:50.668 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:50:50.668 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:50:53.062 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-26 18:50:53.542 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:50:53.542 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:50:53.542 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:51:08.268 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa9118bd130> -[JTCaptureRequest init]\n2021-05-26 18:51:08.268 WeChat[50323:8889328] <JTCaptureManager: 0x7fa908880c70> -[JTCaptureManager init]\n2021-05-26 18:51:08.297 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9149c8120> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-26 18:51:08.345 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9149c8120> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-26 18:51:08.349 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fb206b30> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-26 18:51:08.366 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f0049e0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-26 18:51:08.390 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f0049e0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-26 18:51:08.395 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8ffe66d40> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-26 18:51:08.758 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:51:08.758 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:51:08.758 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:51:08.760 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:51:08.760 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:51:08.760 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:51:17.893 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa9088e4f30> -[JTToolbarView configAppearanceAndLayout]\n2021-05-26 18:51:17.905 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fa64ba20> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-26 18:51:21.708 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fe17c880> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 18:51:21.712 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fd7f7a30> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 18:51:21.718 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fa6f19b0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-26 18:51:21.719 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fa6d8670> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-26 18:51:21.719 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fa6f3310> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-26 18:51:21.719 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fa3f7270> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 18:51:21.721 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8fe447b80> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-26 18:51:21.724 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fe17c880> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 18:51:21.725 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fa3f7270> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 18:51:21.752 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fd7f7a30> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 18:51:23.173 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fe17c880> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 18:51:23.174 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fa3f7270> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 18:51:23.176 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fd7f7a30> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 18:51:23.184 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fe17c880> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 18:51:23.185 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fa3f7270> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 18:51:23.187 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fd7f7a30> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 18:51:25.547 WeChat[50323:8889328] <JTCaptureManager: 0x7fa908880c70> -[JTCaptureManager dealloc]\n2021-05-26 18:51:25.547 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa9118bd130> -[JTCaptureRequest dealloc]\n2021-05-26 18:51:25.547 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fb206b30> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-26 18:51:25.548 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9149c8120> -[JTCaptureViewController dealloc]\n2021-05-26 18:51:25.551 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8ffe66d40> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-26 18:51:25.551 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f0049e0> -[JTCaptureViewController dealloc]\n2021-05-26 18:51:25.556 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fa64ba20> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-26 18:51:25.558 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8fe447b80> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-26 18:51:25.572 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:51:25.572 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:51:25.572 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:51:25.573 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:51:25.573 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:51:25.573 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:51:26.794 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:51:26.794 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:51:26.794 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:52:24.081 WeChat[50323:8889328] Alive 1365\n2021-05-26 18:54:04.096 WeChat[50323:8889328] Alive 1370\n2021-05-26 18:55:33.163 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90664ff30> -[JTCaptureRequest init]\n2021-05-26 18:55:33.163 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90dc31ef0> -[JTCaptureManager init]\n2021-05-26 18:55:33.189 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa913378660> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-26 18:55:33.239 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa913378660> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-26 18:55:33.243 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa906670280> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-26 18:55:33.261 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fb2ddc90> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-26 18:55:33.289 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fb2ddc90> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-26 18:55:33.293 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa912765360> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-26 18:55:33.421 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:55:33.421 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:55:33.422 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:55:33.422 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:55:33.422 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:55:33.422 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:55:36.388 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa913271e60> -[JTToolbarView configAppearanceAndLayout]\n2021-05-26 18:55:36.399 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fb4d7ea0> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-26 18:55:38.682 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fa5ad2c0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 18:55:38.686 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fe35de00> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 18:55:38.692 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa910b9a9d0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-26 18:55:38.692 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fa3fbef0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-26 18:55:38.693 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fa3a3d30> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-26 18:55:38.693 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fde97d70> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 18:55:38.695 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa90f658d50> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-26 18:55:38.698 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fa5ad2c0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 18:55:38.706 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fde97d70> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 18:55:38.708 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fe35de00> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 18:55:40.269 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fa5ad2c0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 18:55:40.270 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fde97d70> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 18:55:40.271 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fe35de00> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 18:55:40.278 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fa5ad2c0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-26 18:55:40.278 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fde97d70> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-26 18:55:40.280 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fe35de00> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-26 18:55:43.325 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90dc31ef0> -[JTCaptureManager dealloc]\n2021-05-26 18:55:43.325 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90664ff30> -[JTCaptureRequest dealloc]\n2021-05-26 18:55:43.325 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa906670280> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-26 18:55:43.326 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa913378660> -[JTCaptureViewController dealloc]\n2021-05-26 18:55:43.329 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa912765360> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-26 18:55:43.330 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fb2ddc90> -[JTCaptureViewController dealloc]\n2021-05-26 18:55:43.331 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fb4d7ea0> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-26 18:55:43.336 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa90f658d50> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-26 18:55:44.113 WeChat[50323:8889328] Alive 1375\n2021-05-26 18:55:44.564 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:55:44.564 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:55:44.565 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:56:10.021 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:56:10.021 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:56:10.021 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:56:10.022 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:56:10.022 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:56:10.022 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:57:24.072 WeChat[50323:8889328] Alive 1380\n[SQLITERK_OK] Saved master info with 115 entries.\n2021-05-26 18:58:59.180 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:58:59.180 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:58:59.181 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:58:59.181 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 18:58:59.181 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 18:58:59.181 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 18:59:04.089 WeChat[50323:8889328] Alive 1385\n2021-05-26 19:00:14.983 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 19:00:14.983 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 19:00:14.983 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 19:00:14.984 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 19:00:14.984 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 19:00:14.984 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 19:00:44.102 WeChat[50323:8889328] Alive 1390\n2021-05-26 19:00:57.926 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 19:00:57.926 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 19:00:57.926 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 19:00:57.928 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 19:00:57.928 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 19:00:57.928 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 19:02:24.111 WeChat[50323:8889328] Alive 1395\n2021-05-26 19:04:04.125 WeChat[50323:8889328] Alive 1400\n2021-05-26 19:05:44.149 WeChat[50323:8889328] Alive 1405\n2021-05-26 19:07:24.162 WeChat[50323:8889328] Alive 1410\n2021-05-26 19:09:04.176 WeChat[50323:8889328] Alive 1415\n2021-05-26 19:10:44.187 WeChat[50323:8889328] Alive 1420\n2021-05-26 19:12:24.214 WeChat[50323:8889328] Alive 1425\n2021-05-26 19:14:04.223 WeChat[50323:8889328] Alive 1430\n2021-05-26 19:15:44.238 WeChat[50323:8889328] Alive 1435\n2021-05-26 19:17:24.253 WeChat[50323:8889328] Alive 1440\n2021-05-26 19:19:04.266 WeChat[50323:8889328] Alive 1445\n2021-05-26 19:20:44.284 WeChat[50323:8889328] Alive 1450\n2021-05-26 19:22:24.296 WeChat[50323:8889328] Alive 1455\n2021-05-26 19:24:04.314 WeChat[50323:8889328] Alive 1460\n2021-05-26 19:25:44.331 WeChat[50323:8889328] Alive 1465\n2021-05-26 19:27:24.278 WeChat[50323:8889328] Alive 1470\n2021-05-26 19:29:04.295 WeChat[50323:8889328] Alive 1475\n2021-05-26 19:30:44.306 WeChat[50323:8889328] Alive 1480\n2021-05-26 19:32:24.323 WeChat[50323:8889328] Alive 1485\n2021-05-26 19:34:04.338 WeChat[50323:8889328] Alive 1490\n2021-05-26 19:35:44.353 WeChat[50323:8889328] Alive 1495\n2021-05-26 19:37:24.360 WeChat[50323:8889328] Alive 1500\n2021-05-26 19:39:04.376 WeChat[50323:8889328] Alive 1505\n2021-05-26 19:40:44.389 WeChat[50323:8889328] Alive 1510\n2021-05-26 19:42:24.331 WeChat[50323:8889328] Alive 1515\n2021-05-26 19:44:04.346 WeChat[50323:8889328] Alive 1520\n2021-05-26 19:45:44.361 WeChat[50323:8889328] Alive 1525\n2021-05-26 19:47:24.372 WeChat[50323:8889328] Alive 1530\n2021-05-26 19:49:04.389 WeChat[50323:8889328] Alive 1535\n2021-05-26 19:50:44.402 WeChat[50323:8889328] Alive 1540\n2021-05-26 19:52:24.418 WeChat[50323:8889328] Alive 1545\n2021-05-26 19:54:04.427 WeChat[50323:8889328] Alive 1550\n2021-05-26 19:55:44.438 WeChat[50323:8889328] Alive 1555\n2021-05-26 19:57:24.473 WeChat[50323:8889328] Alive 1560\n2021-05-26 19:59:04.488 WeChat[50323:8889328] Alive 1565\n2021-05-26 20:00:44.499 WeChat[50323:8889328] Alive 1570\n2021-05-26 20:02:24.518 WeChat[50323:8889328] Alive 1575\n2021-05-26 20:04:04.534 WeChat[50323:8889328] Alive 1580\n2021-05-26 20:05:44.551 WeChat[50323:8889328] Alive 1585\n2021-05-26 20:07:24.596 WeChat[50323:8889328] Alive 1590\n2021-05-26 20:09:04.622 WeChat[50323:8889328] Alive 1595\n2021-05-26 20:10:44.641 WeChat[50323:8889328] Alive 1600\n2021-05-26 20:12:24.639 WeChat[50323:8889328] Alive 1605\n2021-05-26 20:14:04.650 WeChat[50323:8889328] Alive 1610\n2021-05-26 20:15:09.638 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 20:15:09.638 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 20:15:09.638 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 20:15:09.642 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 20:15:09.642 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 20:15:09.642 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 20:15:18.555 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 20:15:18.555 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 20:15:18.555 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 20:15:18.559 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 20:15:18.559 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 20:15:18.559 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 20:15:31.703 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 20:15:31.703 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 20:15:31.703 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 20:15:31.703 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 20:15:31.703 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 20:15:31.704 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 20:15:41.471 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 20:15:41.471 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 20:15:41.472 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 20:15:41.472 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 20:15:41.472 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 20:15:41.472 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 20:15:43.646 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 20:15:43.646 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 20:15:43.646 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 20:15:43.650 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 20:15:43.650 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 20:15:43.650 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 20:15:44.670 WeChat[50323:8889328] Alive 1615\n2021-05-26 20:17:24.678 WeChat[50323:8889328] Alive 1620\n2021-05-26 20:19:04.695 WeChat[50323:8889328] Alive 1625\n2021-05-26 20:20:44.704 WeChat[50323:8889328] Alive 1630\n2021-05-26 20:22:24.720 WeChat[50323:8889328] Alive 1635\n2021-05-26 20:24:04.732 WeChat[50323:8889328] Alive 1640\n2021-05-26 20:25:44.749 WeChat[50323:8889328] Alive 1645\n2021-05-26 20:27:24.729 WeChat[50323:8889328] Alive 1650\n2021-05-26 20:29:04.738 WeChat[50323:8889328] Alive 1655\n2021-05-26 20:30:44.755 WeChat[50323:8889328] Alive 1660\n2021-05-26 20:32:24.771 WeChat[50323:8889328] Alive 1665\n2021-05-26 20:34:04.786 WeChat[50323:8889328] Alive 1670\n2021-05-26 20:35:12.866 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 20:35:12.866 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 20:35:12.866 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 20:35:12.866 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 20:35:12.866 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 20:35:12.866 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 20:35:28.157 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 20:35:28.157 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 20:35:28.157 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 20:35:28.159 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 20:35:28.159 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 20:35:28.159 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 20:35:36.679 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 20:35:36.679 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 20:35:36.679 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 20:35:36.681 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 20:35:36.681 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 20:35:36.681 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 20:35:44.800 WeChat[50323:8889328] Alive 1675\n2021-05-26 20:37:24.818 WeChat[50323:8889328] Alive 1680\n2021-05-26 20:39:04.833 WeChat[50323:8889328] Alive 1685\n2021-05-26 20:40:02.209 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-26 20:40:10.214 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 20:40:10.214 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 20:40:10.214 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 20:40:10.215 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 20:40:10.215 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 20:40:10.215 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 20:40:44.847 WeChat[50323:8889328] Alive 1690\n2021-05-26 20:40:54.148 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 20:40:54.148 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 20:40:54.148 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 20:40:54.150 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-26 20:40:54.150 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-26 20:40:54.150 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-26 20:42:24.799 WeChat[50323:8889328] Alive 1695\n2021-05-26 20:44:04.811 WeChat[50323:8889328] Alive 1700\n2021-05-26 20:45:44.821 WeChat[50323:8889328] Alive 1705\n2021-05-26 20:47:24.835 WeChat[50323:8889328] Alive 1710\n2021-05-26 20:49:04.845 WeChat[50323:8889328] Alive 1715\n2021-05-26 20:50:44.859 WeChat[50323:8889328] Alive 1720\n2021-05-26 20:52:48.249 WeChat[50323:8889328] Alive 1725\n2021-05-26 23:07:24.421 WeChat[50323:8889328] Alive 1730\n2021-05-27 03:52:18.602 WeChat[50323:8889328] Alive 1735\n2021-05-27 07:52:37.145 WeChat[50323:8889328] Alive 1740\n[SQLITERK_OK] Saved master info with 89 entries.\n[SQLITERK_OK] Saved master info with 167 entries.\n2021-05-27 09:24:34.470 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:24:34.470 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:24:34.470 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:24:34.471 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:24:34.471 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:24:34.471 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:24:51.915 WeChat[50323:8889328] Alive 1745\n2021-05-27 09:26:31.925 WeChat[50323:8889328] Alive 1750\n2021-05-27 09:28:11.949 WeChat[50323:8889328] Alive 1755\n2021-05-27 09:29:51.968 WeChat[50323:8889328] Alive 1760\n2021-05-27 09:31:31.991 WeChat[50323:8889328] Alive 1765\n2021-05-27 09:33:12.015 WeChat[50323:8889328] Alive 1770\n2021-05-27 09:34:52.036 WeChat[50323:8889328] Alive 1775\n2021-05-27 09:36:32.060 WeChat[50323:8889328] Alive 1780\n2021-05-27 09:38:12.081 WeChat[50323:8889328] Alive 1785\n2021-05-27 09:39:51.981 WeChat[50323:8889328] Alive 1790\n2021-05-27 09:41:32.002 WeChat[50323:8889328] Alive 1795\n2021-05-27 09:43:12.013 WeChat[50323:8889328] Alive 1800\n2021-05-27 09:44:52.028 WeChat[50323:8889328] Alive 1805\n2021-05-27 09:45:27.493 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90f2b4a50> -[JTCaptureRequest init]\n2021-05-27 09:45:27.493 WeChat[50323:8889328] <JTCaptureManager: 0x7fa908878380> -[JTCaptureManager init]\n2021-05-27 09:45:27.513 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa914b6e050> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 09:45:27.567 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa914b6e050> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 09:45:27.576 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f293220> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 09:45:27.591 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fde89e10> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 09:45:27.615 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fde89e10> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 09:45:27.621 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fd69bec0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 09:45:30.371 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa8ff2e5ec0> -[JTToolbarView configAppearanceAndLayout]\n2021-05-27 09:45:30.385 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa90dc751f0> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-27 09:45:31.508 WeChat[50323:8889328] <JTPopoverView: 0x7fa8f672f4b0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-27 09:45:31.513 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fd10a280> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-27 09:45:31.521 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fd7f2960> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-27 09:45:31.522 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fde4e1b0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-27 09:45:31.522 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fd5236f0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-27 09:45:31.523 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd748310> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-27 09:45:31.527 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8fe1b87b0> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-27 09:45:31.543 WeChat[50323:8889328] <JTPopoverView: 0x7fa8f672f4b0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-27 09:45:31.544 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd748310> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-27 09:45:31.550 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fd10a280> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-27 09:45:32.882 WeChat[50323:8889328] <JTPopoverView: 0x7fa8f672f4b0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-27 09:45:32.883 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd748310> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-27 09:45:32.885 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fd10a280> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-27 09:45:32.913 WeChat[50323:8889328] <JTPopoverView: 0x7fa8f672f4b0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-27 09:45:32.914 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd748310> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-27 09:45:32.917 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fd10a280> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-27 09:45:38.455 WeChat[50323:8889328] <JTCaptureManager: 0x7fa908878380> -[JTCaptureManager dealloc]\n2021-05-27 09:45:38.456 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90f2b4a50> -[JTCaptureRequest dealloc]\n2021-05-27 09:45:38.456 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f293220> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 09:45:38.456 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa914b6e050> -[JTCaptureViewController dealloc]\n2021-05-27 09:45:38.461 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fd69bec0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 09:45:38.465 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fde89e10> -[JTCaptureViewController dealloc]\n2021-05-27 09:45:38.467 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa90dc751f0> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-27 09:45:38.471 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8fe1b87b0> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-27 09:46:32.041 WeChat[50323:8889328] Alive 1810\n2021-05-27 09:48:12.083 WeChat[50323:8889328] Alive 1815\n2021-05-27 09:48:33.828 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:48:33.828 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:48:33.828 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:48:33.829 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:48:33.829 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:48:33.829 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:48:34.108 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:48:34.108 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:48:34.109 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:48:34.109 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:48:34.109 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:48:34.109 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:48:36.422 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:48:36.422 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:48:36.422 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:48:36.422 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:48:36.422 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:48:36.422 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:49:08.084 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:49:08.084 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:49:08.084 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:49:08.085 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:49:08.085 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:49:08.085 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:49:13.585 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:49:13.585 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:49:13.585 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:49:13.586 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:49:13.586 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:49:13.586 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:49:15.805 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:49:15.805 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:49:15.805 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:49:15.806 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:49:15.806 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:49:15.806 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:49:52.071 WeChat[50323:8889328] Alive 1820\n2021-05-27 09:51:30.058 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:51:30.059 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:51:30.059 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:51:30.111 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:51:30.111 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:51:30.111 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:51:32.090 WeChat[50323:8889328] Alive 1825\n2021-05-27 09:51:35.165 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:51:35.165 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:51:35.165 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:51:35.165 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:51:35.165 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:51:35.166 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:52:24.660 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:52:24.660 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:52:24.660 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:52:24.710 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:52:24.710 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:52:24.710 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:53:12.106 WeChat[50323:8889328] Alive 1830\n2021-05-27 09:53:14.143 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:53:14.143 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:53:14.143 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:53:15.634 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:53:15.634 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:53:15.635 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:53:15.636 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:53:15.636 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:53:15.637 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:54:52.016 WeChat[50323:8889328] Alive 1835\n2021-05-27 09:56:00.131 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:56:00.131 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:56:00.131 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:56:00.132 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 09:56:00.132 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 09:56:00.132 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 09:56:32.034 WeChat[50323:8889328] Alive 1840\n2021-05-27 09:58:12.061 WeChat[50323:8889328] Alive 1845\n2021-05-27 09:59:52.105 WeChat[50323:8889328] Alive 1850\n2021-05-27 10:01:32.136 WeChat[50323:8889328] Alive 1855\n2021-05-27 10:03:12.148 WeChat[50323:8889328] Alive 1860\n2021-05-27 10:04:52.163 WeChat[50323:8889328] Alive 1865\n2021-05-27 10:06:32.191 WeChat[50323:8889328] Alive 1870\n2021-05-27 10:08:12.216 WeChat[50323:8889328] Alive 1875\n2021-05-27 10:09:52.267 WeChat[50323:8889328] Alive 1880\n2021-05-27 10:11:29.014 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:11:29.014 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:11:29.014 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:11:29.016 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:11:29.016 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:11:29.016 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:11:32.304 WeChat[50323:8889328] Alive 1885\n2021-05-27 10:12:18.598 WeChat[50323:8889328] Warning: Expected min height of view: (<NSPopoverTouchBarItemButton: 0x7fa8fe4eb6f0>) to be less than or equal to 30 but got a height of 32.000000. This error will be logged once per view in violation.\n2021-05-27 10:12:26.291 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:12:26.291 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:12:26.291 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:12:26.291 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:12:26.291 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:12:26.291 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:13:12.314 WeChat[50323:8889328] Alive 1890\n2021-05-27 10:14:52.330 WeChat[50323:8889328] Alive 1895\n2021-05-27 10:16:06.478 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:16:06.478 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:16:06.478 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:16:06.479 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:16:06.479 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:16:06.479 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:16:12.593 WeChat[50323:8889328] Warning: Expected min height of view: (<NSPopoverTouchBarItemButton: 0x7fa8ffeb1720>) to be less than or equal to 30 but got a height of 32.000000. This error will be logged once per view in violation.\n2021-05-27 10:16:23.978 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:16:23.978 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:16:23.978 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:16:23.978 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:16:23.978 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:16:23.978 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:16:32.348 WeChat[50323:8889328] Alive 1900\n2021-05-27 10:16:47.876 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:16:47.876 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:16:47.876 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:16:47.876 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:16:47.876 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:16:47.876 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:18:12.374 WeChat[50323:8889328] Alive 1905\n2021-05-27 10:23:25.063 WeChat[50323:8889328] Alive 1910\n2021-05-27 10:25:05.072 WeChat[50323:8889328] Alive 1915\n2021-05-27 10:26:45.087 WeChat[50323:8889328] Alive 1920\n2021-05-27 10:28:25.098 WeChat[50323:8889328] Alive 1925\n2021-05-27 10:29:31.272 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:29:31.272 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:29:31.272 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:29:31.272 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:29:31.272 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:29:31.272 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:29:37.796 WeChat[50323:8889328] Warning: Expected min height of view: (<NSPopoverTouchBarItemButton: 0x7fa8f7589c40>) to be less than or equal to 30 but got a height of 32.000000. This error will be logged once per view in violation.\n2021-05-27 10:30:02.599 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:30:02.599 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:30:02.599 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:30:02.599 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:30:02.599 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:30:02.599 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:30:05.110 WeChat[50323:8889328] Alive 1930\n2021-05-27 10:30:10.307 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:30:10.307 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:30:10.307 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:30:10.308 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:30:10.308 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:30:10.308 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:30:25.281 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:30:25.281 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:30:25.281 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:30:25.308 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:30:25.308 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:30:25.308 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:31:45.121 WeChat[50323:8889328] Alive 1935\n2021-05-27 10:33:25.136 WeChat[50323:8889328] Alive 1940\n2021-05-27 10:35:05.155 WeChat[50323:8889328] Alive 1945\n2021-05-27 10:36:45.180 WeChat[50323:8889328] Alive 1950\n2021-05-27 10:38:25.237 WeChat[50323:8889328] Alive 1955\n2021-05-27 10:39:17.302 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:39:17.302 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:39:17.302 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:39:17.325 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:39:17.325 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:39:17.325 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:39:44.589 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:39:44.589 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:39:44.589 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:40:01.529 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:40:01.529 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:40:01.529 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:40:01.539 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:40:01.539 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:40:01.539 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:40:05.258 WeChat[50323:8889328] Alive 1960\n2021-05-27 10:41:45.273 WeChat[50323:8889328] Alive 1965\n2021-05-27 10:43:25.296 WeChat[50323:8889328] Alive 1970\n2021-05-27 10:44:54.107 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:44:54.107 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:44:54.107 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:44:54.109 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:44:54.109 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:44:54.109 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:45:05.321 WeChat[50323:8889328] Alive 1975\n2021-05-27 10:45:16.307 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:45:16.307 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:45:16.307 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:45:16.308 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:45:16.308 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:45:16.308 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:46:25.354 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa914f32de0> -[JTCaptureRequest init]\n2021-05-27 10:46:25.355 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90ea6d200> -[JTCaptureManager init]\n2021-05-27 10:46:25.594 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90edde560> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 10:46:25.646 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90edde560> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 10:46:25.653 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa910ba2170> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 10:46:28.588 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa90de76a50> -[JTToolbarView configAppearanceAndLayout]\n2021-05-27 10:46:28.602 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fe099af0> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-27 10:46:29.703 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90ea6d200> -[JTCaptureManager dealloc]\n2021-05-27 10:46:29.703 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa914f32de0> -[JTCaptureRequest dealloc]\n2021-05-27 10:46:29.723 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa910ba2170> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 10:46:29.726 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90edde560> -[JTCaptureViewController dealloc]\n2021-05-27 10:46:29.727 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fe099af0> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-27 10:46:45.343 WeChat[50323:8889328] Alive 1980\n2021-05-27 10:47:27.476 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-27 10:47:27.504 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-27 10:48:25.365 WeChat[50323:8889328] Alive 1985\n2021-05-27 10:50:05.385 WeChat[50323:8889328] Alive 1990\n2021-05-27 10:51:45.404 WeChat[50323:8889328] Alive 1995\n2021-05-27 10:53:25.439 WeChat[50323:8889328] Alive 2000\n2021-05-27 10:55:05.460 WeChat[50323:8889328] Alive 2005\n2021-05-27 10:56:45.480 WeChat[50323:8889328] Alive 2010\n2021-05-27 10:56:55.017 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa8f8dfdff0> -[JTCaptureRequest init]\n2021-05-27 10:56:55.017 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90f47ba60> -[JTCaptureManager init]\n2021-05-27 10:56:55.082 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa914eba810> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 10:56:55.153 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa914eba810> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 10:56:55.160 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9130c2d80> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 10:56:55.621 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:56:55.621 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:56:55.621 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:56:55.622 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:56:55.622 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:56:55.622 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:56:57.142 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa901ddf610> -[JTToolbarView configAppearanceAndLayout]\n2021-05-27 10:56:57.158 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fd1f6390> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-27 10:56:57.837 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90f47ba60> -[JTCaptureManager dealloc]\n2021-05-27 10:56:57.837 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa8f8dfdff0> -[JTCaptureRequest dealloc]\n2021-05-27 10:56:57.838 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9130c2d80> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 10:56:57.839 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa914eba810> -[JTCaptureViewController dealloc]\n2021-05-27 10:56:57.847 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fd1f6390> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-27 10:56:57.868 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:56:57.868 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:56:57.868 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:56:57.869 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 10:56:57.869 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 10:56:57.869 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 10:58:25.505 WeChat[50323:8889328] Alive 2015\n2021-05-27 11:00:05.527 WeChat[50323:8889328] Alive 2020\n2021-05-27 11:01:45.544 WeChat[50323:8889328] Alive 2025\n2021-05-27 11:03:25.561 WeChat[50323:8889328] Alive 2030\n2021-05-27 11:05:05.648 WeChat[50323:8889328] Alive 2035\n2021-05-27 11:06:45.667 WeChat[50323:8889328] Alive 2040\n2021-05-27 11:07:43.530 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:07:43.530 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:07:43.530 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:07:43.530 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:07:43.530 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:07:43.530 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:07:45.317 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:07:45.317 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:07:45.317 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:07:45.398 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:07:45.398 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:07:45.398 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:08:25.681 WeChat[50323:8889328] Alive 2045\n2021-05-27 11:09:36.156 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:09:36.156 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:09:36.156 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:10:05.699 WeChat[50323:8889328] Alive 2050\n2021-05-27 11:11:15.338 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa8fd7a7270> -[JTCaptureRequest init]\n2021-05-27 11:11:15.341 WeChat[50323:8889328] <JTCaptureManager: 0x7fa914d0c770> -[JTCaptureManager init]\n2021-05-27 11:11:15.393 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa901612380> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 11:11:15.480 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa901612380> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 11:11:15.488 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90de76b10> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 11:11:15.518 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900dc1890> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 11:11:15.675 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900dc1890> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 11:11:15.682 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90185df00> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 11:11:16.878 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:11:16.878 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:11:16.878 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:11:16.878 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:11:16.878 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:11:16.879 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:11:18.327 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa8fd4e3ee0> -[JTToolbarView configAppearanceAndLayout]\n2021-05-27 11:11:18.343 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8ff24fe70> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-27 11:11:19.570 WeChat[50323:8889328] <JTCaptureManager: 0x7fa914d0c770> -[JTCaptureManager dealloc]\n2021-05-27 11:11:19.570 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa8fd7a7270> -[JTCaptureRequest dealloc]\n2021-05-27 11:11:19.576 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90de76b10> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 11:11:19.577 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa901612380> -[JTCaptureViewController dealloc]\n2021-05-27 11:11:19.579 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90185df00> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 11:11:19.580 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900dc1890> -[JTCaptureViewController dealloc]\n2021-05-27 11:11:19.584 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8ff24fe70> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-27 11:11:19.599 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:11:19.599 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:11:19.599 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:11:19.600 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:11:19.600 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:11:19.600 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:11:45.724 WeChat[50323:8889328] Alive 2055\n2021-05-27 11:12:19.897 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90ea526c0> -[JTCaptureRequest init]\n2021-05-27 11:12:19.897 WeChat[50323:8889328] <JTCaptureManager: 0x7fa8fe1cab80> -[JTCaptureManager init]\n2021-05-27 11:12:19.921 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f45ab20> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 11:12:19.968 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f45ab20> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 11:12:19.974 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f6e67e0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 11:12:19.992 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa914806d90> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 11:12:20.016 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa914806d90> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 11:12:20.022 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90fc3fc90> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 11:12:20.138 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:12:20.138 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:12:20.138 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:12:20.138 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:12:20.138 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:12:20.138 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:12:22.709 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa8fd588a90> -[JTToolbarView configAppearanceAndLayout]\n2021-05-27 11:12:22.723 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8f8e36550> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-27 11:12:23.846 WeChat[50323:8889328] <JTCaptureManager: 0x7fa8fe1cab80> -[JTCaptureManager dealloc]\n2021-05-27 11:12:23.846 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90ea526c0> -[JTCaptureRequest dealloc]\n2021-05-27 11:12:23.847 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f6e67e0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 11:12:23.847 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f45ab20> -[JTCaptureViewController dealloc]\n2021-05-27 11:12:23.850 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90fc3fc90> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 11:12:23.850 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa914806d90> -[JTCaptureViewController dealloc]\n2021-05-27 11:12:23.854 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8f8e36550> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-27 11:12:23.870 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:12:23.874 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:12:23.874 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:12:23.875 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:12:23.875 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:12:23.875 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:13:25.744 WeChat[50323:8889328] Alive 2060\n2021-05-27 11:15:02.372 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90dc9e940> -[JTCaptureRequest init]\n2021-05-27 11:15:02.372 WeChat[50323:8889328] <JTCaptureManager: 0x7fa906667eb0> -[JTCaptureManager init]\n2021-05-27 11:15:02.398 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa901731080> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 11:15:02.444 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa901731080> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 11:15:02.450 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa912a592f0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 11:15:02.475 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90176bfc0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 11:15:02.498 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90176bfc0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 11:15:02.504 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fe0ebd40> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 11:15:02.625 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:15:02.625 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:15:02.625 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:15:02.629 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:15:02.629 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:15:02.629 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:15:04.778 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa8fb38d1d0> -[JTToolbarView configAppearanceAndLayout]\n2021-05-27 11:15:04.793 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fa4926a0> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-27 11:15:05.739 WeChat[50323:8889328] <JTCaptureManager: 0x7fa906667eb0> -[JTCaptureManager dealloc]\n2021-05-27 11:15:05.740 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90dc9e940> -[JTCaptureRequest dealloc]\n2021-05-27 11:15:05.743 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa912a592f0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 11:15:05.745 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa901731080> -[JTCaptureViewController dealloc]\n2021-05-27 11:15:05.751 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fe0ebd40> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 11:15:05.751 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90176bfc0> -[JTCaptureViewController dealloc]\n2021-05-27 11:15:05.768 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fa4926a0> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-27 11:15:05.839 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:15:05.840 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:15:05.840 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:15:05.970 WeChat[50323:8889328] Alive 2065\n2021-05-27 11:15:05.970 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:15:05.970 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:15:05.970 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:16:45.779 WeChat[50323:8889328] Alive 2070\n2021-05-27 11:18:25.815 WeChat[50323:8889328] Alive 2075\n2021-05-27 11:20:05.845 WeChat[50323:8889328] Alive 2080\n2021-05-27 11:21:45.862 WeChat[50323:8889328] Alive 2085\n2021-05-27 11:23:25.887 WeChat[50323:8889328] Alive 2090\n2021-05-27 11:25:05.908 WeChat[50323:8889328] Alive 2095\n2021-05-27 11:26:45.928 WeChat[50323:8889328] Alive 2100\n2021-05-27 11:26:52.156 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:26:52.156 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:26:52.156 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:26:54.156 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:26:54.156 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:26:54.156 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:26:54.159 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:26:54.159 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:26:54.159 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:27:32.247 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa908c6f8d0> -[JTCaptureRequest init]\n2021-05-27 11:27:32.247 WeChat[50323:8889328] <JTCaptureManager: 0x7fa908cef340> -[JTCaptureManager init]\n2021-05-27 11:27:32.277 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90ebc6d90> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 11:27:32.318 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90ebc6d90> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 11:27:32.324 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90edf4ba0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 11:27:32.341 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f798990> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 11:27:32.363 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f798990> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 11:27:32.369 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fe36d930> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 11:27:32.597 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:27:32.597 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:27:32.597 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:27:32.614 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:27:32.615 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:27:32.615 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:27:35.130 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa914e497c0> -[JTToolbarView configAppearanceAndLayout]\n2021-05-27 11:27:35.146 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa90f0b4110> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-27 11:27:37.125 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fb34e0d0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-27 11:27:37.133 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fe4c2620> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-27 11:27:37.143 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8f7646270> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-27 11:27:37.144 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fdba3240> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-27 11:27:37.144 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8f8bf3320> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-27 11:27:37.144 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd1150b0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-27 11:27:37.152 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8fddf5950> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-27 11:27:37.156 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fb34e0d0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-27 11:27:37.157 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd1150b0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-27 11:27:37.159 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fe4c2620> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-27 11:27:39.343 WeChat[50323:8889328] <JTCaptureManager: 0x7fa908cef340> -[JTCaptureManager dealloc]\n2021-05-27 11:27:39.343 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa908c6f8d0> -[JTCaptureRequest dealloc]\n2021-05-27 11:27:39.344 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90edf4ba0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 11:27:39.344 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90ebc6d90> -[JTCaptureViewController dealloc]\n2021-05-27 11:27:39.347 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fe36d930> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 11:27:39.347 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f798990> -[JTCaptureViewController dealloc]\n2021-05-27 11:27:39.351 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa90f0b4110> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-27 11:27:39.354 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8fddf5950> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-27 11:27:39.370 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:27:39.370 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:27:39.370 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:27:39.370 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:27:39.370 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:27:39.371 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:27:48.645 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa9066988c0> -[JTCaptureRequest init]\n2021-05-27 11:27:48.645 WeChat[50323:8889328] <JTCaptureManager: 0x7fa8fb45a160> -[JTCaptureManager init]\n2021-05-27 11:27:48.671 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900c1e4a0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 11:27:48.719 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900c1e4a0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 11:27:48.742 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90edf4ba0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 11:27:48.778 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90fa42610> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 11:27:48.881 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90fa42610> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 11:27:48.888 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8f986fd20> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 11:27:49.381 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:27:49.381 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:27:49.381 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:27:49.468 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:27:49.468 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:27:49.469 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:27:51.330 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa914e497c0> -[JTToolbarView configAppearanceAndLayout]\n2021-05-27 11:27:51.344 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa90fabb0f0> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-27 11:27:52.136 WeChat[50323:8889328] <JTCaptureManager: 0x7fa8fb45a160> -[JTCaptureManager dealloc]\n2021-05-27 11:27:52.136 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa9066988c0> -[JTCaptureRequest dealloc]\n2021-05-27 11:27:52.137 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90edf4ba0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 11:27:52.137 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900c1e4a0> -[JTCaptureViewController dealloc]\n2021-05-27 11:27:52.139 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8f986fd20> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 11:27:52.140 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90fa42610> -[JTCaptureViewController dealloc]\n2021-05-27 11:27:52.140 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa90fabb0f0> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-27 11:27:52.156 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:27:52.156 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:27:52.156 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:27:52.156 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:27:52.156 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:27:52.156 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:28:05.563 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:28:05.563 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:28:05.563 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:28:25.951 WeChat[50323:8889328] Alive 2105\n2021-05-27 11:28:40.111 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:28:40.111 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:28:40.111 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:28:40.111 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:28:40.111 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:28:40.111 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:29:22.283 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa906791140> -[JTCaptureRequest init]\n2021-05-27 11:29:22.284 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90ebe3640> -[JTCaptureManager init]\n2021-05-27 11:29:22.312 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f4f2c40> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 11:29:22.357 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f4f2c40> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 11:29:22.363 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90eb07130> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 11:29:22.378 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9088480a0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 11:29:22.401 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9088480a0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 11:29:22.407 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f218cd0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 11:29:22.530 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:29:22.530 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:29:22.530 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:29:22.530 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:29:22.530 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:29:22.530 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:29:25.564 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa8fb770490> -[JTToolbarView configAppearanceAndLayout]\n2021-05-27 11:29:25.582 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fb655270> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-27 11:29:26.510 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90ebe3640> -[JTCaptureManager dealloc]\n2021-05-27 11:29:26.510 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa906791140> -[JTCaptureRequest dealloc]\n2021-05-27 11:29:26.510 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90eb07130> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 11:29:26.511 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f4f2c40> -[JTCaptureViewController dealloc]\n2021-05-27 11:29:26.513 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f218cd0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 11:29:26.513 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9088480a0> -[JTCaptureViewController dealloc]\n2021-05-27 11:29:26.516 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fb655270> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-27 11:29:26.529 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:29:26.542 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:29:26.542 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:29:26.543 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:29:26.543 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:29:26.543 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:29:39.365 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:29:39.365 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:29:39.365 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:29:39.373 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 11:29:39.373 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 11:29:39.373 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 11:30:05.963 WeChat[50323:8889328] Alive 2110\n2021-05-27 11:31:45.976 WeChat[50323:8889328] Alive 2115\n2021-05-27 11:33:25.989 WeChat[50323:8889328] Alive 2120\n2021-05-27 11:35:05.993 WeChat[50323:8889328] Alive 2125\n2021-05-27 11:36:46.009 WeChat[50323:8889328] Alive 2130\n2021-05-27 11:38:25.852 WeChat[50323:8889328] Alive 2135\n2021-05-27 11:40:05.874 WeChat[50323:8889328] Alive 2140\n2021-05-27 11:41:45.893 WeChat[50323:8889328] Alive 2145\n2021-05-27 11:43:25.905 WeChat[50323:8889328] Alive 2150\n2021-05-27 11:45:05.922 WeChat[50323:8889328] Alive 2155\n2021-05-27 11:46:45.930 WeChat[50323:8889328] Alive 2160\n2021-05-27 11:48:25.941 WeChat[50323:8889328] Alive 2165\n2021-05-27 11:50:05.957 WeChat[50323:8889328] Alive 2170\n2021-05-27 11:51:45.976 WeChat[50323:8889328] Alive 2175\n2021-05-27 11:53:26.048 WeChat[50323:8889328] Alive 2180\n2021-05-27 11:55:06.060 WeChat[50323:8889328] Alive 2185\n2021-05-27 11:56:46.072 WeChat[50323:8889328] Alive 2190\n2021-05-27 11:58:26.089 WeChat[50323:8889328] Alive 2195\n2021-05-27 12:00:06.109 WeChat[50323:8889328] Alive 2200\n2021-05-27 12:01:46.124 WeChat[50323:8889328] Alive 2205\n2021-05-27 12:03:26.133 WeChat[50323:8889328] Alive 2210\n2021-05-27 12:05:06.146 WeChat[50323:8889328] Alive 2215\n2021-05-27 12:06:46.160 WeChat[50323:8889328] Alive 2220\n2021-05-27 12:08:26.201 WeChat[50323:8889328] Alive 2225\n2021-05-27 12:10:06.220 WeChat[50323:8889328] Alive 2230\n2021-05-27 12:11:46.244 WeChat[50323:8889328] Alive 2235\n2021-05-27 12:13:26.283 WeChat[50323:8889328] Alive 2240\n2021-05-27 12:15:06.304 WeChat[50323:8889328] Alive 2245\n2021-05-27 12:16:46.322 WeChat[50323:8889328] Alive 2250\n2021-05-27 12:18:26.337 WeChat[50323:8889328] Alive 2255\n2021-05-27 12:20:06.366 WeChat[50323:8889328] Alive 2260\n2021-05-27 12:21:46.404 WeChat[50323:8889328] Alive 2265\n2021-05-27 12:23:26.415 WeChat[50323:8889328] Alive 2270\n2021-05-27 12:25:06.456 WeChat[50323:8889328] Alive 2275\n2021-05-27 12:26:46.491 WeChat[50323:8889328] Alive 2280\n2021-05-27 12:28:26.507 WeChat[50323:8889328] Alive 2285\n2021-05-27 12:30:06.523 WeChat[50323:8889328] Alive 2290\n2021-05-27 12:31:46.544 WeChat[50323:8889328] Alive 2295\n2021-05-27 12:33:26.560 WeChat[50323:8889328] Alive 2300\n2021-05-27 12:35:06.576 WeChat[50323:8889328] Alive 2305\n2021-05-27 12:36:46.590 WeChat[50323:8889328] Alive 2310\n2021-05-27 12:38:26.265 WeChat[50323:8889328] Alive 2315\n2021-05-27 12:40:06.277 WeChat[50323:8889328] Alive 2320\n2021-05-27 12:41:46.286 WeChat[50323:8889328] Alive 2325\n2021-05-27 12:43:26.301 WeChat[50323:8889328] Alive 2330\n2021-05-27 12:45:06.310 WeChat[50323:8889328] Alive 2335\n2021-05-27 12:46:46.323 WeChat[50323:8889328] Alive 2340\n2021-05-27 12:48:26.343 WeChat[50323:8889328] Alive 2345\n2021-05-27 12:50:06.345 WeChat[50323:8889328] Alive 2350\n2021-05-27 12:51:46.355 WeChat[50323:8889328] Alive 2355\n2021-05-27 12:53:26.625 WeChat[50323:8889328] Alive 2360\n2021-05-27 12:55:06.650 WeChat[50323:8889328] Alive 2365\n2021-05-27 12:56:46.669 WeChat[50323:8889328] Alive 2370\n2021-05-27 12:58:26.703 WeChat[50323:8889328] Alive 2375\n2021-05-27 13:00:06.739 WeChat[50323:8889328] Alive 2380\n2021-05-27 13:01:46.758 WeChat[50323:8889328] Alive 2385\n2021-05-27 13:03:26.782 WeChat[50323:8889328] Alive 2390\n2021-05-27 13:05:06.814 WeChat[50323:8889328] Alive 2395\n2021-05-27 13:06:46.831 WeChat[50323:8889328] Alive 2400\n2021-05-27 13:08:26.816 WeChat[50323:8889328] Alive 2405\n2021-05-27 13:10:06.836 WeChat[50323:8889328] Alive 2410\n2021-05-27 13:11:46.870 WeChat[50323:8889328] Alive 2415\n2021-05-27 13:13:26.903 WeChat[50323:8889328] Alive 2420\n2021-05-27 13:15:06.926 WeChat[50323:8889328] Alive 2425\n2021-05-27 13:16:46.955 WeChat[50323:8889328] Alive 2430\n2021-05-27 13:18:26.990 WeChat[50323:8889328] Alive 2435\n2021-05-27 13:20:07.026 WeChat[50323:8889328] Alive 2440\n2021-05-27 13:21:47.058 WeChat[50323:8889328] Alive 2445\n2021-05-27 13:23:27.231 WeChat[50323:8889328] Alive 2450\n2021-05-27 13:25:07.269 WeChat[50323:8889328] Alive 2455\n2021-05-27 13:26:47.300 WeChat[50323:8889328] Alive 2460\n2021-05-27 13:28:27.341 WeChat[50323:8889328] Alive 2465\n2021-05-27 13:30:07.368 WeChat[50323:8889328] Alive 2470\n2021-05-27 13:31:47.405 WeChat[50323:8889328] Alive 2475\n2021-05-27 13:33:27.440 WeChat[50323:8889328] Alive 2480\n2021-05-27 13:35:07.480 WeChat[50323:8889328] Alive 2485\n2021-05-27 13:36:47.519 WeChat[50323:8889328] Alive 2490\n2021-05-27 13:38:27.564 WeChat[50323:8889328] Alive 2495\n2021-05-27 13:40:07.581 WeChat[50323:8889328] Alive 2500\n2021-05-27 13:41:47.623 WeChat[50323:8889328] Alive 2505\n2021-05-27 13:43:27.662 WeChat[50323:8889328] Alive 2510\n2021-05-27 13:45:07.702 WeChat[50323:8889328] Alive 2515\n2021-05-27 13:46:47.733 WeChat[50323:8889328] Alive 2520\n2021-05-27 13:48:27.763 WeChat[50323:8889328] Alive 2525\n2021-05-27 13:50:07.805 WeChat[50323:8889328] Alive 2530\n2021-05-27 13:51:47.836 WeChat[50323:8889328] Alive 2535\n2021-05-27 13:53:27.889 WeChat[50323:8889328] Alive 2540\n2021-05-27 13:55:07.919 WeChat[50323:8889328] Alive 2545\n2021-05-27 13:56:47.953 WeChat[50323:8889328] Alive 2550\n2021-05-27 13:58:27.983 WeChat[50323:8889328] Alive 2555\n2021-05-27 14:00:08.018 WeChat[50323:8889328] Alive 2560\n2021-05-27 14:01:48.050 WeChat[50323:8889328] Alive 2565\n2021-05-27 14:03:28.069 WeChat[50323:8889328] Alive 2570\n2021-05-27 14:05:08.095 WeChat[50323:8889328] Alive 2575\n2021-05-27 14:06:48.120 WeChat[50323:8889328] Alive 2580\n2021-05-27 14:08:28.198 WeChat[50323:8889328] Alive 2585\n2021-05-27 14:10:08.214 WeChat[50323:8889328] Alive 2590\n2021-05-27 14:11:48.233 WeChat[50323:8889328] Alive 2595\n2021-05-27 14:13:28.253 WeChat[50323:8889328] Alive 2600\n2021-05-27 14:15:08.278 WeChat[50323:8889328] Alive 2605\n2021-05-27 14:16:48.299 WeChat[50323:8889328] Alive 2610\n2021-05-27 14:18:28.319 WeChat[50323:8889328] Alive 2615\n2021-05-27 14:20:08.341 WeChat[50323:8889328] Alive 2620\n2021-05-27 14:21:48.357 WeChat[50323:8889328] Alive 2625\n2021-05-27 14:23:28.301 WeChat[50323:8889328] Alive 2630\n2021-05-27 14:25:08.317 WeChat[50323:8889328] Alive 2635\n2021-05-27 14:26:48.332 WeChat[50323:8889328] Alive 2640\n2021-05-27 14:28:28.348 WeChat[50323:8889328] Alive 2645\n2021-05-27 14:30:08.373 WeChat[50323:8889328] Alive 2650\n2021-05-27 14:31:48.395 WeChat[50323:8889328] Alive 2655\n2021-05-27 14:33:28.413 WeChat[50323:8889328] Alive 2660\n2021-05-27 14:35:08.434 WeChat[50323:8889328] Alive 2665\n2021-05-27 14:36:48.450 WeChat[50323:8889328] Alive 2670\n2021-05-27 14:38:28.432 WeChat[50323:8889328] Alive 2675\n2021-05-27 14:40:08.447 WeChat[50323:8889328] Alive 2680\n2021-05-27 14:41:48.473 WeChat[50323:8889328] Alive 2685\n2021-05-27 14:43:28.495 WeChat[50323:8889328] Alive 2690\n2021-05-27 14:45:08.509 WeChat[50323:8889328] Alive 2695\n2021-05-27 15:02:00.148 WeChat[50323:8889328] Alive 2700\n2021-05-27 15:03:40.149 WeChat[50323:8889328] Alive 2705\n2021-05-27 15:05:20.160 WeChat[50323:8889328] Alive 2710\n2021-05-27 15:07:00.177 WeChat[50323:8889328] Alive 2715\n2021-05-27 15:08:40.193 WeChat[50323:8889328] Alive 2720\n2021-05-27 15:10:20.203 WeChat[50323:8889328] Alive 2725\n2021-05-27 15:12:00.218 WeChat[50323:8889328] Alive 2730\n2021-05-27 15:13:11.882 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 15:13:11.882 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 15:13:11.882 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 15:13:11.882 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 15:13:11.882 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 15:13:11.882 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 15:13:40.237 WeChat[50323:8889328] Alive 2735\n2021-05-27 15:15:20.255 WeChat[50323:8889328] Alive 2740\n2021-05-27 15:17:00.275 WeChat[50323:8889328] Alive 2745\n2021-05-27 15:18:40.290 WeChat[50323:8889328] Alive 2750\n2021-05-27 15:20:20.268 WeChat[50323:8889328] Alive 2755\n2021-05-27 15:22:00.311 WeChat[50323:8889328] Alive 2760\n2021-05-27 15:22:12.752 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 15:22:12.752 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 15:22:12.752 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 15:22:12.780 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 15:22:12.780 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 15:22:12.781 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 15:23:40.332 WeChat[50323:8889328] Alive 2765\n2021-05-27 15:25:20.354 WeChat[50323:8889328] Alive 2770\n2021-05-27 15:27:00.371 WeChat[50323:8889328] Alive 2775\n2021-05-27 15:28:40.389 WeChat[50323:8889328] Alive 2780\n2021-05-27 15:30:20.404 WeChat[50323:8889328] Alive 2785\n2021-05-27 15:32:00.421 WeChat[50323:8889328] Alive 2790\n2021-05-27 15:33:40.440 WeChat[50323:8889328] Alive 2795\n2021-05-27 15:35:20.357 WeChat[50323:8889328] Alive 2800\n2021-05-27 15:37:00.364 WeChat[50323:8889328] Alive 2805\n2021-05-27 15:38:40.377 WeChat[50323:8889328] Alive 2810\n2021-05-27 15:40:20.389 WeChat[50323:8889328] Alive 2815\n2021-05-27 15:42:00.403 WeChat[50323:8889328] Alive 2820\n2021-05-27 15:43:40.421 WeChat[50323:8889328] Alive 2825\n2021-05-27 15:45:20.436 WeChat[50323:8889328] Alive 2830\n2021-05-27 15:47:00.452 WeChat[50323:8889328] Alive 2835\n2021-05-27 15:48:40.461 WeChat[50323:8889328] Alive 2840\n2021-05-27 15:48:40.639 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 15:48:40.639 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 15:48:40.639 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 15:48:40.665 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 15:48:40.665 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 15:48:40.665 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 15:48:42.178 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90debd720> -[JTCaptureRequest init]\n2021-05-27 15:48:42.180 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90eb108b0> -[JTCaptureManager init]\n2021-05-27 15:48:42.244 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f9b4b30> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 15:48:42.301 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f9b4b30> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 15:48:42.309 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa900a0b610> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 15:48:42.337 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fb546710> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 15:48:42.360 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fb546710> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 15:48:42.367 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90eddf1f0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 15:48:45.612 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa8fe293910> -[JTToolbarView configAppearanceAndLayout]\n2021-05-27 15:48:45.628 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa90f367df0> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-27 15:48:46.491 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90eb108b0> -[JTCaptureManager dealloc]\n2021-05-27 15:48:46.491 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90debd720> -[JTCaptureRequest dealloc]\n2021-05-27 15:48:46.510 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90eddf1f0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 15:48:46.510 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fb546710> -[JTCaptureViewController dealloc]\n2021-05-27 15:48:46.512 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa900a0b610> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 15:48:46.512 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f9b4b30> -[JTCaptureViewController dealloc]\n2021-05-27 15:48:46.513 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa90f367df0> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-27 15:48:47.781 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 15:48:47.781 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 15:48:47.782 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 15:48:47.787 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 15:48:47.787 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 15:48:47.787 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 15:50:20.148 WeChat[50323:8889328] Alive 2845\n2021-05-27 15:52:00.161 WeChat[50323:8889328] Alive 2850\n2021-05-27 15:52:32.650 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 15:52:32.650 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 15:52:32.651 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 15:52:32.669 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 15:52:32.669 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 15:52:32.669 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 15:52:35.300 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90660c170> -[JTCaptureRequest init]\n2021-05-27 15:52:35.300 WeChat[50323:8889328] <JTCaptureManager: 0x7fa9066710f0> -[JTCaptureManager init]\n2021-05-27 15:52:35.346 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90fc67c50> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 15:52:35.390 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90fc67c50> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 15:52:35.396 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fb7b4710> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 15:52:35.416 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90dc1ca00> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 15:52:35.440 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90dc1ca00> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 15:52:35.446 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa901683050> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 15:52:37.705 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa912de9190> -[JTToolbarView configAppearanceAndLayout]\n2021-05-27 15:52:37.718 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa911b4ca50> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-27 15:52:38.938 WeChat[50323:8889328] <JTPopoverView: 0x7fa90174b740> -[JTPopoverView configAppearanceAndLayout]\n2021-05-27 15:52:38.943 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa9011dc470> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-27 15:52:38.955 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa9027ee2e0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-27 15:52:38.955 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa902797520> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-27 15:52:38.956 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa902798680> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-27 15:52:38.956 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9011dca20> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-27 15:52:38.961 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8fe534350> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-27 15:52:38.965 WeChat[50323:8889328] <JTPopoverView: 0x7fa90174b740> -[JTPopoverView configAppearanceAndLayout]\n2021-05-27 15:52:38.967 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9011dca20> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-27 15:52:38.992 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa9011dc470> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-27 15:52:42.556 WeChat[50323:8889328] <JTPopoverView: 0x7fa90174b740> -[JTPopoverView configAppearanceAndLayout]\n2021-05-27 15:52:42.558 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9011dca20> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-27 15:52:42.560 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa9011dc470> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-27 15:52:42.574 WeChat[50323:8889328] <JTPopoverView: 0x7fa90174b740> -[JTPopoverView configAppearanceAndLayout]\n2021-05-27 15:52:42.575 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9011dca20> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-27 15:52:42.578 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa9011dc470> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-27 15:52:44.617 WeChat[50323:8889328] <JTPopoverView: 0x7fa90174b740> -[JTPopoverView configAppearanceAndLayout]\n2021-05-27 15:52:44.618 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9011dca20> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-27 15:52:44.621 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa9011dc470> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-27 15:52:44.630 WeChat[50323:8889328] <JTPopoverView: 0x7fa90174b740> -[JTPopoverView configAppearanceAndLayout]\n2021-05-27 15:52:44.631 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9011dca20> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-27 15:52:44.632 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa9011dc470> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-27 15:52:46.474 WeChat[50323:8889328] <JTPopoverView: 0x7fa90174b740> -[JTPopoverView configAppearanceAndLayout]\n2021-05-27 15:52:46.475 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9011dca20> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-27 15:52:46.478 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa9011dc470> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-27 15:52:46.489 WeChat[50323:8889328] <JTPopoverView: 0x7fa90174b740> -[JTPopoverView configAppearanceAndLayout]\n2021-05-27 15:52:46.490 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9011dca20> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-27 15:52:46.492 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa9011dc470> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-27 15:52:48.131 WeChat[50323:8889328] <JTCaptureManager: 0x7fa9066710f0> -[JTCaptureManager dealloc]\n2021-05-27 15:52:48.131 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90660c170> -[JTCaptureRequest dealloc]\n2021-05-27 15:52:48.131 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa901683050> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 15:52:48.131 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90dc1ca00> -[JTCaptureViewController dealloc]\n2021-05-27 15:52:48.133 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fb7b4710> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 15:52:48.134 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90fc67c50> -[JTCaptureViewController dealloc]\n2021-05-27 15:52:48.135 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa911b4ca50> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-27 15:52:48.140 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8fe534350> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-27 15:52:49.749 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 15:52:49.749 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 15:52:49.749 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 15:52:49.753 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 15:52:49.753 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 15:52:49.753 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 15:52:53.086 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 15:52:53.086 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 15:52:53.086 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 15:52:53.086 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 15:52:53.086 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 15:52:53.086 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 15:53:40.170 WeChat[50323:8889328] Alive 2855\n2021-05-27 15:55:20.182 WeChat[50323:8889328] Alive 2860\n2021-05-27 15:57:00.190 WeChat[50323:8889328] Alive 2865\n2021-05-27 15:58:40.198 WeChat[50323:8889328] Alive 2870\n2021-05-27 16:00:20.212 WeChat[50323:8889328] Alive 2875\n2021-05-27 16:02:00.228 WeChat[50323:8889328] Alive 2880\n2021-05-27 16:03:40.241 WeChat[50323:8889328] Alive 2885\n2021-05-27 16:05:20.272 WeChat[50323:8889328] Alive 2890\n2021-05-27 16:07:00.299 WeChat[50323:8889328] Alive 2895\n2021-05-27 16:08:40.311 WeChat[50323:8889328] Alive 2900\n2021-05-27 16:10:20.327 WeChat[50323:8889328] Alive 2905\n2021-05-27 16:12:00.344 WeChat[50323:8889328] Alive 2910\n2021-05-27 16:13:40.378 WeChat[50323:8889328] Alive 2915\n2021-05-27 16:15:20.411 WeChat[50323:8889328] Alive 2920\n2021-05-27 16:17:00.429 WeChat[50323:8889328] Alive 2925\n2021-05-27 16:18:40.433 WeChat[50323:8889328] Alive 2930\n2021-05-27 16:20:20.475 WeChat[50323:8889328] Alive 2935\n2021-05-27 16:21:41.546 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90f8b29c0> -[JTCaptureRequest init]\n2021-05-27 16:21:41.546 WeChat[50323:8889328] <JTCaptureManager: 0x7fa8f66e9b90> -[JTCaptureManager init]\n2021-05-27 16:21:41.584 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa908c71d30> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 16:21:41.661 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa908c71d30> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 16:21:41.676 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90eac4900> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 16:21:41.717 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa901d09bf0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-27 16:21:41.803 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa901d09bf0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-27 16:21:41.809 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa901808f00> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-27 16:21:46.194 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa900cc23d0> -[JTToolbarView configAppearanceAndLayout]\n2021-05-27 16:21:46.205 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa90f0c6e20> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-27 16:21:50.577 WeChat[50323:8889328] <JTPopoverView: 0x7fa901147530> -[JTPopoverView configAppearanceAndLayout]\n2021-05-27 16:21:50.582 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90edee8c0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-27 16:21:50.591 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa910b9a9b0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-27 16:21:50.591 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa900c7dde0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-27 16:21:50.592 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa900c8f9d0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-27 16:21:50.592 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fa4c2840> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-27 16:21:50.595 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8fd690e30> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-27 16:21:50.601 WeChat[50323:8889328] <JTPopoverView: 0x7fa901147530> -[JTPopoverView configAppearanceAndLayout]\n2021-05-27 16:21:50.602 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fa4c2840> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-27 16:21:50.605 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90edee8c0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-27 16:21:53.887 WeChat[50323:8889328] <JTPopoverView: 0x7fa901147530> -[JTPopoverView configAppearanceAndLayout]\n2021-05-27 16:21:53.889 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fa4c2840> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-27 16:21:53.891 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90edee8c0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-27 16:21:53.902 WeChat[50323:8889328] <JTPopoverView: 0x7fa901147530> -[JTPopoverView configAppearanceAndLayout]\n2021-05-27 16:21:53.903 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fa4c2840> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-27 16:21:53.906 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90edee8c0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-27 16:21:56.034 WeChat[50323:8889328] <JTCaptureManager: 0x7fa8f66e9b90> -[JTCaptureManager dealloc]\n2021-05-27 16:21:56.034 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90f8b29c0> -[JTCaptureRequest dealloc]\n2021-05-27 16:21:56.034 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90eac4900> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 16:21:56.035 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa908c71d30> -[JTCaptureViewController dealloc]\n2021-05-27 16:21:56.037 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa901808f00> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-27 16:21:56.038 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa901d09bf0> -[JTCaptureViewController dealloc]\n2021-05-27 16:21:56.040 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa90f0c6e20> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-27 16:21:56.046 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8fd690e30> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-27 16:22:00.508 WeChat[50323:8889328] Alive 2940\n2021-05-27 16:22:31.715 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 16:22:31.715 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 16:22:31.715 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 16:22:31.716 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 16:22:31.717 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 16:22:31.717 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 16:22:45.877 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 16:22:45.877 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 16:22:45.877 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 16:22:45.879 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 16:22:45.879 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 16:22:45.879 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 16:23:40.518 WeChat[50323:8889328] Alive 2945\n2021-05-27 16:25:20.548 WeChat[50323:8889328] Alive 2950\n2021-05-27 16:27:00.579 WeChat[50323:8889328] Alive 2955\n2021-05-27 16:28:40.588 WeChat[50323:8889328] Alive 2960\n2021-05-27 16:30:20.600 WeChat[50323:8889328] Alive 2965\n2021-05-27 16:32:00.613 WeChat[50323:8889328] Alive 2970\n2021-05-27 16:33:40.635 WeChat[50323:8889328] Alive 2975\n2021-05-27 16:35:20.763 WeChat[50323:8889328] Alive 2980\n2021-05-27 16:36:35.369 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 16:36:35.369 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 16:36:35.369 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 16:36:35.370 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 16:36:35.370 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 16:36:35.370 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 16:37:00.770 WeChat[50323:8889328] Alive 2985\n2021-05-27 16:38:40.781 WeChat[50323:8889328] Alive 2990\n2021-05-27 16:40:20.796 WeChat[50323:8889328] Alive 2995\n2021-05-27 16:42:00.802 WeChat[50323:8889328] Alive 3000\n2021-05-27 16:43:31.385 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 16:43:31.385 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 16:43:31.385 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 16:43:31.385 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 16:43:31.385 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 16:43:31.386 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 16:43:40.815 WeChat[50323:8889328] Alive 3005\n2021-05-27 16:45:20.826 WeChat[50323:8889328] Alive 3010\n2021-05-27 16:47:00.843 WeChat[50323:8889328] Alive 3015\n2021-05-27 16:48:40.851 WeChat[50323:8889328] Alive 3020\n2021-05-27 16:50:21.030 WeChat[50323:8889328] Alive 3025\n2021-05-27 16:52:01.049 WeChat[50323:8889328] Alive 3030\n2021-05-27 16:53:41.058 WeChat[50323:8889328] Alive 3035\n2021-05-27 16:55:21.079 WeChat[50323:8889328] Alive 3040\n2021-05-27 16:57:01.097 WeChat[50323:8889328] Alive 3045\n2021-05-27 16:58:41.109 WeChat[50323:8889328] Alive 3050\n2021-05-27 17:00:21.144 WeChat[50323:8889328] Alive 3055\n2021-05-27 17:02:01.155 WeChat[50323:8889328] Alive 3060\n2021-05-27 17:03:41.166 WeChat[50323:8889328] Alive 3065\n2021-05-27 17:05:21.282 WeChat[50323:8889328] Alive 3070\n2021-05-27 17:07:01.297 WeChat[50323:8889328] Alive 3075\n2021-05-27 17:08:41.317 WeChat[50323:8889328] Alive 3080\n2021-05-27 17:10:21.328 WeChat[50323:8889328] Alive 3085\n2021-05-27 17:12:01.341 WeChat[50323:8889328] Alive 3090\n2021-05-27 17:13:41.356 WeChat[50323:8889328] Alive 3095\n2021-05-27 17:15:21.371 WeChat[50323:8889328] Alive 3100\n2021-05-27 17:17:01.388 WeChat[50323:8889328] Alive 3105\n2021-05-27 17:18:41.407 WeChat[50323:8889328] Alive 3110\n2021-05-27 17:20:21.421 WeChat[50323:8889328] Alive 3115\n2021-05-27 17:22:01.438 WeChat[50323:8889328] Alive 3120\n2021-05-27 17:23:41.454 WeChat[50323:8889328] Alive 3125\n2021-05-27 17:25:21.478 WeChat[50323:8889328] Alive 3130\n2021-05-27 17:27:01.495 WeChat[50323:8889328] Alive 3135\n2021-05-27 17:28:41.508 WeChat[50323:8889328] Alive 3140\n2021-05-27 17:30:21.529 WeChat[50323:8889328] Alive 3145\n2021-05-27 17:32:01.547 WeChat[50323:8889328] Alive 3150\n2021-05-27 17:33:41.567 WeChat[50323:8889328] Alive 3155\n2021-05-27 17:35:21.681 WeChat[50323:8889328] Alive 3160\n2021-05-27 17:37:01.697 WeChat[50323:8889328] Alive 3165\n2021-05-27 17:38:41.714 WeChat[50323:8889328] Alive 3170\n2021-05-27 17:40:21.736 WeChat[50323:8889328] Alive 3175\n2021-05-27 17:42:01.750 WeChat[50323:8889328] Alive 3180\n2021-05-27 17:43:41.767 WeChat[50323:8889328] Alive 3185\n2021-05-27 17:45:21.786 WeChat[50323:8889328] Alive 3190\n2021-05-27 17:47:01.802 WeChat[50323:8889328] Alive 3195\n2021-05-27 17:48:41.826 WeChat[50323:8889328] Alive 3200\n2021-05-27 17:50:21.756 WeChat[50323:8889328] Alive 3205\n2021-05-27 17:52:01.796 WeChat[50323:8889328] Alive 3210\n2021-05-27 17:53:41.827 WeChat[50323:8889328] Alive 3215\n2021-05-27 17:55:21.848 WeChat[50323:8889328] Alive 3220\n2021-05-27 17:57:01.887 WeChat[50323:8889328] Alive 3225\n2021-05-27 17:58:42.248 WeChat[50323:8889328] Alive 3230\n2021-05-27 17:58:51.274 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 17:58:51.274 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 17:58:51.274 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 17:58:51.277 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 17:58:51.277 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 17:58:51.277 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 18:00:21.935 WeChat[50323:8889328] Alive 3235\n2021-05-27 18:02:01.946 WeChat[50323:8889328] Alive 3240\n2021-05-27 18:03:41.962 WeChat[50323:8889328] Alive 3245\n2021-05-27 18:05:21.987 WeChat[50323:8889328] Alive 3250\n2021-05-27 18:07:02.018 WeChat[50323:8889328] Alive 3255\n2021-05-27 18:08:42.034 WeChat[50323:8889328] Alive 3260\n2021-05-27 18:10:22.046 WeChat[50323:8889328] Alive 3265\n2021-05-27 18:12:02.063 WeChat[50323:8889328] Alive 3270\n[SQLITERK_OK] Saved master info with 121 entries.\n2021-05-27 18:13:42.084 WeChat[50323:8889328] Alive 3275\n2021-05-27 18:15:22.099 WeChat[50323:8889328] Alive 3280\n2021-05-27 18:17:02.113 WeChat[50323:8889328] Alive 3285\n2021-05-27 18:18:42.122 WeChat[50323:8889328] Alive 3290\n2021-05-27 18:20:22.211 WeChat[50323:8889328] Alive 3295\n2021-05-27 18:22:02.232 WeChat[50323:8889328] Alive 3300\n2021-05-27 18:23:42.245 WeChat[50323:8889328] Alive 3305\n2021-05-27 18:25:22.263 WeChat[50323:8889328] Alive 3310\n2021-05-27 18:27:02.276 WeChat[50323:8889328] Alive 3315\n2021-05-27 18:28:42.295 WeChat[50323:8889328] Alive 3320\n2021-05-27 18:30:22.312 WeChat[50323:8889328] Alive 3325\n2021-05-27 18:32:02.321 WeChat[50323:8889328] Alive 3330\n2021-05-27 18:33:42.337 WeChat[50323:8889328] Alive 3335\n2021-05-27 18:35:22.343 WeChat[50323:8889328] Alive 3340\n2021-05-27 18:37:02.343 WeChat[50323:8889328] Alive 3345\n2021-05-27 18:38:42.354 WeChat[50323:8889328] Alive 3350\n2021-05-27 18:40:22.371 WeChat[50323:8889328] Alive 3355\n2021-05-27 18:42:02.382 WeChat[50323:8889328] Alive 3360\n2021-05-27 18:43:42.402 WeChat[50323:8889328] Alive 3365\n2021-05-27 18:45:22.423 WeChat[50323:8889328] Alive 3370\n2021-05-27 18:47:02.445 WeChat[50323:8889328] Alive 3375\n2021-05-27 18:48:37.941 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 18:48:37.942 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 18:48:37.942 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 18:48:37.943 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 18:48:37.943 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 18:48:37.943 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 18:48:42.460 WeChat[50323:8889328] Alive 3380\n2021-05-27 18:50:22.492 WeChat[50323:8889328] Alive 3385\n2021-05-27 18:51:09.178 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 18:51:09.178 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 18:51:09.178 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 18:51:09.315 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 18:51:09.315 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 18:51:09.315 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 18:51:09.316 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-27 18:51:09.316 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-27 18:51:09.316 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-27 18:52:02.528 WeChat[50323:8889328] Alive 3390\n2021-05-27 18:53:42.560 WeChat[50323:8889328] Alive 3395\n2021-05-27 18:55:22.597 WeChat[50323:8889328] Alive 3400\n2021-05-27 18:57:02.620 WeChat[50323:8889328] Alive 3405\n2021-05-27 18:58:42.640 WeChat[50323:8889328] Alive 3410\n2021-05-27 19:00:22.653 WeChat[50323:8889328] Alive 3415\n2021-05-27 19:02:02.670 WeChat[50323:8889328] Alive 3420\n2021-05-27 19:03:42.686 WeChat[50323:8889328] Alive 3425\n2021-05-27 19:05:22.587 WeChat[50323:8889328] Alive 3430\n2021-05-27 19:07:02.596 WeChat[50323:8889328] Alive 3435\n2021-05-27 19:08:42.614 WeChat[50323:8889328] Alive 3440\n2021-05-27 19:09:41.932 WeChat[50323:8889328] nil host used in call to allowsSpecificHTTPSCertificateForHost\n2021-05-27 19:09:41.932 WeChat[50323:8889328] nil host used in call to allowsAnyHTTPSCertificateForHost:\n2021-05-27 19:10:22.630 WeChat[50323:8889328] Alive 3445\n2021-05-27 19:12:02.642 WeChat[50323:8889328] Alive 3450\n2021-05-27 19:13:42.654 WeChat[50323:8889328] Alive 3455\n2021-05-27 19:15:22.674 WeChat[50323:8889328] Alive 3460\n2021-05-27 19:17:02.685 WeChat[50323:8889328] Alive 3465\n2021-05-27 19:18:42.700 WeChat[50323:8889328] Alive 3470\n2021-05-27 19:20:22.637 WeChat[50323:8889328] Alive 3475\n2021-05-27 19:22:02.654 WeChat[50323:8889328] Alive 3480\n2021-05-27 19:23:42.672 WeChat[50323:8889328] Alive 3485\n2021-05-27 19:25:22.693 WeChat[50323:8889328] Alive 3490\n2021-05-27 19:27:02.714 WeChat[50323:8889328] Alive 3495\n2021-05-27 19:28:42.732 WeChat[50323:8889328] Alive 3500\n2021-05-27 19:30:22.747 WeChat[50323:8889328] Alive 3505\n2021-05-27 19:32:02.765 WeChat[50323:8889328] Alive 3510\n2021-05-27 19:33:42.781 WeChat[50323:8889328] Alive 3515\n2021-05-27 19:35:22.806 WeChat[50323:8889328] Alive 3520\n2021-05-27 19:37:02.861 WeChat[50323:8889328] Alive 3525\n2021-05-27 19:38:42.884 WeChat[50323:8889328] Alive 3530\n2021-05-27 19:40:22.920 WeChat[50323:8889328] Alive 3535\n2021-05-27 19:42:02.955 WeChat[50323:8889328] Alive 3540\n2021-05-27 19:43:42.965 WeChat[50323:8889328] Alive 3545\n2021-05-27 19:45:22.972 WeChat[50323:8889328] Alive 3550\n2021-05-27 19:47:02.981 WeChat[50323:8889328] Alive 3555\n2021-05-27 19:48:42.995 WeChat[50323:8889328] Alive 3560\n2021-05-27 19:50:23.009 WeChat[50323:8889328] Alive 3565\n2021-05-27 19:52:02.997 WeChat[50323:8889328] Alive 3570\n2021-05-27 19:53:43.013 WeChat[50323:8889328] Alive 3575\n2021-05-27 19:55:23.021 WeChat[50323:8889328] Alive 3580\n2021-05-27 19:57:03.041 WeChat[50323:8889328] Alive 3585\n2021-05-27 19:58:43.055 WeChat[50323:8889328] Alive 3590\n2021-05-27 20:00:23.073 WeChat[50323:8889328] Alive 3595\n2021-05-27 20:02:03.088 WeChat[50323:8889328] Alive 3600\n2021-05-27 20:03:43.104 WeChat[50323:8889328] Alive 3605\n2021-05-27 20:05:23.127 WeChat[50323:8889328] Alive 3610\n2021-05-27 20:07:03.173 WeChat[50323:8889328] Alive 3615\n2021-05-27 20:08:43.190 WeChat[50323:8889328] Alive 3620\n2021-05-27 20:10:23.203 WeChat[50323:8889328] Alive 3625\n2021-05-27 20:12:03.214 WeChat[50323:8889328] Alive 3630\n2021-05-27 20:13:43.237 WeChat[50323:8889328] Alive 3635\n2021-05-27 20:15:23.259 WeChat[50323:8889328] Alive 3640\n2021-05-27 20:17:03.299 WeChat[50323:8889328] Alive 3645\n2021-05-27 20:18:43.321 WeChat[50323:8889328] Alive 3650\n2021-05-27 20:20:23.223 WeChat[50323:8889328] Alive 3655\n2021-05-27 20:22:03.232 WeChat[50323:8889328] Alive 3660\n2021-05-27 20:23:43.248 WeChat[50323:8889328] Alive 3665\n2021-05-27 20:25:23.265 WeChat[50323:8889328] Alive 3670\n2021-05-27 20:27:03.300 WeChat[50323:8889328] Alive 3675\n2021-05-27 20:28:43.339 WeChat[50323:8889328] Alive 3680\n2021-05-27 20:30:23.372 WeChat[50323:8889328] Alive 3685\n2021-05-27 20:33:27.588 WeChat[50323:8889328] Alive 3690\n2021-05-27 21:34:20.805 WeChat[50323:8889328] Alive 3695\n2021-05-27 22:45:05.249 WeChat[50323:8889328] Alive 3700\n2021-05-28 03:35:07.588 WeChat[50323:8889328] Alive 3705\n2021-05-28 07:35:23.137 WeChat[50323:8889328] Alive 3710\n2021-05-28 09:25:54.243 WeChat[50323:8889328] Alive 3715\n2021-05-28 09:27:34.263 WeChat[50323:8889328] Alive 3720\n[SQLITERK_OK] Saved master info with 141 entries.\n2021-05-28 09:29:14.282 WeChat[50323:8889328] Alive 3725\n2021-05-28 09:30:54.299 WeChat[50323:8889328] Alive 3730\n2021-05-28 09:32:34.313 WeChat[50323:8889328] Alive 3735\n2021-05-28 09:34:14.328 WeChat[50323:8889328] Alive 3740\n2021-05-28 09:35:54.347 WeChat[50323:8889328] Alive 3745\n2021-05-28 09:37:34.369 WeChat[50323:8889328] Alive 3750\n2021-05-28 09:39:14.393 WeChat[50323:8889328] Alive 3755\n2021-05-28 09:40:54.213 WeChat[50323:8889328] Alive 3760\n2021-05-28 09:42:10.620 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"20F099DF-F6FA-4A17-8A4A-2B6ECFD822FB\\\"}\"\n)\n2021-05-28 09:42:10.782 WeChat[50323:8889328] (\n    \"{\\\"__pageStateChange\\\":\\\"https://wzq.newone.com.cn/mp/v2/index.html?_=1622166129000&_buildh5ver=202105201704&login_jump_times=1#/newstock?from=msg&stat=opk65p00ki021&purchase_type=0\\\"}\"\n)\n2021-05-28 09:42:10.783 WeChat[50323:8889328] (\n    \"{\\\"__pageStateChange\\\":\\\"https://wzq.newone.com.cn/mp/v2/index.html?_=1622166129000&_buildh5ver=202105201704&login_jump_times=1#/newstock/today?from=msg&stat=opk65p00ki021&purchase_type=0\\\"}\"\n)\n2021-05-28 09:42:10.794 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"setPageTitle\\\",\\\"params\\\":{\\\"title\\\":\\\"\\U4e00\\U952e\\U6253\\U65b0\\\",\\\"__context_key\\\":\\\"5fc5e79afdb33d904e90b9b7995694e7bc29a6ef\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-05-28 09:42:10.831 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"preVerifyJSAPI\\\",\\\"params\\\":{\\\"verifyJsApiList\\\":[\\\"chooseImage\\\",\\\"uploadImage\\\",\\\"downloadImage\\\",\\\"getLocalImgData\\\",\\\"getBrandWCPayRequest\\\",\\\"verifyWCPayPassword\\\",\\\"chooseVideo\\\",\\\"recordVideo\\\",\\\"uploadVideo\\\",\\\"imagePreview\\\",\\\"hideMenuItems\\\",\\\"showMenuItems\\\",\\\"hideOptionMenu\\\",\\\"showOptionMenu\\\",\\\"scanQRCode\\\",\\\"menu:share:timeline\\\",\\\"menu:share:appmessage\\\",\\\"openUrlWithExtraWebview\\\",\\\"requestWxFacePictureVerifyUnionVideo\\\",\\\"checkIsSupportFaceDetect\\\",\\\"openCustomWebview\\\",\\\"openWKWebView\\\",\\\"closeWindow\\\",\\\"disableBounceScroll\\\",\\\"setPageTitle\\\",\\\"getBrandWCPayBindCardRequest\\\",\\\"startVoipCall\\\",\\\"disableSetFontSize\\\",\\\"setTitleButtons\\\",\\\"setWebViewBehavior\\\",\\\"setStatusBar\\\",\\\"popBack\\\",\\\"getNetworkType\\\",\\\"getInstallState\\\",\\\"redirect\\\",\\\"handleJSTouchEventFirst\\\",\\\"setRefresh\\\",\\\"pageWillAppear\\\",\\\"pageWillDisAppear\\\",\\\"clientinfo\\\",\\\"reportAppInfo\\\"],\\\"verifyOpenTagList\\\":[\\\"wx-open-launch-weapp\\\"],\\\"appId\\\":\\\"wx9cf8c670ebd68ce4\\\",\\\"verifyAppId\\\":\\\"wx9cf8c670ebd68ce4\\\",\\\"verifySignType\\\":\\\"sha1\\\",\\\"verifyTimestamp\\\":\\\"1622166130\\\",\\\"verifyNonceStr\\\":\\\"bd9426c7f12123336420ac333983bd1c\\\",\\\"verifySignature\\\":\\\"b31a9483cc2cd553df86575b895d89e122091f0b\\\",\\\"__context_key\\\":\\\"5fc5e79afdb33d904e90b9b7995694e7bc29a6ef\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1001\\\"}\"\n)\n2021-05-28 09:42:10.878 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"setFontSizeCallback\\\",\\\"params\\\":{\\\"fontSize\\\":0,\\\"__context_key\\\":\\\"7f61fdffe905abee7456d21cf6d91bc7a003f034\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1002\\\"}\"\n)\n2021-05-28 09:42:10.879 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"7f61fdffe905abee7456d21cf6d91bc7a003f034\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1003\\\"}\"\n)\n2021-05-28 09:42:11.175 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"disableBounceScroll\\\",\\\"params\\\":{\\\"place\\\":[\\\"top\\\",\\\"bottom\\\"],\\\"__context_key\\\":\\\"7f61fdffe905abee7456d21cf6d91bc7a003f034\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1004\\\"}\"\n)\n2021-05-28 09:42:11.176 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"hideOptionMenu\\\",\\\"params\\\":{\\\"appId\\\":\\\"wx9cf8c670ebd68ce4\\\",\\\"verifyAppId\\\":\\\"wx9cf8c670ebd68ce4\\\",\\\"verifySignType\\\":\\\"sha1\\\",\\\"verifyTimestamp\\\":\\\"1622166130\\\",\\\"verifyNonceStr\\\":\\\"bd9426c7f12123336420ac333983bd1c\\\",\\\"verifySignature\\\":\\\"b31a9483cc2cd553df86575b895d89e122091f0b\\\",\\\"__context_key\\\":\\\"7f61fdffe905abee7456d21cf6d91bc7a003f034\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1005\\\"}\"\n)\n2021-05-28 09:42:11.187 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"hideMenuItems\\\",\\\"params\\\":{\\\"menuList\\\":[\\\"menuItem:share:appMessage\\\",\\\"menuItem:share:timeline\\\",\\\"menuItem:share:qq\\\",\\\"menuItem:share:weiboApp\\\",\\\"menuItem:share:facebook\\\",\\\"menuItem:share:QZone\\\"],\\\"appId\\\":\\\"wx9cf8c670ebd68ce4\\\",\\\"verifyAppId\\\":\\\"wx9cf8c670ebd68ce4\\\",\\\"verifySignType\\\":\\\"sha1\\\",\\\"verifyTimestamp\\\":\\\"1622166130\\\",\\\"verifyNonceStr\\\":\\\"bd9426c7f12123336420ac333983bd1c\\\",\\\"verifySignature\\\":\\\"b31a9483cc2cd553df86575b895d89e122091f0b\\\",\\\"__context_key\\\":\\\"7f61fdffe905abee7456d21cf6d91bc7a003f034\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1006\\\"}\"\n)\n2021-05-28 09:42:19.852 WeChat[50323:8889328] (\n    \"{\\\"__pageStateChange\\\":\\\"https://wzq.newone.com.cn/mp/v2/index.html?_=1622166129000&_buildh5ver=202105201704&login_jump_times=1#/newstock/result?retcode=0&retmsg=&date=20210601&failCount=0&purchase_type=0\\\"}\"\n)\n2021-05-28 09:42:19.860 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"setPageTitle\\\",\\\"params\\\":{\\\"title\\\":\\\"\\U7533\\U8d2d\\U7ed3\\U679c\\\",\\\"__context_key\\\":\\\"7f61fdffe905abee7456d21cf6d91bc7a003f034\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1007\\\"}\"\n)\n2021-05-28 09:42:19.860 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"disableBounceScroll\\\",\\\"params\\\":{\\\"place\\\":[\\\"top\\\",\\\"bottom\\\"],\\\"__context_key\\\":\\\"7f61fdffe905abee7456d21cf6d91bc7a003f034\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1008\\\"}\"\n)\n2021-05-28 09:42:19.860 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"hideOptionMenu\\\",\\\"params\\\":{\\\"appId\\\":\\\"wx9cf8c670ebd68ce4\\\",\\\"verifyAppId\\\":\\\"wx9cf8c670ebd68ce4\\\",\\\"verifySignType\\\":\\\"sha1\\\",\\\"verifyTimestamp\\\":\\\"1622166130\\\",\\\"verifyNonceStr\\\":\\\"bd9426c7f12123336420ac333983bd1c\\\",\\\"verifySignature\\\":\\\"b31a9483cc2cd553df86575b895d89e122091f0b\\\",\\\"__context_key\\\":\\\"7f61fdffe905abee7456d21cf6d91bc7a003f034\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1009\\\"}\"\n)\n2021-05-28 09:42:19.864 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"hideMenuItems\\\",\\\"params\\\":{\\\"menuList\\\":[\\\"menuItem:share:appMessage\\\",\\\"menuItem:share:timeline\\\",\\\"menuItem:share:qq\\\",\\\"menuItem:share:weiboApp\\\",\\\"menuItem:share:facebook\\\",\\\"menuItem:share:QZone\\\"],\\\"appId\\\":\\\"wx9cf8c670ebd68ce4\\\",\\\"verifyAppId\\\":\\\"wx9cf8c670ebd68ce4\\\",\\\"verifySignType\\\":\\\"sha1\\\",\\\"verifyTimestamp\\\":\\\"1622166130\\\",\\\"verifyNonceStr\\\":\\\"bd9426c7f12123336420ac333983bd1c\\\",\\\"verifySignature\\\":\\\"b31a9483cc2cd553df86575b895d89e122091f0b\\\",\\\"__context_key\\\":\\\"7f61fdffe905abee7456d21cf6d91bc7a003f034\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1010\\\"}\"\n)\n2021-05-28 09:42:34.226 WeChat[50323:8889328] Alive 3765\n2021-05-28 09:44:14.236 WeChat[50323:8889328] Alive 3770\n2021-05-28 09:45:54.254 WeChat[50323:8889328] Alive 3775\n2021-05-28 09:47:34.263 WeChat[50323:8889328] Alive 3780\n2021-05-28 09:49:14.279 WeChat[50323:8889328] Alive 3785\n2021-05-28 09:50:54.293 WeChat[50323:8889328] Alive 3790\n2021-05-28 09:52:34.304 WeChat[50323:8889328] Alive 3795\n2021-05-28 09:54:14.315 WeChat[50323:8889328] Alive 3800\n2021-05-28 09:55:54.186 WeChat[50323:8889328] Alive 3805\n2021-05-28 09:57:34.192 WeChat[50323:8889328] Alive 3810\n2021-05-28 09:59:14.198 WeChat[50323:8889328] Alive 3815\n2021-05-28 10:00:54.203 WeChat[50323:8889328] Alive 3820\n2021-05-28 10:02:34.221 WeChat[50323:8889328] Alive 3825\n2021-05-28 10:04:14.230 WeChat[50323:8889328] Alive 3830\n2021-05-28 10:05:54.251 WeChat[50323:8889328] Alive 3835\n2021-05-28 10:07:34.260 WeChat[50323:8889328] Alive 3840\n2021-05-28 10:09:14.266 WeChat[50323:8889328] Alive 3845\n2021-05-28 10:10:54.187 WeChat[50323:8889328] Alive 3850\n2021-05-28 10:12:34.201 WeChat[50323:8889328] Alive 3855\n2021-05-28 10:14:14.216 WeChat[50323:8889328] Alive 3860\n2021-05-28 10:15:54.229 WeChat[50323:8889328] Alive 3865\n2021-05-28 10:17:34.244 WeChat[50323:8889328] Alive 3870\n2021-05-28 10:19:14.260 WeChat[50323:8889328] Alive 3875\n2021-05-28 10:20:54.274 WeChat[50323:8889328] Alive 3880\n2021-05-28 10:22:34.288 WeChat[50323:8889328] Alive 3885\n2021-05-28 10:24:14.301 WeChat[50323:8889328] Alive 3890\n2021-05-28 10:25:54.326 WeChat[50323:8889328] Alive 3895\n2021-05-28 10:27:34.347 WeChat[50323:8889328] Alive 3900\n2021-05-28 10:29:14.362 WeChat[50323:8889328] Alive 3905\n2021-05-28 10:30:54.373 WeChat[50323:8889328] Alive 3910\n2021-05-28 10:32:34.384 WeChat[50323:8889328] Alive 3915\n2021-05-28 10:34:14.404 WeChat[50323:8889328] Alive 3920\n2021-05-28 10:35:54.412 WeChat[50323:8889328] Alive 3925\n2021-05-28 10:37:34.425 WeChat[50323:8889328] Alive 3930\n2021-05-28 10:39:14.438 WeChat[50323:8889328] Alive 3935\n2021-05-28 10:40:54.458 WeChat[50323:8889328] Alive 3940\n2021-05-28 10:42:34.483 WeChat[50323:8889328] Alive 3945\n2021-05-28 10:44:14.491 WeChat[50323:8889328] Alive 3950\n2021-05-28 10:45:54.503 WeChat[50323:8889328] Alive 3955\n2021-05-28 10:46:27.364 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa8fb5eb110> -[JTCaptureRequest init]\n2021-05-28 10:46:27.365 WeChat[50323:8889328] <JTCaptureManager: 0x7fa908849690> -[JTCaptureManager init]\n2021-05-28 10:46:27.420 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9019ace90> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-28 10:46:27.474 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9019ace90> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-28 10:46:27.485 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa913365060> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-28 10:46:27.520 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900b4cf30> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-28 10:46:27.544 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900b4cf30> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-28 10:46:27.552 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8f75190e0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-28 10:46:30.162 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa900de26f0> -[JTToolbarView configAppearanceAndLayout]\n2021-05-28 10:46:30.179 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa90f871780> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-28 10:46:31.705 WeChat[50323:8889328] <JTCaptureManager: 0x7fa908849690> -[JTCaptureManager dealloc]\n2021-05-28 10:46:31.705 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa8fb5eb110> -[JTCaptureRequest dealloc]\n2021-05-28 10:46:31.708 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa913365060> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-28 10:46:31.710 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9019ace90> -[JTCaptureViewController dealloc]\n2021-05-28 10:46:31.713 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8f75190e0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-28 10:46:31.713 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900b4cf30> -[JTCaptureViewController dealloc]\n2021-05-28 10:46:31.716 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa90f871780> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-28 10:47:34.514 WeChat[50323:8889328] Alive 3960\n2021-05-28 10:49:14.524 WeChat[50323:8889328] Alive 3965\n2021-05-28 10:50:54.537 WeChat[50323:8889328] Alive 3970\n2021-05-28 10:52:34.548 WeChat[50323:8889328] Alive 3975\n2021-05-28 10:53:46.958 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"2A138FF8-CD78-4074-AED7-BB613BE26EB1\\\"}\"\n)\n2021-05-28 10:53:47.288 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"bb9bf258ec1286db4f9c0d3fc8807e0a38c4fc42\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-05-28 10:53:57.574 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"2A138FF8-CD78-4074-AED7-BB613BE26EB1\\\"}\"\n)\n2021-05-28 10:53:58.490 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"bb9bf258ec1286db4f9c0d3fc8807e0a38c4fc42\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-05-28 10:54:11.687 WeChat[50323:8889328] Warning: Expected min height of view: (<NSPopoverTouchBarItemButton: 0x7fa8ffe43970>) to be less than or equal to 30 but got a height of 32.000000. This error will be logged once per view in violation.\n2021-05-28 10:54:14.562 WeChat[50323:8889328] Alive 3980\n2021-05-28 10:55:11.353 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"2A138FF8-CD78-4074-AED7-BB613BE26EB1\\\"}\"\n)\n2021-05-28 10:55:12.899 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"bb9bf258ec1286db4f9c0d3fc8807e0a38c4fc42\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-05-28 10:55:47.180 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"2A138FF8-CD78-4074-AED7-BB613BE26EB1\\\"}\"\n)\n2021-05-28 10:55:47.233 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"bb9bf258ec1286db4f9c0d3fc8807e0a38c4fc42\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-05-28 10:55:50.462 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"2A138FF8-CD78-4074-AED7-BB613BE26EB1\\\"}\"\n)\n2021-05-28 10:55:51.594 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"bb9bf258ec1286db4f9c0d3fc8807e0a38c4fc42\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-05-28 10:55:54.590 WeChat[50323:8889328] Alive 3985\n2021-05-28 10:55:59.389 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"2A138FF8-CD78-4074-AED7-BB613BE26EB1\\\"}\"\n)\n2021-05-28 10:56:01.092 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"bb9bf258ec1286db4f9c0d3fc8807e0a38c4fc42\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-05-28 10:56:10.081 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"2A138FF8-CD78-4074-AED7-BB613BE26EB1\\\"}\"\n)\n2021-05-28 10:56:10.574 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"bb9bf258ec1286db4f9c0d3fc8807e0a38c4fc42\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-05-28 10:56:26.179 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"2A138FF8-CD78-4074-AED7-BB613BE26EB1\\\"}\"\n)\n2021-05-28 10:56:26.202 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"bb9bf258ec1286db4f9c0d3fc8807e0a38c4fc42\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-05-28 10:56:29.723 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"2A138FF8-CD78-4074-AED7-BB613BE26EB1\\\"}\"\n)\n2021-05-28 10:56:33.262 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"bb9bf258ec1286db4f9c0d3fc8807e0a38c4fc42\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-05-28 10:56:54.120 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"2A138FF8-CD78-4074-AED7-BB613BE26EB1\\\"}\"\n)\n2021-05-28 10:56:54.131 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"bb9bf258ec1286db4f9c0d3fc8807e0a38c4fc42\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-05-28 10:57:02.497 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"2A138FF8-CD78-4074-AED7-BB613BE26EB1\\\"}\"\n)\n2021-05-28 10:57:02.512 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"bb9bf258ec1286db4f9c0d3fc8807e0a38c4fc42\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-05-28 10:57:04.728 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"2A138FF8-CD78-4074-AED7-BB613BE26EB1\\\"}\"\n)\n2021-05-28 10:57:04.738 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"bb9bf258ec1286db4f9c0d3fc8807e0a38c4fc42\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-05-28 10:57:10.549 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"2A138FF8-CD78-4074-AED7-BB613BE26EB1\\\"}\"\n)\n2021-05-28 10:57:10.566 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"bb9bf258ec1286db4f9c0d3fc8807e0a38c4fc42\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-05-28 10:57:17.159 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"2A138FF8-CD78-4074-AED7-BB613BE26EB1\\\"}\"\n)\n2021-05-28 10:57:34.620 WeChat[50323:8889328] Alive 3990\n2021-05-28 10:57:37.661 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"2A138FF8-CD78-4074-AED7-BB613BE26EB1\\\"}\"\n)\n2021-05-28 10:57:38.979 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"bb9bf258ec1286db4f9c0d3fc8807e0a38c4fc42\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-05-28 10:58:26.033 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 10:58:26.033 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 10:58:26.033 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 10:58:26.033 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 10:58:26.033 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 10:58:26.033 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 10:58:26.900 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 10:58:26.900 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 10:58:26.900 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 10:58:26.958 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 10:58:26.958 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 10:58:26.958 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 10:58:44.353 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 10:58:44.353 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 10:58:44.354 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 10:58:55.260 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 10:58:55.260 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 10:58:55.260 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 10:58:55.262 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 10:58:55.262 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 10:58:55.262 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 10:59:14.658 WeChat[50323:8889328] Alive 3995\n2021-05-28 10:59:34.962 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 10:59:34.962 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 10:59:34.962 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 10:59:34.963 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 10:59:34.963 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 10:59:34.963 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 11:00:54.641 WeChat[50323:8889328] Alive 4000\n2021-05-28 11:02:34.671 WeChat[50323:8889328] Alive 4005\n2021-05-28 11:04:14.694 WeChat[50323:8889328] Alive 4010\n2021-05-28 11:05:54.723 WeChat[50323:8889328] Alive 4015\n2021-05-28 11:07:34.743 WeChat[50323:8889328] Alive 4020\n2021-05-28 11:09:14.757 WeChat[50323:8889328] Alive 4025\n2021-05-28 11:10:54.775 WeChat[50323:8889328] Alive 4030\n2021-05-28 11:12:34.798 WeChat[50323:8889328] Alive 4035\n2021-05-28 11:14:14.820 WeChat[50323:8889328] Alive 4040\n2021-05-28 11:15:54.847 WeChat[50323:8889328] Alive 4045\n2021-05-28 11:17:34.888 WeChat[50323:8889328] Alive 4050\n2021-05-28 11:19:14.927 WeChat[50323:8889328] Alive 4055\n2021-05-28 11:20:54.968 WeChat[50323:8889328] Alive 4060\n2021-05-28 11:22:34.998 WeChat[50323:8889328] Alive 4065\n2021-05-28 11:24:15.021 WeChat[50323:8889328] Alive 4070\n2021-05-28 11:25:55.056 WeChat[50323:8889328] Alive 4075\n2021-05-28 11:27:35.098 WeChat[50323:8889328] Alive 4080\n2021-05-28 11:29:15.137 WeChat[50323:8889328] Alive 4085\n2021-05-28 11:30:55.152 WeChat[50323:8889328] Alive 4090\n2021-05-28 11:32:35.179 WeChat[50323:8889328] Alive 4095\n2021-05-28 11:34:15.212 WeChat[50323:8889328] Alive 4100\n2021-05-28 11:35:55.240 WeChat[50323:8889328] Alive 4105\n2021-05-28 11:37:35.277 WeChat[50323:8889328] Alive 4110\n2021-05-28 11:39:15.312 WeChat[50323:8889328] Alive 4115\n2021-05-28 11:40:55.323 WeChat[50323:8889328] Alive 4120\n2021-05-28 11:42:35.341 WeChat[50323:8889328] Alive 4125\n2021-05-28 11:44:15.373 WeChat[50323:8889328] Alive 4130\n2021-05-28 11:45:55.429 WeChat[50323:8889328] Alive 4135\n2021-05-28 11:47:35.417 WeChat[50323:8889328] Alive 4140\n2021-05-28 11:49:15.432 WeChat[50323:8889328] Alive 4145\n2021-05-28 11:50:55.442 WeChat[50323:8889328] Alive 4150\n2021-05-28 11:52:35.462 WeChat[50323:8889328] Alive 4155\n2021-05-28 11:54:15.476 WeChat[50323:8889328] Alive 4160\n2021-05-28 11:55:55.478 WeChat[50323:8889328] Alive 4165\n2021-05-28 11:57:35.485 WeChat[50323:8889328] Alive 4170\n2021-05-28 11:59:15.499 WeChat[50323:8889328] Alive 4175\n2021-05-28 12:00:55.513 WeChat[50323:8889328] Alive 4180\n2021-05-28 12:02:35.526 WeChat[50323:8889328] Alive 4185\n2021-05-28 12:04:15.539 WeChat[50323:8889328] Alive 4190\n2021-05-28 12:05:55.554 WeChat[50323:8889328] Alive 4195\n2021-05-28 12:07:35.563 WeChat[50323:8889328] Alive 4200\n2021-05-28 12:09:15.580 WeChat[50323:8889328] Alive 4205\n2021-05-28 12:10:55.572 WeChat[50323:8889328] Alive 4210\n2021-05-28 12:12:35.557 WeChat[50323:8889328] Alive 4215\n2021-05-28 12:14:15.572 WeChat[50323:8889328] Alive 4220\n2021-05-28 12:15:55.582 WeChat[50323:8889328] Alive 4225\n2021-05-28 12:17:35.594 WeChat[50323:8889328] Alive 4230\n2021-05-28 12:19:15.624 WeChat[50323:8889328] Alive 4235\n2021-05-28 12:20:55.649 WeChat[50323:8889328] Alive 4240\n2021-05-28 12:22:35.665 WeChat[50323:8889328] Alive 4245\n2021-05-28 12:24:15.697 WeChat[50323:8889328] Alive 4250\n2021-05-28 12:25:55.655 WeChat[50323:8889328] Alive 4255\n2021-05-28 12:27:35.673 WeChat[50323:8889328] Alive 4260\n2021-05-28 12:29:15.705 WeChat[50323:8889328] Alive 4265\n[SQLITERK_OK] Saved master info with 113 entries.\n2021-05-28 12:30:55.721 WeChat[50323:8889328] Alive 4270\n2021-05-28 12:32:35.755 WeChat[50323:8889328] Alive 4275\n2021-05-28 12:34:15.793 WeChat[50323:8889328] Alive 4280\n2021-05-28 12:35:55.822 WeChat[50323:8889328] Alive 4285\n2021-05-28 12:37:35.854 WeChat[50323:8889328] Alive 4290\n2021-05-28 12:39:15.876 WeChat[50323:8889328] Alive 4295\n2021-05-28 12:40:55.904 WeChat[50323:8889328] Alive 4300\n2021-05-28 12:42:36.009 WeChat[50323:8889328] Alive 4305\n2021-05-28 12:44:16.042 WeChat[50323:8889328] Alive 4310\n2021-05-28 12:45:56.080 WeChat[50323:8889328] Alive 4315\n2021-05-28 12:47:36.100 WeChat[50323:8889328] Alive 4320\n2021-05-28 12:49:16.125 WeChat[50323:8889328] Alive 4325\n2021-05-28 12:50:56.150 WeChat[50323:8889328] Alive 4330\n2021-05-28 12:52:36.177 WeChat[50323:8889328] Alive 4335\n2021-05-28 12:54:16.205 WeChat[50323:8889328] Alive 4340\n2021-05-28 12:55:56.232 WeChat[50323:8889328] Alive 4345\n2021-05-28 12:57:36.278 WeChat[50323:8889328] Alive 4350\n2021-05-28 12:59:16.305 WeChat[50323:8889328] Alive 4355\n2021-05-28 13:00:56.339 WeChat[50323:8889328] Alive 4360\n2021-05-28 13:02:36.383 WeChat[50323:8889328] Alive 4365\n[SQLITERK_OK] Saved master info with 125 entries.\n2021-05-28 13:04:16.417 WeChat[50323:8889328] Alive 4370\n2021-05-28 13:05:56.454 WeChat[50323:8889328] Alive 4375\n2021-05-28 13:07:36.493 WeChat[50323:8889328] Alive 4380\n2021-05-28 13:09:16.531 WeChat[50323:8889328] Alive 4385\n2021-05-28 13:10:56.560 WeChat[50323:8889328] Alive 4390\n2021-05-28 13:12:36.555 WeChat[50323:8889328] Alive 4395\n2021-05-28 13:14:16.585 WeChat[50323:8889328] Alive 4400\n[SQLITERK_OK] Saved master info with 171 entries.\n2021-05-28 13:15:56.597 WeChat[50323:8889328] Alive 4405\n2021-05-28 13:17:36.608 WeChat[50323:8889328] Alive 4410\n2021-05-28 13:19:16.623 WeChat[50323:8889328] Alive 4415\n2021-05-28 13:20:26.858 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa908c5a0a0> -[JTCaptureRequest init]\n2021-05-28 13:20:26.858 WeChat[50323:8889328] <JTCaptureManager: 0x7fa908ce7660> -[JTCaptureManager init]\n2021-05-28 13:20:26.876 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8f76772a0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-28 13:20:26.924 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8f76772a0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-28 13:20:26.931 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9125f5ab0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-28 13:20:26.946 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa901ccfd10> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-28 13:20:26.970 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa901ccfd10> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-28 13:20:26.977 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa912525020> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-28 13:20:30.624 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa90f9ece30> -[JTToolbarView configAppearanceAndLayout]\n2021-05-28 13:20:30.642 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa90f8b4d80> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-28 13:20:31.828 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fe69d060> -[JTPopoverView configAppearanceAndLayout]\n2021-05-28 13:20:31.833 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fb19cb90> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-28 13:20:31.841 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa902140320> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-28 13:20:31.842 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa901cb0c90> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-28 13:20:31.842 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fddbfad0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-28 13:20:31.843 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8f74eeb30> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-28 13:20:31.847 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa9008f6a20> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-28 13:20:31.853 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fe69d060> -[JTPopoverView configAppearanceAndLayout]\n2021-05-28 13:20:31.854 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8f74eeb30> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-28 13:20:31.856 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fb19cb90> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-28 13:20:32.726 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fe69d060> -[JTPopoverView configAppearanceAndLayout]\n2021-05-28 13:20:32.727 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8f74eeb30> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-28 13:20:32.730 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fb19cb90> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-28 13:20:32.741 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fe69d060> -[JTPopoverView configAppearanceAndLayout]\n2021-05-28 13:20:32.742 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8f74eeb30> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-28 13:20:32.744 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fb19cb90> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-28 13:20:35.487 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fe69d060> -[JTPopoverView configAppearanceAndLayout]\n2021-05-28 13:20:35.488 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8f74eeb30> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-28 13:20:35.491 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fb19cb90> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-28 13:20:35.502 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fe69d060> -[JTPopoverView configAppearanceAndLayout]\n2021-05-28 13:20:35.503 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8f74eeb30> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-28 13:20:35.505 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fb19cb90> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-28 13:20:38.971 WeChat[50323:8889328] <JTCaptureManager: 0x7fa908ce7660> -[JTCaptureManager dealloc]\n2021-05-28 13:20:38.971 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa908c5a0a0> -[JTCaptureRequest dealloc]\n2021-05-28 13:20:38.972 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9125f5ab0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-28 13:20:38.973 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8f76772a0> -[JTCaptureViewController dealloc]\n2021-05-28 13:20:38.976 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa912525020> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-28 13:20:38.977 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa901ccfd10> -[JTCaptureViewController dealloc]\n2021-05-28 13:20:38.978 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa90f8b4d80> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-28 13:20:38.981 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa9008f6a20> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-28 13:20:56.633 WeChat[50323:8889328] Alive 4420\n2021-05-28 13:22:36.651 WeChat[50323:8889328] Alive 4425\n2021-05-28 13:23:56.746 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 13:23:56.747 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 13:23:56.747 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 13:24:16.665 WeChat[50323:8889328] Alive 4430\n2021-05-28 13:25:56.681 WeChat[50323:8889328] Alive 4435\n2021-05-28 13:27:36.677 WeChat[50323:8889328] Alive 4440\n2021-05-28 13:29:16.693 WeChat[50323:8889328] Alive 4445\n2021-05-28 13:30:56.707 WeChat[50323:8889328] Alive 4450\n2021-05-28 13:32:36.719 WeChat[50323:8889328] Alive 4455\n2021-05-28 13:34:16.737 WeChat[50323:8889328] Alive 4460\n2021-05-28 13:35:56.747 WeChat[50323:8889328] Alive 4465\n2021-05-28 13:37:36.754 WeChat[50323:8889328] Alive 4470\n2021-05-28 13:39:16.764 WeChat[50323:8889328] Alive 4475\n2021-05-28 13:40:56.778 WeChat[50323:8889328] Alive 4480\n2021-05-28 13:42:36.951 WeChat[50323:8889328] Alive 4485\n2021-05-28 13:44:16.975 WeChat[50323:8889328] Alive 4490\n2021-05-28 13:45:56.995 WeChat[50323:8889328] Alive 4495\n2021-05-28 13:47:37.012 WeChat[50323:8889328] Alive 4500\n2021-05-28 13:49:17.028 WeChat[50323:8889328] Alive 4505\n2021-05-28 13:50:57.041 WeChat[50323:8889328] Alive 4510\n2021-05-28 13:52:37.057 WeChat[50323:8889328] Alive 4515\n2021-05-28 13:54:17.090 WeChat[50323:8889328] Alive 4520\n2021-05-28 13:55:57.112 WeChat[50323:8889328] Alive 4525\n2021-05-28 13:57:37.165 WeChat[50323:8889328] Alive 4530\n2021-05-28 13:59:17.207 WeChat[50323:8889328] Alive 4535\n2021-05-28 14:00:57.253 WeChat[50323:8889328] Alive 4540\n2021-05-28 14:02:37.278 WeChat[50323:8889328] Alive 4545\n[SQLITERK_OK] Saved master info with 171 entries.\n2021-05-28 14:04:17.311 WeChat[50323:8889328] Alive 4550\n2021-05-28 14:05:57.343 WeChat[50323:8889328] Alive 4555\n2021-05-28 14:07:37.362 WeChat[50323:8889328] Alive 4560\n2021-05-28 14:09:17.399 WeChat[50323:8889328] Alive 4565\n2021-05-28 14:10:57.428 WeChat[50323:8889328] Alive 4570\n2021-05-28 14:12:37.427 WeChat[50323:8889328] Alive 4575\n2021-05-28 14:14:17.466 WeChat[50323:8889328] Alive 4580\n2021-05-28 14:15:57.493 WeChat[50323:8889328] Alive 4585\n2021-05-28 14:17:37.521 WeChat[50323:8889328] Alive 4590\n2021-05-28 14:19:17.562 WeChat[50323:8889328] Alive 4595\n2021-05-28 14:20:57.594 WeChat[50323:8889328] Alive 4600\n2021-05-28 14:22:37.629 WeChat[50323:8889328] Alive 4605\n2021-05-28 14:24:17.652 WeChat[50323:8889328] Alive 4610\n2021-05-28 14:25:57.693 WeChat[50323:8889328] Alive 4615\n2021-05-28 14:27:37.655 WeChat[50323:8889328] Alive 4620\n2021-05-28 14:29:17.690 WeChat[50323:8889328] Alive 4625\n2021-05-28 14:30:57.713 WeChat[50323:8889328] Alive 4630\n2021-05-28 14:32:37.747 WeChat[50323:8889328] Alive 4635\n2021-05-28 14:34:17.783 WeChat[50323:8889328] Alive 4640\n2021-05-28 14:35:57.799 WeChat[50323:8889328] Alive 4645\n2021-05-28 14:37:37.813 WeChat[50323:8889328] Alive 4650\n2021-05-28 14:39:17.831 WeChat[50323:8889328] Alive 4655\n2021-05-28 14:40:57.860 WeChat[50323:8889328] Alive 4660\n2021-05-28 14:42:37.809 WeChat[50323:8889328] Alive 4665\n2021-05-28 14:43:23.216 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 14:43:23.216 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 14:43:23.216 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 14:43:23.216 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 14:43:23.216 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 14:43:23.216 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 14:44:17.826 WeChat[50323:8889328] Alive 4670\n2021-05-28 14:45:57.844 WeChat[50323:8889328] Alive 4675\n2021-05-28 14:47:37.860 WeChat[50323:8889328] Alive 4680\n2021-05-28 14:49:17.879 WeChat[50323:8889328] Alive 4685\n2021-05-28 14:50:57.887 WeChat[50323:8889328] Alive 4690\n2021-05-28 14:52:37.908 WeChat[50323:8889328] Alive 4695\n2021-05-28 14:54:17.920 WeChat[50323:8889328] Alive 4700\n2021-05-28 14:55:57.940 WeChat[50323:8889328] Alive 4705\n2021-05-28 14:57:37.949 WeChat[50323:8889328] Alive 4710\n2021-05-28 14:59:17.959 WeChat[50323:8889328] Alive 4715\n2021-05-28 15:00:57.975 WeChat[50323:8889328] Alive 4720\n2021-05-28 15:02:37.997 WeChat[50323:8889328] Alive 4725\n2021-05-28 15:04:18.011 WeChat[50323:8889328] Alive 4730\n2021-05-28 15:05:58.034 WeChat[50323:8889328] Alive 4735\n2021-05-28 15:07:38.048 WeChat[50323:8889328] Alive 4740\n2021-05-28 15:09:18.062 WeChat[50323:8889328] Alive 4745\n2021-05-28 15:10:58.074 WeChat[50323:8889328] Alive 4750\n2021-05-28 15:12:38.041 WeChat[50323:8889328] Alive 4755\n2021-05-28 15:14:18.058 WeChat[50323:8889328] Alive 4760\n2021-05-28 15:15:58.074 WeChat[50323:8889328] Alive 4765\n2021-05-28 15:17:38.081 WeChat[50323:8889328] Alive 4770\n2021-05-28 15:19:18.101 WeChat[50323:8889328] Alive 4775\n2021-05-28 15:20:58.119 WeChat[50323:8889328] Alive 4780\n2021-05-28 15:22:38.128 WeChat[50323:8889328] Alive 4785\n2021-05-28 15:23:10.681 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90f168370> -[JTCaptureRequest init]\n2021-05-28 15:23:10.681 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90f925750> -[JTCaptureManager init]\n2021-05-28 15:23:10.710 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9133ab7a0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-28 15:23:10.763 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9133ab7a0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-28 15:23:10.770 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f965590> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-28 15:23:10.788 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9009ee5f0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-28 15:23:10.811 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9009ee5f0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-28 15:23:10.818 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90264f060> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-28 15:23:11.183 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 15:23:11.183 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 15:23:11.183 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 15:23:11.184 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 15:23:11.184 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 15:23:11.184 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 15:23:13.790 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa901e79670> -[JTToolbarView configAppearanceAndLayout]\n2021-05-28 15:23:13.805 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa910b27450> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-28 15:23:15.545 WeChat[50323:8889328] <JTPopoverView: 0x7fa914cd8570> -[JTPopoverView configAppearanceAndLayout]\n2021-05-28 15:23:15.549 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90f139650> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-28 15:23:15.556 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8ffe4c860> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-28 15:23:15.556 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa9011bd050> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-28 15:23:15.556 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa90116df60> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-28 15:23:15.556 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9025476d0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-28 15:23:15.559 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa90f180d40> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-28 15:23:15.563 WeChat[50323:8889328] <JTPopoverView: 0x7fa914cd8570> -[JTPopoverView configAppearanceAndLayout]\n2021-05-28 15:23:15.564 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9025476d0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-28 15:23:15.566 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90f139650> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-28 15:23:16.743 WeChat[50323:8889328] <JTPopoverView: 0x7fa914cd8570> -[JTPopoverView configAppearanceAndLayout]\n2021-05-28 15:23:16.745 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9025476d0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-28 15:23:16.746 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90f139650> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-28 15:23:16.757 WeChat[50323:8889328] <JTPopoverView: 0x7fa914cd8570> -[JTPopoverView configAppearanceAndLayout]\n2021-05-28 15:23:16.758 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9025476d0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-28 15:23:16.760 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90f139650> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-28 15:23:20.710 WeChat[50323:8889328] <JTPopoverView: 0x7fa914cd8570> -[JTPopoverView configAppearanceAndLayout]\n2021-05-28 15:23:20.711 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9025476d0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-28 15:23:20.714 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90f139650> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-28 15:23:20.724 WeChat[50323:8889328] <JTPopoverView: 0x7fa914cd8570> -[JTPopoverView configAppearanceAndLayout]\n2021-05-28 15:23:20.725 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9025476d0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-28 15:23:20.727 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90f139650> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-28 15:23:24.203 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90f925750> -[JTCaptureManager dealloc]\n2021-05-28 15:23:24.203 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90f168370> -[JTCaptureRequest dealloc]\n2021-05-28 15:23:24.203 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f965590> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-28 15:23:24.204 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9133ab7a0> -[JTCaptureViewController dealloc]\n2021-05-28 15:23:24.207 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90264f060> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-28 15:23:24.207 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9009ee5f0> -[JTCaptureViewController dealloc]\n2021-05-28 15:23:24.208 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa910b27450> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-28 15:23:24.213 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa90f180d40> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-28 15:23:24.227 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 15:23:24.227 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 15:23:24.227 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 15:23:24.227 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 15:23:24.227 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 15:23:24.227 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 15:23:25.276 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 15:23:25.276 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 15:23:25.277 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 15:23:33.929 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 15:23:33.930 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 15:23:33.930 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 15:23:33.932 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 15:23:33.932 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 15:23:33.932 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 15:24:18.140 WeChat[50323:8889328] Alive 4790\n2021-05-28 15:25:23.750 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 15:25:23.750 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 15:25:23.750 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 15:25:23.764 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 15:25:23.764 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 15:25:23.764 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 15:25:58.153 WeChat[50323:8889328] Alive 4795\n2021-05-28 15:26:45.782 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 15:26:45.782 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 15:26:45.782 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 15:26:45.783 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-28 15:26:45.783 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-28 15:26:45.783 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-28 15:27:38.133 WeChat[50323:8889328] Alive 4800\n2021-05-28 15:29:18.143 WeChat[50323:8889328] Alive 4805\n2021-05-28 15:30:58.164 WeChat[50323:8889328] Alive 4810\n2021-05-28 15:32:38.196 WeChat[50323:8889328] Alive 4815\n2021-05-28 15:34:18.218 WeChat[50323:8889328] Alive 4820\n2021-05-28 15:35:58.230 WeChat[50323:8889328] Alive 4825\n2021-05-28 15:37:38.241 WeChat[50323:8889328] Alive 4830\n2021-05-28 15:39:18.256 WeChat[50323:8889328] Alive 4835\n2021-05-28 15:40:58.272 WeChat[50323:8889328] Alive 4840\n2021-05-28 15:42:38.293 WeChat[50323:8889328] Alive 4845\n2021-05-28 15:44:18.302 WeChat[50323:8889328] Alive 4850\n2021-05-28 15:45:58.321 WeChat[50323:8889328] Alive 4855\n2021-05-28 15:47:38.337 WeChat[50323:8889328] Alive 4860\n2021-05-28 15:49:18.352 WeChat[50323:8889328] Alive 4865\n2021-05-28 15:50:58.363 WeChat[50323:8889328] Alive 4870\n2021-05-28 15:52:38.379 WeChat[50323:8889328] Alive 4875\n2021-05-28 15:54:18.392 WeChat[50323:8889328] Alive 4880\n2021-05-28 15:55:58.405 WeChat[50323:8889328] Alive 4885\n2021-05-28 15:57:38.384 WeChat[50323:8889328] Alive 4890\n2021-05-28 15:59:18.402 WeChat[50323:8889328] Alive 4895\n2021-05-28 16:00:58.414 WeChat[50323:8889328] Alive 4900\n2021-05-28 16:02:38.432 WeChat[50323:8889328] Alive 4905\n2021-05-28 16:04:18.447 WeChat[50323:8889328] Alive 4910\n2021-05-28 16:05:58.465 WeChat[50323:8889328] Alive 4915\n2021-05-28 16:07:38.485 WeChat[50323:8889328] Alive 4920\n2021-05-28 16:09:18.494 WeChat[50323:8889328] Alive 4925\n2021-05-28 16:10:58.509 WeChat[50323:8889328] Alive 4930\n2021-05-28 16:12:38.535 WeChat[50323:8889328] Alive 4935\n2021-05-28 16:14:18.542 WeChat[50323:8889328] Alive 4940\n2021-05-28 16:15:58.555 WeChat[50323:8889328] Alive 4945\n2021-05-28 16:17:38.569 WeChat[50323:8889328] Alive 4950\n2021-05-28 16:19:18.576 WeChat[50323:8889328] Alive 4955\n2021-05-28 16:20:58.589 WeChat[50323:8889328] Alive 4960\n2021-05-28 16:22:38.597 WeChat[50323:8889328] Alive 4965\n2021-05-28 16:24:18.609 WeChat[50323:8889328] Alive 4970\n2021-05-28 16:25:58.624 WeChat[50323:8889328] Alive 4975\n2021-05-28 16:27:38.639 WeChat[50323:8889328] Alive 4980\n2021-05-28 16:29:18.652 WeChat[50323:8889328] Alive 4985\n2021-05-28 16:30:58.683 WeChat[50323:8889328] Alive 4990\n2021-05-28 16:32:38.717 WeChat[50323:8889328] Alive 4995\n2021-05-28 16:34:18.748 WeChat[50323:8889328] Alive 5000\n2021-05-28 16:35:58.773 WeChat[50323:8889328] Alive 5005\n2021-05-28 16:37:38.788 WeChat[50323:8889328] Alive 5010\n2021-05-28 16:39:18.806 WeChat[50323:8889328] Alive 5015\n2021-05-28 16:40:58.817 WeChat[50323:8889328] Alive 5020\n2021-05-28 16:42:38.889 WeChat[50323:8889328] Alive 5025\n2021-05-28 16:44:18.882 WeChat[50323:8889328] Alive 5030\n2021-05-28 16:45:58.901 WeChat[50323:8889328] Alive 5035\n2021-05-28 16:47:38.913 WeChat[50323:8889328] Alive 5040\n2021-05-28 16:49:18.930 WeChat[50323:8889328] Alive 5045\n2021-05-28 16:50:58.945 WeChat[50323:8889328] Alive 5050\n2021-05-28 16:52:38.966 WeChat[50323:8889328] Alive 5055\n2021-05-28 16:54:18.971 WeChat[50323:8889328] Alive 5060\n2021-05-28 16:55:59.113 WeChat[50323:8889328] Alive 5065\n2021-05-28 16:57:39.020 WeChat[50323:8889328] Alive 5070\n2021-05-28 16:59:19.030 WeChat[50323:8889328] Alive 5075\n2021-05-28 17:00:59.049 WeChat[50323:8889328] Alive 5080\n2021-05-28 17:02:39.064 WeChat[50323:8889328] Alive 5085\n2021-05-28 17:04:19.087 WeChat[50323:8889328] Alive 5090\n2021-05-28 17:05:59.103 WeChat[50323:8889328] Alive 5095\n2021-05-28 17:07:39.117 WeChat[50323:8889328] Alive 5100\n2021-05-28 17:09:19.134 WeChat[50323:8889328] Alive 5105\n2021-05-28 17:10:59.146 WeChat[50323:8889328] Alive 5110\n2021-05-28 17:12:39.399 WeChat[50323:8889328] Alive 5115\n2021-05-28 17:14:19.268 WeChat[50323:8889328] Alive 5120\n2021-05-28 17:15:59.304 WeChat[50323:8889328] Alive 5125\n2021-05-28 17:17:39.337 WeChat[50323:8889328] Alive 5130\n2021-05-28 17:19:19.363 WeChat[50323:8889328] Alive 5135\n2021-05-28 17:20:59.395 WeChat[50323:8889328] Alive 5140\n2021-05-28 17:22:39.428 WeChat[50323:8889328] Alive 5145\n2021-05-28 17:24:19.455 WeChat[50323:8889328] Alive 5150\n2021-05-28 17:25:59.469 WeChat[50323:8889328] Alive 5155\n2021-05-28 17:27:39.471 WeChat[50323:8889328] Alive 5160\n2021-05-28 17:29:19.490 WeChat[50323:8889328] Alive 5165\n2021-05-28 17:30:59.506 WeChat[50323:8889328] Alive 5170\n2021-05-28 17:32:39.518 WeChat[50323:8889328] Alive 5175\n2021-05-28 17:34:19.533 WeChat[50323:8889328] Alive 5180\n2021-05-28 17:35:59.543 WeChat[50323:8889328] Alive 5185\n2021-05-28 17:37:39.563 WeChat[50323:8889328] Alive 5190\n2021-05-28 17:39:19.580 WeChat[50323:8889328] Alive 5195\n2021-05-28 17:40:59.598 WeChat[50323:8889328] Alive 5200\n2021-05-28 17:42:39.614 WeChat[50323:8889328] Alive 5205\n2021-05-28 17:44:19.623 WeChat[50323:8889328] Alive 5210\n2021-05-28 17:45:59.638 WeChat[50323:8889328] Alive 5215\n2021-05-28 17:46:13.696 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa900f11bd0> -[JTCaptureRequest init]\n2021-05-28 17:46:13.697 WeChat[50323:8889328] <JTCaptureManager: 0x7fa8fdb799d0> -[JTCaptureManager init]\n2021-05-28 17:46:13.721 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9025fba70> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-28 17:46:13.769 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9025fba70> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-28 17:46:13.776 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa902490560> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-28 17:46:13.791 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f916870> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-28 17:46:13.818 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f916870> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-28 17:46:13.824 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9028f4760> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-28 17:46:14.653 WeChat[50323:8889328] <JTCaptureManager: 0x7fa8fdb799d0> -[JTCaptureManager dealloc]\n2021-05-28 17:46:14.653 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa900f11bd0> -[JTCaptureRequest dealloc]\n2021-05-28 17:46:14.653 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa902490560> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-28 17:46:14.654 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9025fba70> -[JTCaptureViewController dealloc]\n2021-05-28 17:46:14.656 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9028f4760> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-28 17:46:14.657 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f916870> -[JTCaptureViewController dealloc]\n2021-05-28 17:46:54.613 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa91279f340> -[JTCaptureRequest init]\n2021-05-28 17:46:54.614 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90eb20fa0> -[JTCaptureManager init]\n2021-05-28 17:46:54.629 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90664e880> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-28 17:46:54.675 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90664e880> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-28 17:46:54.682 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9026c5f80> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-28 17:46:54.693 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fe4543d0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-28 17:46:54.719 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fe4543d0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-28 17:46:54.726 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9088897c0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-28 17:46:58.717 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa900fea660> -[JTToolbarView configAppearanceAndLayout]\n2021-05-28 17:46:58.733 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa910eb94e0> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-28 17:47:00.356 WeChat[50323:8889328] <JTPopoverView: 0x7fa9017ceaf0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-28 17:47:00.361 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa902860ac0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-28 17:47:00.368 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa901529ad0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-28 17:47:00.368 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fe2324b0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-28 17:47:00.368 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fe2dff00> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-28 17:47:00.369 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fe670af0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-28 17:47:00.373 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa90262a630> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-28 17:47:00.377 WeChat[50323:8889328] <JTPopoverView: 0x7fa9017ceaf0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-28 17:47:00.378 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fe670af0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-28 17:47:00.380 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa902860ac0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-28 17:47:02.317 WeChat[50323:8889328] <JTPopoverView: 0x7fa9017ceaf0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-28 17:47:02.318 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fe670af0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-28 17:47:02.321 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa902860ac0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-28 17:47:02.349 WeChat[50323:8889328] <JTPopoverView: 0x7fa9017ceaf0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-28 17:47:02.350 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fe670af0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-28 17:47:02.352 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa902860ac0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-28 17:47:04.350 WeChat[50323:8889328] <JTPopoverView: 0x7fa9017ceaf0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-28 17:47:04.351 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fe670af0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-28 17:47:04.353 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa902860ac0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-28 17:47:08.245 WeChat[50323:8889328] <JTPopoverView: 0x7fa9017ceaf0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-28 17:47:08.247 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fe670af0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-28 17:47:08.249 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa902860ac0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-28 17:47:08.279 WeChat[50323:8889328] <JTPopoverView: 0x7fa9017ceaf0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-28 17:47:08.280 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fe670af0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-28 17:47:08.283 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa902860ac0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-28 17:47:12.755 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90eb20fa0> -[JTCaptureManager dealloc]\n2021-05-28 17:47:12.755 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa91279f340> -[JTCaptureRequest dealloc]\n2021-05-28 17:47:12.755 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9026c5f80> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-28 17:47:12.756 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90664e880> -[JTCaptureViewController dealloc]\n2021-05-28 17:47:12.759 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9088897c0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-28 17:47:12.759 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fe4543d0> -[JTCaptureViewController dealloc]\n2021-05-28 17:47:12.763 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa910eb94e0> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-28 17:47:12.765 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa90262a630> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-28 17:47:39.652 WeChat[50323:8889328] Alive 5220\n2021-05-28 17:49:19.659 WeChat[50323:8889328] Alive 5225\n2021-05-28 17:50:59.679 WeChat[50323:8889328] Alive 5230\n2021-05-28 17:52:39.704 WeChat[50323:8889328] Alive 5235\n2021-05-28 17:54:19.713 WeChat[50323:8889328] Alive 5240\n2021-05-28 17:55:59.720 WeChat[50323:8889328] Alive 5245\n2021-05-28 17:57:39.624 WeChat[50323:8889328] Alive 5250\n2021-05-28 17:59:19.649 WeChat[50323:8889328] Alive 5255\n2021-05-28 18:00:59.682 WeChat[50323:8889328] Alive 5260\n2021-05-28 18:02:39.690 WeChat[50323:8889328] Alive 5265\n2021-05-28 18:04:19.708 WeChat[50323:8889328] Alive 5270\n2021-05-28 18:05:59.720 WeChat[50323:8889328] Alive 5275\n2021-05-28 18:07:39.730 WeChat[50323:8889328] Alive 5280\n2021-05-28 18:09:19.747 WeChat[50323:8889328] Alive 5285\n2021-05-28 18:10:59.762 WeChat[50323:8889328] Alive 5290\n2021-05-28 18:12:39.832 WeChat[50323:8889328] Alive 5295\n2021-05-28 18:14:19.848 WeChat[50323:8889328] Alive 5300\n2021-05-28 18:15:59.861 WeChat[50323:8889328] Alive 5305\n[SQLITERK_OK] Saved master info with 113 entries.\n2021-05-28 18:17:39.876 WeChat[50323:8889328] Alive 5310\n2021-05-28 18:19:19.892 WeChat[50323:8889328] Alive 5315\n2021-05-28 18:20:59.911 WeChat[50323:8889328] Alive 5320\n2021-05-28 18:22:39.930 WeChat[50323:8889328] Alive 5325\n2021-05-28 18:24:19.940 WeChat[50323:8889328] Alive 5330\n2021-05-28 18:25:59.956 WeChat[50323:8889328] Alive 5335\n2021-05-28 18:27:39.943 WeChat[50323:8889328] Alive 5340\n2021-05-28 18:29:19.955 WeChat[50323:8889328] Alive 5345\n2021-05-28 18:30:59.974 WeChat[50323:8889328] Alive 5350\n2021-05-28 18:32:39.994 WeChat[50323:8889328] Alive 5355\n2021-05-28 18:34:20.023 WeChat[50323:8889328] Alive 5360\n2021-05-28 18:36:00.042 WeChat[50323:8889328] Alive 5365\n2021-05-28 18:37:40.054 WeChat[50323:8889328] Alive 5370\n2021-05-28 18:39:20.078 WeChat[50323:8889328] Alive 5375\n2021-05-28 18:41:00.111 WeChat[50323:8889328] Alive 5380\n2021-05-28 18:42:40.097 WeChat[50323:8889328] Alive 5385\n2021-05-28 18:44:20.110 WeChat[50323:8889328] Alive 5390\n2021-05-28 18:46:00.123 WeChat[50323:8889328] Alive 5395\n2021-05-28 18:47:40.139 WeChat[50323:8889328] Alive 5400\n2021-05-28 18:49:20.156 WeChat[50323:8889328] Alive 5405\n2021-05-28 18:51:00.171 WeChat[50323:8889328] Alive 5410\n2021-05-28 18:52:40.184 WeChat[50323:8889328] Alive 5415\n2021-05-28 18:54:20.198 WeChat[50323:8889328] Alive 5420\n2021-05-28 18:56:00.230 WeChat[50323:8889328] Alive 5425\n2021-05-28 18:57:40.248 WeChat[50323:8889328] Alive 5430\n2021-05-28 18:59:20.290 WeChat[50323:8889328] Alive 5435\n2021-05-28 19:01:00.334 WeChat[50323:8889328] Alive 5440\n2021-05-28 19:02:40.361 WeChat[50323:8889328] Alive 5445\n2021-05-28 19:04:20.372 WeChat[50323:8889328] Alive 5450\n2021-05-28 19:06:00.386 WeChat[50323:8889328] Alive 5455\n2021-05-28 19:07:16.613 WeChat[50323:8889328] Event: makeProgress, from state: connecting to state: transfering\n2021-05-28 19:07:17.058 WeChat[50323:8889328] Event: makeProgress, from state: transfering to state: transfering\n2021-05-28 19:07:17.733 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-28 19:07:17.736 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-28 19:07:40.399 WeChat[50323:8889328] Alive 5460\n2021-05-28 19:09:20.417 WeChat[50323:8889328] Alive 5465\n2021-05-28 19:11:00.433 WeChat[50323:8889328] Alive 5470\n2021-05-28 19:12:40.413 WeChat[50323:8889328] Alive 5475\n2021-05-28 19:14:20.425 WeChat[50323:8889328] Alive 5480\n2021-05-28 19:16:00.441 WeChat[50323:8889328] Alive 5485\n2021-05-28 19:17:40.459 WeChat[50323:8889328] Alive 5490\n2021-05-28 19:19:20.473 WeChat[50323:8889328] Alive 5495\n2021-05-28 19:21:00.486 WeChat[50323:8889328] Alive 5500\n2021-05-28 19:22:40.503 WeChat[50323:8889328] Alive 5505\n2021-05-28 19:24:20.517 WeChat[50323:8889328] Alive 5510\n2021-05-28 19:26:00.532 WeChat[50323:8889328] Alive 5515\n2021-05-28 19:27:40.477 WeChat[50323:8889328] Alive 5520\n2021-05-28 19:29:20.486 WeChat[50323:8889328] Alive 5525\n2021-05-28 19:31:00.502 WeChat[50323:8889328] Alive 5530\n2021-05-28 19:32:40.515 WeChat[50323:8889328] Alive 5535\n2021-05-28 19:34:20.530 WeChat[50323:8889328] Alive 5540\n2021-05-28 19:36:00.540 WeChat[50323:8889328] Alive 5545\n2021-05-28 19:37:40.553 WeChat[50323:8889328] Alive 5550\n2021-05-28 19:39:20.567 WeChat[50323:8889328] Alive 5555\n2021-05-28 19:41:00.579 WeChat[50323:8889328] Alive 5560\n2021-05-28 19:42:40.557 WeChat[50323:8889328] Alive 5565\n2021-05-28 19:44:20.576 WeChat[50323:8889328] Alive 5570\n2021-05-28 19:46:00.591 WeChat[50323:8889328] Alive 5575\n2021-05-28 19:47:40.609 WeChat[50323:8889328] Alive 5580\n2021-05-28 19:49:20.626 WeChat[50323:8889328] Alive 5585\n2021-05-28 19:51:00.640 WeChat[50323:8889328] Alive 5590\n2021-05-28 19:52:40.659 WeChat[50323:8889328] Alive 5595\n2021-05-28 19:54:20.676 WeChat[50323:8889328] Alive 5600\n2021-05-28 19:56:00.689 WeChat[50323:8889328] Alive 5605\n2021-05-28 19:57:40.816 WeChat[50323:8889328] Alive 5610\n2021-05-28 19:59:20.828 WeChat[50323:8889328] Alive 5615\n2021-05-28 20:01:00.841 WeChat[50323:8889328] Alive 5620\n2021-05-28 20:02:40.862 WeChat[50323:8889328] Alive 5625\n2021-05-28 20:04:20.877 WeChat[50323:8889328] Alive 5630\n2021-05-28 20:06:00.901 WeChat[50323:8889328] Alive 5635\n2021-05-28 20:07:40.915 WeChat[50323:8889328] Alive 5640\n2021-05-28 20:09:20.934 WeChat[50323:8889328] Alive 5645\n2021-05-28 20:11:00.951 WeChat[50323:8889328] Alive 5650\n2021-05-28 20:12:40.944 WeChat[50323:8889328] Alive 5655\n2021-05-28 20:14:20.965 WeChat[50323:8889328] Alive 5660\n2021-05-28 20:16:00.982 WeChat[50323:8889328] Alive 5665\n2021-05-28 20:17:41.000 WeChat[50323:8889328] Alive 5670\n2021-05-28 20:19:21.020 WeChat[50323:8889328] Alive 5675\n2021-05-28 20:21:01.040 WeChat[50323:8889328] Alive 5680\n2021-05-28 20:22:41.059 WeChat[50323:8889328] Alive 5685\n2021-05-28 20:24:21.087 WeChat[50323:8889328] Alive 5690\n2021-05-28 20:26:01.115 WeChat[50323:8889328] Alive 5695\n2021-05-28 20:28:47.355 WeChat[50323:8889328] Alive 5700\n2021-05-28 23:27:53.266 WeChat[50323:8889328] Alive 5705\n2021-05-29 06:28:19.727 WeChat[50323:8889328] Alive 5710\n2021-05-29 08:43:36.000 WeChat[50323:8889328] Alive 5715\n2021-05-29 09:14:27.913 WeChat[50323:8889328] Alive 5720\n2021-05-29 13:14:12.593 WeChat[50323:8889328] Alive 5725\n2021-05-29 18:14:27.242 WeChat[50323:8889328] Alive 5730\n2021-05-30 04:14:16.394 WeChat[50323:8889328] Alive 5735\n2021-05-30 11:00:46.517 WeChat[50323:8889328] Alive 5740\n2021-05-30 19:36:32.758 WeChat[50323:8889328] Alive 5745\n2021-05-31 09:25:08.317 WeChat[50323:8889328] Event: kMMLoginEventUseOneClickLogin, from state: stateStart to state: stateShowingOneClick\n2021-05-31 09:25:08.549 WeChat[50323:8889328] Warning: Expected min height of view: (<NSButton: 0x7fa908974f40>) to be less than or equal to 30 but got a height of 32.000000. This error will be logged once per view in violation.\n2021-05-31 09:25:39.509 WeChat[50323:8889328] Event: kMMLoginEventOneClickRequestSent, from state: stateShowingOneClick to state: stateWaittingConfirm\n2021-05-31 09:25:49.586 WeChat[50323:8889328] Alive 5750\n2021-05-31 09:25:55.126 WeChat[50323:8889328] Event: kMMLoginEventOneClickRequestConfirmed, from state: stateWaittingConfirm to state: stateLoggingIn\n<CFData 0x7fa908cbc030 [0x7fff806abb70]>{length = 6, capacity = 6, bytes = 0x88665a26aa4d}\n2021-05-31 09:25:56.356 WeChat[50323:8889328] <MMSplitView: 0x7fa90edc58c0>: the delegate <MMMainViewController: 0x7fa90675fa20> was sent -splitView:resizeSubviewsWithOldSize: and left the arranged view frames in an inconsistent state:\n2021-05-31 09:25:56.356 WeChat[50323:8889328] Split view bounds: {{0, 0}, {1284, 815}}\n2021-05-31 09:25:56.356 WeChat[50323:8889328]     Arranged view frame: {{0, 0}, {269, 815}}\n2021-05-31 09:25:56.356 WeChat[50323:8889328]     Arranged view frame: {{270, 0}, {1015, 815}}\n2021-05-31 09:25:56.356 WeChat[50323:8889328] The outer edges of the arranged view frames are supposed to line up with the split view's bounds' edges. NSSplitView is working around the problem, perhaps at the cost of more redrawing. (This message is only logged once per NSSplitView.)\n<CFData 0x7fa9013bca10 [0x7fff806abb70]>{length = 6, capacity = 6, bytes = 0x88665a26aa4d}\n[SQLITERK_OK] Saved master info with 153 entries.\n[SQLITERK_OK] Saved master info with 175 entries.\n2021-05-31 09:25:56.619 WeChat[50323:8889328] Warning: Expected min height of view: (<NSPopoverTouchBarItemButton: 0x7fa8fd636380>) to be less than or equal to 30 but got a height of 32.000000. This error will be logged once per view in violation.\n[SQLITERK_OK] Saved master info with 117 entries.\n[SQLITERK_OK] Saved master info with 125 entries.\n[SQLITERK_OK] Saved master info with 125 entries.\n[SQLITERK_OK] Saved master info with 139 entries.\n[SQLITERK_OK] Saved master info with 119 entries.\n2021-05-31 09:25:57.808 WeChat[50323:12669151] -[MMPinyinCacheInfo encodeWithCoder:]: unrecognized selector sent to instance 0x7fa8f8f17a30\n2021-05-31 09:25:57.824 WeChat[50323:12669151] *** -[NSKeyedArchiver dealloc]: warning: NSKeyedArchiver deallocated without having had -finishEncoding called on it.\n[SQLITERK_OK] Saved master info with 125 entries.\n[SQLITERK_OK] Saved master info with 141 entries.\n[SQLITERK_OK] Saved master info with 93 entries.\n[SQLITERK_OK] Saved master info with 125 entries.\n[SQLITERK_OK] Saved master info with 129 entries.\n[SQLITERK_OK] Saved master info with 175 entries.\nd415672, n1, d15360 -> 27 \nd3063000, n1, d90000 -> 34 \n[SQLITERK_OK] Saved master info with 123 entries.\nd8748, n1, d600 -> 15 \n[SQLITERK_OK] Saved master info with 123 entries.\n[SQLITERK_OK] Saved master info with 125 entries.\nd8748, n1, d600 -> 15 \nd8748, n1, d600 -> 15 \n2021-05-31 09:27:29.592 WeChat[50323:8889328] Alive 5755\n2021-05-31 09:29:09.595 WeChat[50323:8889328] Alive 5760\n2021-05-31 09:30:49.610 WeChat[50323:8889328] Alive 5765\n2021-05-31 09:32:29.650 WeChat[50323:8889328] Alive 5770\n2021-05-31 09:34:09.694 WeChat[50323:8889328] Alive 5775\n2021-05-31 09:35:49.715 WeChat[50323:8889328] Alive 5780\n2021-05-31 09:37:29.747 WeChat[50323:8889328] Alive 5785\n2021-05-31 09:39:09.799 WeChat[50323:8889328] Alive 5790\n2021-05-31 09:40:49.578 WeChat[50323:8889328] Alive 5795\n2021-05-31 09:42:29.600 WeChat[50323:8889328] Alive 5800\n2021-05-31 09:44:09.611 WeChat[50323:8889328] Alive 5805\n2021-05-31 09:45:58.579 WeChat[50323:8889328] Alive 5810\n2021-05-31 09:48:01.013 WeChat[50323:8889328] Alive 5815\n2021-05-31 09:50:12.530 WeChat[50323:8889328] Alive 5820\n2021-05-31 09:52:31.432 WeChat[50323:8889328] Alive 5825\n2021-05-31 09:54:28.035 WeChat[50323:8889328] Alive 5830\n2021-05-31 09:56:08.029 WeChat[50323:8889328] Alive 5835\n2021-05-31 09:57:48.123 WeChat[50323:8889328] Alive 5840\n2021-05-31 09:59:28.055 WeChat[50323:8889328] Alive 5845\n2021-05-31 10:01:08.068 WeChat[50323:8889328] Alive 5850\n2021-05-31 10:02:48.114 WeChat[50323:8889328] Alive 5855\n2021-05-31 10:04:28.134 WeChat[50323:8889328] Alive 5860\n2021-05-31 10:06:08.167 WeChat[50323:8889328] Alive 5865\n2021-05-31 10:07:48.174 WeChat[50323:8889328] Alive 5870\n2021-05-31 10:09:28.222 WeChat[50323:8889328] Alive 5875\n2021-05-31 10:09:30.109 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa8e6a7ffa0> -[JTCaptureRequest init]\n2021-05-31 10:09:30.110 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90de815f0> -[JTCaptureManager init]\n2021-05-31 10:09:30.150 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8e6b42fd0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-31 10:09:30.204 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8e6b42fd0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-31 10:09:30.212 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa914de34d0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-31 10:09:30.229 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900921450> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-31 10:09:30.255 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900921450> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-31 10:09:30.262 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8e6b876a0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-31 10:09:34.503 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa8e6ba3130> -[JTToolbarView configAppearanceAndLayout]\n2021-05-31 10:09:34.519 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa9089e19c0> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-31 10:09:35.565 WeChat[50323:8889328] <JTPopoverView: 0x7fa9118d9390> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 10:09:35.569 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fd112420> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 10:09:35.578 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fd7565f0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-31 10:09:35.579 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fd759790> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-31 10:09:35.579 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8f661ccc0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-31 10:09:35.579 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa911b0e500> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 10:09:35.584 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8e71afbd0> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-31 10:09:35.588 WeChat[50323:8889328] <JTPopoverView: 0x7fa9118d9390> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 10:09:35.589 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa911b0e500> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 10:09:35.591 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fd112420> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 10:09:36.387 WeChat[50323:8889328] <JTPopoverView: 0x7fa9118d9390> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 10:09:36.389 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa911b0e500> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 10:09:36.392 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fd112420> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 10:09:36.403 WeChat[50323:8889328] <JTPopoverView: 0x7fa9118d9390> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 10:09:36.404 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa911b0e500> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 10:09:36.406 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fd112420> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 10:09:39.401 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90de815f0> -[JTCaptureManager dealloc]\n2021-05-31 10:09:39.401 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa8e6a7ffa0> -[JTCaptureRequest dealloc]\n2021-05-31 10:09:39.401 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa914de34d0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-31 10:09:39.402 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8e6b42fd0> -[JTCaptureViewController dealloc]\n2021-05-31 10:09:39.405 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8e6b876a0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-31 10:09:39.406 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900921450> -[JTCaptureViewController dealloc]\n2021-05-31 10:09:39.407 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa9089e19c0> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-31 10:09:39.410 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8e71afbd0> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-31 10:09:43.088 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90dcdfe60> -[JTCaptureRequest init]\n2021-05-31 10:09:43.088 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90664ef50> -[JTCaptureManager init]\n2021-05-31 10:09:43.107 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8f993b660> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-31 10:09:43.151 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8f993b660> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-31 10:09:43.157 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90dc45eb0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-31 10:09:43.173 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fe676c90> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-31 10:09:43.195 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fe676c90> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-31 10:09:43.201 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa900ec6170> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-31 10:09:47.242 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa8e6ba3130> -[JTToolbarView configAppearanceAndLayout]\n2021-05-31 10:09:47.256 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8ff239b10> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-31 10:09:48.231 WeChat[50323:8889328] <JTPopoverView: 0x7fa8e71d6d60> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 10:09:48.235 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fe735d90> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 10:09:48.241 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa9119fa1b0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-31 10:09:48.241 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa9119e6580> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-31 10:09:48.242 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fe342500> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-31 10:09:48.242 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8f825abc0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 10:09:48.244 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa9009c9a70> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-31 10:09:48.248 WeChat[50323:8889328] <JTPopoverView: 0x7fa8e71d6d60> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 10:09:48.249 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8f825abc0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 10:09:48.273 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fe735d90> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 10:09:50.875 WeChat[50323:8889328] <JTPopoverView: 0x7fa8e71d6d60> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 10:09:50.877 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8f825abc0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 10:09:50.879 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fe735d90> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 10:09:52.187 WeChat[50323:8889328] <JTPopoverView: 0x7fa8e71d6d60> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 10:09:52.189 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8f825abc0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 10:09:52.191 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fe735d90> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 10:09:52.200 WeChat[50323:8889328] <JTPopoverView: 0x7fa8e71d6d60> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 10:09:52.201 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8f825abc0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 10:09:52.203 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8fe735d90> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 10:09:54.554 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90664ef50> -[JTCaptureManager dealloc]\n2021-05-31 10:09:54.554 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90dcdfe60> -[JTCaptureRequest dealloc]\n2021-05-31 10:09:54.554 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90dc45eb0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-31 10:09:54.555 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8f993b660> -[JTCaptureViewController dealloc]\n2021-05-31 10:09:54.557 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa900ec6170> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-31 10:09:54.557 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fe676c90> -[JTCaptureViewController dealloc]\n2021-05-31 10:09:54.561 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8ff239b10> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-31 10:09:54.563 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa9009c9a70> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-31 10:11:08.304 WeChat[50323:8889328] Alive 5880\n2021-05-31 10:12:48.497 WeChat[50323:8889328] Alive 5885\n2021-05-31 10:14:28.512 WeChat[50323:8889328] Alive 5890\n2021-05-31 10:16:08.545 WeChat[50323:8889328] Alive 5895\n2021-05-31 10:17:48.550 WeChat[50323:8889328] Alive 5900\n2021-05-31 10:19:28.561 WeChat[50323:8889328] Alive 5905\n2021-05-31 10:21:08.606 WeChat[50323:8889328] Alive 5910\n2021-05-31 10:22:48.617 WeChat[50323:8889328] Alive 5915\n2021-05-31 10:24:28.632 WeChat[50323:8889328] Alive 5920\n2021-05-31 10:26:08.614 WeChat[50323:8889328] Alive 5925\n2021-05-31 10:27:48.623 WeChat[50323:8889328] Alive 5930\n2021-05-31 10:29:28.654 WeChat[50323:8889328] Alive 5935\n2021-05-31 10:30:32.038 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 10:30:32.038 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 10:30:32.038 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 10:30:32.042 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 10:30:32.042 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 10:30:32.042 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 10:31:08.663 WeChat[50323:8889328] Alive 5940\n2021-05-31 10:31:09.161 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 10:31:09.161 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 10:31:09.161 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 10:31:09.185 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 10:31:09.185 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 10:31:09.185 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 10:32:48.682 WeChat[50323:8889328] Alive 5945\n2021-05-31 10:34:28.696 WeChat[50323:8889328] Alive 5950\n2021-05-31 10:36:08.719 WeChat[50323:8889328] Alive 5955\n2021-05-31 10:36:23.029 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 10:36:23.029 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 10:36:23.029 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 10:36:23.029 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 10:36:23.029 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 10:36:23.029 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 10:36:28.626 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"CE6FD2DB-C9D8-4218-82E7-C3A3AEFC5DBE\\\"}\"\n)\n2021-05-31 10:36:28.692 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"9defeb3ba3913e177632638b950be23d36347fe5\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-05-31 10:36:30.393 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"getNetworkType\\\",\\\"params\\\":{\\\"__context_key\\\":\\\"9defeb3ba3913e177632638b950be23d36347fe5\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1001\\\"}\"\n)\n2021-05-31 10:36:30.395 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"setNavigationBarColor\\\",\\\"params\\\":{\\\"color\\\":\\\"#ffffff\\\",\\\"__context_key\\\":\\\"9defeb3ba3913e177632638b950be23d36347fe5\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1002\\\"}\"\n)\n2021-05-31 10:36:30.396 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"setBounceBackground\\\",\\\"params\\\":{\\\"backgroundColor\\\":\\\"#ffffff\\\",\\\"footerBounceColor\\\":\\\"#f2f2f2\\\",\\\"__context_key\\\":\\\"9defeb3ba3913e177632638b950be23d36347fe5\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1003\\\"}\"\n)\n2021-05-31 10:36:30.412 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"writeLog\\\",\\\"params\\\":{\\\"level\\\":\\\"info\\\",\\\"msg\\\":\\\"__wap__ wx config web compt result,wxOpen,{\\\\\\\"err_msg\\\\\\\":\\\\\\\"handleMPPageAction:fail_webcompt unsupported\\\\\\\"} location:[https://mp.weixin.qq.com/s?__biz=MzU0MDk5NjEwMw==∣=2247486899&idx=1&sn=da35cea7b6ad2891025c4c89cc5d31ab&chksm=fb31eadbcc4663cd5463f450da7424b74ec9ab864ec61f5b40cfe5a4a32fa767f3aa1492010a&mpshare=1&scene=1&srcid=0531UI1fDKtoXSC2z8BtmwMX&sharer_sharetime=1622428534902&sharer_shareid=d9e810c91b0a377ab461dcd5665c8dc8&key=ace2cc80b8518f95ae629b7f66d6474fa8e55d6658fa602e33914831522d5be96ab0e5a92ae8645f9e2085464ac8f4eaed72b5d782f247f1cebce0f5b2d269d8a8569c600d82ab28944f39dcf5eaafb41dc87b5b7d5bcb4e2c55748890791385f3834771c9cb894930bbe55c3df6d381996fde1f530e44757a0ac209dcba2f12&ascene=1&uin=MzcxNTQ0NDAw&devicetype=iMac+MacBookPro16%2C1+OSX+OSX+10.16+build(20E241)&version=13000310&nettype=WIFI⟨=en&fontScale=100&exportkey=AtxI%2FYhncor3CNvOAyh4C0U%3D&pass_ticket=85eB1v%2FLFFnSb6O3BAzKOC1BJRu7ku4mPG8Aiv23XeWtPaDZsC%2BMrlmIycYa9ggB&wx_header=0&fontgear=2.000000]\\\",\\\"__context_key\\\":\\\"9defeb3ba3913e177632638b950be23d36347fe5\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1004\\\"}\"\n)\n2021-05-31 10:36:30.423 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"currentMpInfo\\\",\\\"params\\\":{\\\"userName\\\":\\\"gh_d1e65c8885b3\\\",\\\"brandName\\\":\\\"\\U897f\\U897f\\U5f17\\U8bc4\\U8bba\\\",\\\"title\\\":\\\"\\U8eba\\U5e73\\U65e0\\U7f6a\\Uff0c\\U8eba\\U5e73\\U6709\\U7406\\\",\\\"brandIcon\\\":\\\"http://wx.qlogo.cn/mmhead/Q3auHgzwzM5uNyf2KporZc0icq29PbVvUBtvNQyGCVF6uoiaZzg4avBA/132\\\",\\\"topBarStyle\\\":0,\\\"topBarShowed\\\":false,\\\"isMenuShowBrandInfo\\\":1,\\\"cover\\\":\\\"https://mmbiz.qlogo.cn/mmbiz_jpg/EaUJMQo81OE3U8icctLGITyjNiamicwjhib8k2P8F9ffzjK3Z18yJw2hVfPETOiaYQNicuDbuttm0KBY7SSfJWYytq8g/0?wx_fmt=jpeg\\\",\\\"digest\\\":\\\"\\U8eba\\U5e73\\U662f\\U4e00\\U79cd\\U4e0d\\U503c\\U5f97\\U63d0\\U5021\\Uff0c\\U4f46\\U65e0\\U53ef\\U975e\\U8bae\\U7684\\U4eba\\U751f\\U89c2\\U3002\\U8eba\\U5e73\\U4e00\\U65cf\\U662f\\U751f\\U4ea7\\U529b\\U53d1\\U8fbe\\Uff0c\\U7269\\U8d28\\U4e30\\U5bcc\\U540e\\U51fa\\U73b0\\U7684\\U4eba\\U751f\\U89c2\\U3002\\U4e00\\U4e2a\\U793e\\U4f1a\\U5f00\\U59cb\\U6709\\U4e86\\U8eba\\U5e73\\U4e00\\U65cf\\Uff0c\\U4e0d\\U7b97\\U5565\\U574f\\U4e8b\\U3002\\\",\\\"itemShowType\\\":\\\"0\\\",\\\"isPaySubscribe\\\":0,\\\"forbidForward\\\":0,\\\"__context_key\\\":\\\"9defeb3ba3913e177632638b950be23d36347fe5\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1005\\\"}\"\n)\n2021-05-31 10:36:30.462 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"createWebViewForFastLoad\\\",\\\"params\\\":{\\\"scene\\\":1,\\\"__context_key\\\":\\\"9defeb3ba3913e177632638b950be23d36347fe5\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1006\\\"}\"\n)\n2021-05-31 10:36:30.462 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"hideToolbar\\\",\\\"params\\\":{\\\"__context_key\\\":\\\"9defeb3ba3913e177632638b950be23d36347fe5\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1007\\\"}\"\n)\n2021-05-31 10:36:30.462 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"showOptionMenu\\\",\\\"params\\\":{\\\"__context_key\\\":\\\"9defeb3ba3913e177632638b950be23d36347fe5\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1008\\\"}\"\n)\n2021-05-31 10:36:30.480 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"getNetworkType\\\",\\\"params\\\":{\\\"__context_key\\\":\\\"9defeb3ba3913e177632638b950be23d36347fe5\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1009\\\"}\"\n)\n2021-05-31 10:36:30.722 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"handleHaokanAction\\\",\\\"params\\\":{\\\"imgUrl\\\":\\\"http://wx.qlogo.cn/mmhead/Q3auHgzwzM5uNyf2KporZc0icq29PbVvUBtvNQyGCVF6uoiaZzg4avBA/132\\\",\\\"link\\\":\\\"http://mp.weixin.qq.com/s?__biz=MzU0MDk5NjEwMw==∣=2247486899&idx=1&sn=da35cea7b6ad2891025c4c89cc5d31ab&chksm=fb31eadbcc4663cd5463f450da7424b74ec9ab864ec61f5b40cfe5a4a32fa767f3aa1492010a#rd\\\",\\\"desc\\\":\\\"\\U8eba\\U5e73\\U662f\\U4e00\\U79cd\\U4e0d\\U503c\\U5f97\\U63d0\\U5021\\Uff0c\\U4f46\\U65e0\\U53ef\\U975e\\U8bae\\U7684\\U4eba\\U751f\\U89c2\\U3002\\U8eba\\U5e73\\U4e00\\U65cf\\U662f\\U751f\\U4ea7\\U529b\\U53d1\\U8fbe\\Uff0c\\U7269\\U8d28\\U4e30\\U5bcc\\U540e\\U51fa\\U73b0\\U7684\\U4eba\\U751f\\U89c2\\U3002\\U4e00\\U4e2a\\U793e\\U4f1a\\U5f00\\U59cb\\U6709\\U4e86\\U8eba\\U5e73\\U4e00\\U65cf\\Uff0c\\U4e0d\\U7b97\\U5565\\U574f\\U4e8b\\U3002\\\",\\\"title\\\":\\\"\\U8eba\\U5e73\\U65e0\\U7f6a\\Uff0c\\U8eba\\U5e73\\U6709\\U7406\\\",\\\"action\\\":\\\"update_recommend_status\\\",\\\"permission\\\":1,\\\"recommend\\\":0,\\\"__context_key\\\":\\\"9defeb3ba3913e177632638b950be23d36347fe5\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1010\\\"}\"\n)\n2021-05-31 10:36:34.250 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"handleMPPageAction\\\",\\\"params\\\":{\\\"action\\\":\\\"syncReadState\\\",\\\"state\\\":0,\\\"__context_key\\\":\\\"9defeb3ba3913e177632638b950be23d36347fe5\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1011\\\"}\"\n)\n2021-05-31 10:37:19.315 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"handleMPPageAction\\\",\\\"params\\\":{\\\"action\\\":\\\"syncReadState\\\",\\\"state\\\":1,\\\"__context_key\\\":\\\"9defeb3ba3913e177632638b950be23d36347fe5\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1012\\\"}\"\n)\n2021-05-31 10:37:48.720 WeChat[50323:8889328] Alive 5960\n2021-05-31 10:38:06.551 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 10:38:06.551 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 10:38:06.551 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 10:38:06.565 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 10:38:06.565 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 10:38:06.565 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 10:39:28.738 WeChat[50323:8889328] Alive 5965\n2021-05-31 10:41:08.753 WeChat[50323:8889328] Alive 5970\n2021-05-31 10:42:48.876 WeChat[50323:8889328] Alive 5975\n2021-05-31 10:44:28.787 WeChat[50323:8889328] Alive 5980\n2021-05-31 10:46:08.798 WeChat[50323:8889328] Alive 5985\n2021-05-31 10:47:48.820 WeChat[50323:8889328] Alive 5990\n2021-05-31 10:49:28.825 WeChat[50323:8889328] Alive 5995\n2021-05-31 10:51:08.840 WeChat[50323:8889328] Alive 6000\n2021-05-31 10:52:08.457 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 10:52:08.457 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 10:52:08.457 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 10:52:08.459 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 10:52:08.459 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 10:52:08.459 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 10:52:17.054 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 10:52:17.054 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 10:52:17.054 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 10:52:17.055 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 10:52:17.055 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 10:52:17.055 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 10:52:40.870 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 10:52:40.870 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 10:52:40.870 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 10:52:40.871 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 10:52:40.871 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 10:52:40.871 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 10:52:48.856 WeChat[50323:8889328] Alive 6005\n2021-05-31 10:52:52.951 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 10:52:52.951 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 10:52:52.951 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 10:52:52.984 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 10:52:52.984 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 10:52:52.984 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 10:53:06.399 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 10:53:06.399 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 10:53:06.399 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 10:53:06.400 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 10:53:06.400 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 10:53:06.400 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 10:53:15.701 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 10:53:15.701 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 10:53:15.702 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 10:53:15.702 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 10:53:15.702 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 10:53:15.702 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 10:54:28.872 WeChat[50323:8889328] Alive 6010\n2021-05-31 10:56:08.692 WeChat[50323:8889328] Alive 6015\n2021-05-31 10:57:48.703 WeChat[50323:8889328] Alive 6020\n2021-05-31 10:59:28.717 WeChat[50323:8889328] Alive 6025\n2021-05-31 11:01:08.747 WeChat[50323:8889328] Alive 6030\n2021-05-31 11:02:40.798 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-31 11:02:48.763 WeChat[50323:8889328] Alive 6035\n2021-05-31 11:04:28.777 WeChat[50323:8889328] Alive 6040\n2021-05-31 11:06:08.794 WeChat[50323:8889328] Alive 6045\n2021-05-31 11:07:33.097 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-31 11:07:33.103 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-31 11:07:48.805 WeChat[50323:8889328] Alive 6050\n2021-05-31 11:09:28.897 WeChat[50323:8889328] Alive 6055\n2021-05-31 11:11:08.955 WeChat[50323:8889328] Alive 6060\n2021-05-31 11:12:48.943 WeChat[50323:8889328] Alive 6065\n2021-05-31 11:14:28.957 WeChat[50323:8889328] Alive 6070\n2021-05-31 11:16:08.959 WeChat[50323:8889328] Alive 6075\n2021-05-31 11:17:48.963 WeChat[50323:8889328] Alive 6080\n2021-05-31 11:19:28.965 WeChat[50323:8889328] Alive 6085\n2021-05-31 11:21:08.968 WeChat[50323:8889328] Alive 6090\n2021-05-31 11:22:49.011 WeChat[50323:8889328] Alive 6095\n2021-05-31 11:24:42.467 WeChat[50323:8889328] Alive 6100\n2021-05-31 11:26:41.076 WeChat[50323:8889328] Alive 6105\n2021-05-31 11:28:21.089 WeChat[50323:8889328] Alive 6110\n2021-05-31 11:30:01.102 WeChat[50323:8889328] Alive 6115\n2021-05-31 11:31:41.110 WeChat[50323:8889328] Alive 6120\n2021-05-31 11:33:21.125 WeChat[50323:8889328] Alive 6125\n2021-05-31 11:35:01.143 WeChat[50323:8889328] Alive 6130\n2021-05-31 11:36:41.159 WeChat[50323:8889328] Alive 6135\n2021-05-31 11:38:21.179 WeChat[50323:8889328] Alive 6140\n2021-05-31 11:40:01.192 WeChat[50323:8889328] Alive 6145\n2021-05-31 11:41:41.092 WeChat[50323:8889328] Alive 6150\n2021-05-31 11:43:21.111 WeChat[50323:8889328] Alive 6155\n2021-05-31 11:45:01.121 WeChat[50323:8889328] Alive 6160\n2021-05-31 11:46:41.132 WeChat[50323:8889328] Alive 6165\n2021-05-31 11:48:21.161 WeChat[50323:8889328] Alive 6170\n2021-05-31 11:50:01.174 WeChat[50323:8889328] Alive 6175\n2021-05-31 11:50:54.860 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 11:50:54.860 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 11:50:54.860 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 11:50:54.862 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 11:50:54.862 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 11:50:54.862 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 11:51:41.194 WeChat[50323:8889328] Alive 6180\n2021-05-31 11:53:21.206 WeChat[50323:8889328] Alive 6185\n2021-05-31 11:55:01.217 WeChat[50323:8889328] Alive 6190\n2021-05-31 11:56:41.259 WeChat[50323:8889328] Alive 6195\n2021-05-31 11:58:21.275 WeChat[50323:8889328] Alive 6200\n2021-05-31 12:00:01.290 WeChat[50323:8889328] Alive 6205\n2021-05-31 12:01:41.307 WeChat[50323:8889328] Alive 6210\n2021-05-31 12:03:21.325 WeChat[50323:8889328] Alive 6215\n2021-05-31 12:05:00.175 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa8f71d8090> -[JTCaptureRequest init]\n2021-05-31 12:05:00.176 WeChat[50323:8889328] <JTCaptureManager: 0x7fa900a48710> -[JTCaptureManager init]\n2021-05-31 12:05:00.216 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9009781b0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-31 12:05:00.263 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9009781b0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-31 12:05:00.271 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9023e75a0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-31 12:05:00.302 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fb5aacd0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-31 12:05:00.326 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fb5aacd0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-31 12:05:00.334 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f8e12c0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-31 12:05:01.332 WeChat[50323:8889328] Alive 6220\n2021-05-31 12:05:02.634 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa8fd3d0020> -[JTToolbarView configAppearanceAndLayout]\n2021-05-31 12:05:02.651 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa90f7631d0> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-31 12:05:03.371 WeChat[50323:8889328] <JTCaptureManager: 0x7fa900a48710> -[JTCaptureManager dealloc]\n2021-05-31 12:05:03.371 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa8f71d8090> -[JTCaptureRequest dealloc]\n2021-05-31 12:05:03.375 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9023e75a0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-31 12:05:03.376 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9009781b0> -[JTCaptureViewController dealloc]\n2021-05-31 12:05:03.379 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f8e12c0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-31 12:05:03.379 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fb5aacd0> -[JTCaptureViewController dealloc]\n2021-05-31 12:05:03.380 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa90f7631d0> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-31 12:06:09.279 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 12:06:09.279 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 12:06:09.279 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 12:06:09.283 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 12:06:09.283 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 12:06:09.283 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 12:06:40.643 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 12:06:40.643 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 12:06:40.643 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 12:06:40.644 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 12:06:40.644 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 12:06:40.644 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 12:06:41.339 WeChat[50323:8889328] Alive 6225\n2021-05-31 12:06:47.324 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 12:06:47.324 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 12:06:47.324 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 12:06:47.325 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 12:06:47.325 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 12:06:47.325 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 12:07:02.606 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 12:07:02.606 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 12:07:02.606 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 12:07:02.612 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 12:07:02.612 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 12:07:02.612 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 12:08:21.359 WeChat[50323:8889328] Alive 6230\n2021-05-31 12:10:01.375 WeChat[50323:8889328] Alive 6235\n2021-05-31 12:11:41.541 WeChat[50323:8889328] Alive 6240\n2021-05-31 12:13:21.559 WeChat[50323:8889328] Alive 6245\n2021-05-31 12:15:40.286 WeChat[50323:8889328] Alive 6250\n2021-05-31 12:17:38.288 WeChat[50323:8889328] Alive 6255\n2021-05-31 12:20:18.320 WeChat[50323:8889328] Alive 6260\n2021-05-31 12:22:58.326 WeChat[50323:8889328] Alive 6265\n2021-05-31 12:25:12.579 WeChat[50323:8889328] Alive 6270\n2021-05-31 12:26:52.564 WeChat[50323:8889328] Alive 6275\n2021-05-31 12:28:32.571 WeChat[50323:8889328] Alive 6280\n2021-05-31 12:30:42.570 WeChat[50323:8889328] Alive 6285\n2021-05-31 12:32:42.574 WeChat[50323:8889328] Alive 6290\n2021-05-31 12:34:42.577 WeChat[50323:8889328] Alive 6295\n2021-05-31 12:36:35.483 WeChat[50323:8889328] Alive 6300\n2021-05-31 12:38:15.530 WeChat[50323:8889328] Alive 6305\n2021-05-31 12:40:12.586 WeChat[50323:8889328] Alive 6310\n2021-05-31 12:42:02.500 WeChat[50323:8889328] Alive 6315\n2021-05-31 12:43:42.503 WeChat[50323:8889328] Alive 6320\n2021-05-31 12:45:52.506 WeChat[50323:8889328] Alive 6325\n2021-05-31 12:47:42.553 WeChat[50323:8889328] Alive 6330\n2021-05-31 12:49:42.510 WeChat[50323:8889328] Alive 6335\n2021-05-31 12:52:12.511 WeChat[50323:8889328] Alive 6340\n2021-05-31 12:53:56.920 WeChat[50323:8889328] Alive 6345\n2021-05-31 12:56:12.202 WeChat[50323:8889328] Alive 6350\n2021-05-31 12:57:52.203 WeChat[50323:8889328] Alive 6355\n2021-05-31 12:59:42.205 WeChat[50323:8889328] Alive 6360\n2021-05-31 13:01:22.700 WeChat[50323:8889328] Alive 6365\n2021-05-31 13:03:07.253 WeChat[50323:8889328] Alive 6370\n2021-05-31 13:04:47.248 WeChat[50323:8889328] Alive 6375\n2021-05-31 13:06:32.249 WeChat[50323:8889328] Alive 6380\n2021-05-31 13:08:12.497 WeChat[50323:8889328] Alive 6385\n2021-05-31 13:09:57.293 WeChat[50323:8889328] Alive 6390\n2021-05-31 13:11:57.247 WeChat[50323:8889328] Alive 6395\n2021-05-31 13:13:37.385 WeChat[50323:8889328] Alive 6400\n2021-05-31 13:15:17.292 WeChat[50323:8889328] Alive 6405\n2021-05-31 13:16:57.951 WeChat[50323:8889328] Alive 6410\n2021-05-31 13:18:38.042 WeChat[50323:8889328] Alive 6415\n2021-05-31 13:20:18.043 WeChat[50323:8889328] Alive 6420\n2021-05-31 13:22:12.240 WeChat[50323:8889328] Alive 6425\n2021-05-31 13:23:52.241 WeChat[50323:8889328] Alive 6430\n2021-05-31 13:25:37.246 WeChat[50323:8889328] Alive 6435\n2021-05-31 13:27:17.341 WeChat[50323:8889328] Alive 6440\n2021-05-31 13:29:00.746 WeChat[50323:8889328] Alive 6445\n2021-05-31 13:31:12.246 WeChat[50323:8889328] Alive 6450\n2021-05-31 13:33:02.754 WeChat[50323:8889328] Alive 6455\n2021-05-31 13:34:56.594 WeChat[50323:8889328] Alive 6460\n2021-05-31 13:36:42.501 WeChat[50323:8889328] Alive 6465\n2021-05-31 13:38:22.243 WeChat[50323:8889328] Alive 6470\n2021-05-31 13:40:17.247 WeChat[50323:8889328] Alive 6475\n2021-05-31 13:41:57.356 WeChat[50323:8889328] Alive 6480\n2021-05-31 13:43:42.352 WeChat[50323:8889328] Alive 6485\n2021-05-31 13:45:32.351 WeChat[50323:8889328] Alive 6490\n2021-05-31 13:47:27.356 WeChat[50323:8889328] Alive 6495\n2021-05-31 13:49:12.356 WeChat[50323:8889328] Alive 6500\n2021-05-31 13:50:57.360 WeChat[50323:8889328] Alive 6505\n2021-05-31 13:52:42.607 WeChat[50323:8889328] Alive 6510\n2021-05-31 13:54:24.118 WeChat[50323:8889328] Alive 6515\n2021-05-31 13:56:04.148 WeChat[50323:8889328] Alive 6520\n2021-05-31 13:57:44.178 WeChat[50323:8889328] Alive 6525\n2021-05-31 13:59:24.199 WeChat[50323:8889328] Alive 6530\n2021-05-31 14:01:04.212 WeChat[50323:8889328] Alive 6535\n2021-05-31 14:02:44.245 WeChat[50323:8889328] Alive 6540\n2021-05-31 14:04:24.258 WeChat[50323:8889328] Alive 6545\n2021-05-31 14:06:04.276 WeChat[50323:8889328] Alive 6550\n2021-05-31 14:07:44.301 WeChat[50323:8889328] Alive 6555\n2021-05-31 14:09:24.312 WeChat[50323:8889328] Alive 6560\n2021-05-31 14:11:04.356 WeChat[50323:8889328] Alive 6565\n2021-05-31 14:12:44.390 WeChat[50323:8889328] Alive 6570\n2021-05-31 14:14:24.410 WeChat[50323:8889328] Alive 6575\n2021-05-31 14:16:04.425 WeChat[50323:8889328] Alive 6580\n2021-05-31 14:17:44.439 WeChat[50323:8889328] Alive 6585\n2021-05-31 14:19:24.458 WeChat[50323:8889328] Alive 6590\n2021-05-31 14:21:04.472 WeChat[50323:8889328] Alive 6595\n2021-05-31 14:22:44.488 WeChat[50323:8889328] Alive 6600\n2021-05-31 14:24:24.502 WeChat[50323:8889328] Alive 6605\n2021-05-31 14:26:04.599 WeChat[50323:8889328] Alive 6610\n2021-05-31 14:27:44.614 WeChat[50323:8889328] Alive 6615\n2021-05-31 14:29:24.638 WeChat[50323:8889328] Alive 6620\n2021-05-31 14:31:04.657 WeChat[50323:8889328] Alive 6625\n2021-05-31 14:32:44.676 WeChat[50323:8889328] Alive 6630\n2021-05-31 14:34:24.691 WeChat[50323:8889328] Alive 6635\n2021-05-31 14:35:03.521 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-31 14:35:03.943 WeChat[50323:8889328] Event: hangUpTransfer, from state: connecting to state: notStart\n2021-05-31 14:36:04.701 WeChat[50323:8889328] Alive 6640\n2021-05-31 14:37:44.721 WeChat[50323:8889328] Alive 6645\n2021-05-31 14:39:24.741 WeChat[50323:8889328] Alive 6650\n2021-05-31 14:41:04.758 WeChat[50323:8889328] Alive 6655\n2021-05-31 14:42:44.774 WeChat[50323:8889328] Alive 6660\n2021-05-31 14:44:24.798 WeChat[50323:8889328] Alive 6665\n2021-05-31 14:46:04.808 WeChat[50323:8889328] Alive 6670\n2021-05-31 14:47:44.827 WeChat[50323:8889328] Alive 6675\n2021-05-31 14:49:24.841 WeChat[50323:8889328] Alive 6680\n2021-05-31 14:50:13.135 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa914d323d0> -[JTCaptureRequest init]\n2021-05-31 14:50:13.135 WeChat[50323:8889328] <JTCaptureManager: 0x7fa9088f1c50> -[JTCaptureManager init]\n2021-05-31 14:50:13.157 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9028260f0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-31 14:50:13.203 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9028260f0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-31 14:50:13.208 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9088da810> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-31 14:50:13.222 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9118b2010> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-31 14:50:13.246 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9118b2010> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-31 14:50:13.252 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f00d8a0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-31 14:50:16.022 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa8f8b3fe30> -[JTToolbarView configAppearanceAndLayout]\n2021-05-31 14:50:16.035 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa9088da0c0> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-31 14:50:17.257 WeChat[50323:8889328] <JTCaptureManager: 0x7fa9088f1c50> -[JTCaptureManager dealloc]\n2021-05-31 14:50:17.257 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa914d323d0> -[JTCaptureRequest dealloc]\n2021-05-31 14:50:17.257 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9088da810> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-31 14:50:17.258 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9028260f0> -[JTCaptureViewController dealloc]\n2021-05-31 14:50:17.260 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f00d8a0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-31 14:50:17.260 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9118b2010> -[JTCaptureViewController dealloc]\n2021-05-31 14:50:17.264 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa9088da0c0> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-31 14:51:04.857 WeChat[50323:8889328] Alive 6685\n2021-05-31 14:51:19.603 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 14:51:19.603 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 14:51:19.603 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 14:51:19.605 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 14:51:19.605 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 14:51:19.605 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 14:52:44.928 WeChat[50323:8889328] Alive 6690\n2021-05-31 14:54:32.584 WeChat[50323:8889328] Alive 6695\n2021-05-31 14:56:32.614 WeChat[50323:8889328] Alive 6700\n2021-05-31 14:58:12.629 WeChat[50323:8889328] Alive 6705\n2021-05-31 14:59:53.227 WeChat[50323:8889328] Alive 6710\n2021-05-31 15:02:02.830 WeChat[50323:8889328] Alive 6715\n2021-05-31 15:03:42.834 WeChat[50323:8889328] Alive 6720\n2021-05-31 15:05:42.637 WeChat[50323:8889328] Alive 6725\n2021-05-31 15:07:22.640 WeChat[50323:8889328] Alive 6730\n2021-05-31 15:09:02.657 WeChat[50323:8889328] Alive 6735\n2021-05-31 15:10:42.672 WeChat[50323:8889328] Alive 6740\n2021-05-31 15:12:22.721 WeChat[50323:8889328] Alive 6745\n2021-05-31 15:14:02.736 WeChat[50323:8889328] Alive 6750\n2021-05-31 15:15:42.751 WeChat[50323:8889328] Alive 6755\n2021-05-31 15:17:22.762 WeChat[50323:8889328] Alive 6760\n2021-05-31 15:19:02.779 WeChat[50323:8889328] Alive 6765\n2021-05-31 15:20:42.788 WeChat[50323:8889328] Alive 6770\n2021-05-31 15:22:22.803 WeChat[50323:8889328] Alive 6775\n2021-05-31 15:24:02.824 WeChat[50323:8889328] Alive 6780\n2021-05-31 15:25:42.843 WeChat[50323:8889328] Alive 6785\n2021-05-31 15:27:22.829 WeChat[50323:8889328] Alive 6790\n2021-05-31 15:29:02.843 WeChat[50323:8889328] Alive 6795\n2021-05-31 15:30:42.858 WeChat[50323:8889328] Alive 6800\n2021-05-31 15:32:22.880 WeChat[50323:8889328] Alive 6805\n2021-05-31 15:34:02.897 WeChat[50323:8889328] Alive 6810\n2021-05-31 15:35:42.918 WeChat[50323:8889328] Alive 6815\n2021-05-31 15:37:22.932 WeChat[50323:8889328] Alive 6820\n2021-05-31 15:39:02.944 WeChat[50323:8889328] Alive 6825\n2021-05-31 15:40:42.963 WeChat[50323:8889328] Alive 6830\n2021-05-31 15:42:22.887 WeChat[50323:8889328] Alive 6835\n2021-05-31 15:44:02.902 WeChat[50323:8889328] Alive 6840\n2021-05-31 15:45:42.916 WeChat[50323:8889328] Alive 6845\n2021-05-31 15:47:22.927 WeChat[50323:8889328] Alive 6850\n2021-05-31 15:49:02.971 WeChat[50323:8889328] Alive 6855\n2021-05-31 15:50:42.970 WeChat[50323:8889328] Alive 6860\n2021-05-31 15:52:22.994 WeChat[50323:8889328] Alive 6865\n2021-05-31 15:54:03.014 WeChat[50323:8889328] Alive 6870\n2021-05-31 15:55:43.034 WeChat[50323:8889328] Alive 6875\n2021-05-31 15:57:23.040 WeChat[50323:8889328] Alive 6880\n2021-05-31 15:59:03.057 WeChat[50323:8889328] Alive 6885\n2021-05-31 16:00:43.077 WeChat[50323:8889328] Alive 6890\n2021-05-31 16:02:23.095 WeChat[50323:8889328] Alive 6895\n2021-05-31 16:04:03.112 WeChat[50323:8889328] Alive 6900\n2021-05-31 16:05:43.123 WeChat[50323:8889328] Alive 6905\n2021-05-31 16:07:23.139 WeChat[50323:8889328] Alive 6910\n2021-05-31 16:09:03.153 WeChat[50323:8889328] Alive 6915\n2021-05-31 16:10:43.169 WeChat[50323:8889328] Alive 6920\n2021-05-31 16:12:23.237 WeChat[50323:8889328] Alive 6925\n2021-05-31 16:14:03.244 WeChat[50323:8889328] Alive 6930\n2021-05-31 16:15:43.248 WeChat[50323:8889328] Alive 6935\n2021-05-31 16:17:23.255 WeChat[50323:8889328] Alive 6940\n2021-05-31 16:19:03.261 WeChat[50323:8889328] Alive 6945\n2021-05-31 16:20:43.303 WeChat[50323:8889328] Alive 6950\n2021-05-31 16:22:23.307 WeChat[50323:8889328] Alive 6955\n2021-05-31 16:24:03.360 WeChat[50323:8889328] Alive 6960\n2021-05-31 16:25:43.365 WeChat[50323:8889328] Alive 6965\n2021-05-31 16:27:23.312 WeChat[50323:8889328] Alive 6970\n2021-05-31 16:29:03.361 WeChat[50323:8889328] Alive 6975\nd5040, n1, d600 -> 8 \n2021-05-31 16:30:43.365 WeChat[50323:8889328] Alive 6980\n2021-05-31 16:32:23.369 WeChat[50323:8889328] Alive 6985\n2021-05-31 16:34:03.418 WeChat[50323:8889328] Alive 6990\n2021-05-31 16:35:43.422 WeChat[50323:8889328] Alive 6995\n2021-05-31 16:37:23.427 WeChat[50323:8889328] Alive 7000\n2021-05-31 16:39:03.433 WeChat[50323:8889328] Alive 7005\n2021-05-31 16:39:12.324 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-31 16:39:13.797 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-31 16:40:43.444 WeChat[50323:8889328] Alive 7010\n2021-05-31 16:42:23.107 WeChat[50323:8889328] Alive 7015\n2021-05-31 16:44:03.118 WeChat[50323:8889328] Alive 7020\n2021-05-31 16:45:43.131 WeChat[50323:8889328] Alive 7025\n2021-05-31 16:47:23.136 WeChat[50323:8889328] Alive 7030\n2021-05-31 16:49:03.183 WeChat[50323:8889328] Alive 7035\n2021-05-31 16:50:43.199 WeChat[50323:8889328] Alive 7040\n2021-05-31 16:52:23.238 WeChat[50323:8889328] Alive 7045\n2021-05-31 16:54:03.257 WeChat[50323:8889328] Alive 7050\n2021-05-31 16:55:43.285 WeChat[50323:8889328] Alive 7055\n2021-05-31 16:57:23.405 WeChat[50323:8889328] Alive 7060\n2021-05-31 16:59:03.418 WeChat[50323:8889328] Alive 7065\n2021-05-31 17:00:38.315 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 17:00:38.315 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 17:00:38.315 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 17:00:38.317 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 17:00:38.317 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 17:00:38.317 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 17:00:43.427 WeChat[50323:8889328] Alive 7070\n2021-05-31 17:02:20.029 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 17:02:20.029 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 17:02:20.030 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 17:02:20.031 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 17:02:20.031 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 17:02:20.031 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 17:02:23.443 WeChat[50323:8889328] Alive 7075\n2021-05-31 17:04:03.450 WeChat[50323:8889328] Alive 7080\n2021-05-31 17:05:43.470 WeChat[50323:8889328] Alive 7085\n2021-05-31 17:07:23.505 WeChat[50323:8889328] Alive 7090\n2021-05-31 17:07:44.339 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 17:07:44.339 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 17:07:44.339 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 17:07:44.340 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 17:07:44.340 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 17:07:44.340 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 17:09:03.510 WeChat[50323:8889328] Alive 7095\n2021-05-31 17:10:43.519 WeChat[50323:8889328] Alive 7100\n2021-05-31 17:12:23.659 WeChat[50323:8889328] Alive 7105\n2021-05-31 17:14:03.685 WeChat[50323:8889328] Alive 7110\n2021-05-31 17:15:43.691 WeChat[50323:8889328] Alive 7115\n2021-05-31 17:17:23.693 WeChat[50323:8889328] Alive 7120\n2021-05-31 17:19:03.738 WeChat[50323:8889328] Alive 7125\n2021-05-31 17:20:43.746 WeChat[50323:8889328] Alive 7130\n2021-05-31 17:22:23.789 WeChat[50323:8889328] Alive 7135\n2021-05-31 17:24:03.801 WeChat[50323:8889328] Alive 7140\n2021-05-31 17:25:43.840 WeChat[50323:8889328] Alive 7145\n2021-05-31 17:27:23.895 WeChat[50323:8889328] Alive 7150\n2021-05-31 17:29:03.911 WeChat[50323:8889328] Alive 7155\n2021-05-31 17:30:43.929 WeChat[50323:8889328] Alive 7160\n2021-05-31 17:32:23.954 WeChat[50323:8889328] Alive 7165\n2021-05-31 17:32:41.426 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 17:32:41.426 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 17:32:41.426 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 17:32:41.427 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 17:32:41.427 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 17:32:41.427 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 17:32:54.298 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 17:32:54.298 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 17:32:54.299 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 17:32:54.313 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 17:32:54.313 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 17:32:54.313 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 17:34:03.981 WeChat[50323:8889328] Alive 7170\n2021-05-31 17:35:44.006 WeChat[50323:8889328] Alive 7175\n2021-05-31 17:37:24.018 WeChat[50323:8889328] Alive 7180\n2021-05-31 17:39:04.030 WeChat[50323:8889328] Alive 7185\n2021-05-31 17:40:44.043 WeChat[50323:8889328] Alive 7190\n2021-05-31 17:42:32.760 WeChat[50323:8889328] Alive 7195\n2021-05-31 17:44:12.766 WeChat[50323:8889328] Alive 7200\n2021-05-31 17:45:52.771 WeChat[50323:8889328] Alive 7205\n2021-05-31 17:47:32.779 WeChat[50323:8889328] Alive 7210\n2021-05-31 17:49:12.819 WeChat[50323:8889328] Alive 7215\n2021-05-31 17:50:52.825 WeChat[50323:8889328] Alive 7220\n2021-05-31 17:52:32.879 WeChat[50323:8889328] Alive 7225\n2021-05-31 17:54:12.886 WeChat[50323:8889328] Alive 7230\n2021-05-31 17:55:52.935 WeChat[50323:8889328] Alive 7235\n2021-05-31 17:57:33.002 WeChat[50323:8889328] Alive 7240\n2021-05-31 17:59:23.041 WeChat[50323:8889328] Alive 7245\n2021-05-31 18:01:03.055 WeChat[50323:8889328] Alive 7250\n2021-05-31 18:02:43.075 WeChat[50323:8889328] Alive 7255\n2021-05-31 18:04:23.108 WeChat[50323:8889328] Alive 7260\n2021-05-31 18:06:03.128 WeChat[50323:8889328] Alive 7265\n2021-05-31 18:07:43.139 WeChat[50323:8889328] Alive 7270\n2021-05-31 18:09:23.159 WeChat[50323:8889328] Alive 7275\n2021-05-31 18:11:03.169 WeChat[50323:8889328] Alive 7280\n2021-05-31 18:12:42.873 WeChat[50323:8889328] Alive 7285\n2021-05-31 18:14:22.886 WeChat[50323:8889328] Alive 7290\n2021-05-31 18:16:02.900 WeChat[50323:8889328] Alive 7295\n2021-05-31 18:17:42.950 WeChat[50323:8889328] Alive 7300\n2021-05-31 18:19:22.955 WeChat[50323:8889328] Alive 7305\n2021-05-31 18:21:02.956 WeChat[50323:8889328] Alive 7310\n2021-05-31 18:22:42.956 WeChat[50323:8889328] Alive 7315\n2021-05-31 18:24:23.002 WeChat[50323:8889328] Alive 7320\n2021-05-31 18:26:03.002 WeChat[50323:8889328] Alive 7325\n2021-05-31 18:27:43.025 WeChat[50323:8889328] Alive 7330\n2021-05-31 18:29:23.029 WeChat[50323:8889328] Alive 7335\n2021-05-31 18:31:03.034 WeChat[50323:8889328] Alive 7340\n2021-05-31 18:32:43.072 WeChat[50323:8889328] Alive 7345\n2021-05-31 18:34:30.423 WeChat[50323:8889328] Alive 7350\n2021-05-31 18:36:10.431 WeChat[50323:8889328] Alive 7355\n2021-05-31 18:37:50.473 WeChat[50323:8889328] Alive 7360\n2021-05-31 18:39:30.522 WeChat[50323:8889328] Alive 7365\n2021-05-31 18:41:10.532 WeChat[50323:8889328] Alive 7370\n2021-05-31 18:42:50.575 WeChat[50323:8889328] Alive 7375\n2021-05-31 18:44:30.588 WeChat[50323:8889328] Alive 7380\n2021-05-31 18:46:10.615 WeChat[50323:8889328] Alive 7385\n2021-05-31 18:47:50.628 WeChat[50323:8889328] Alive 7390\n2021-05-31 18:49:30.645 WeChat[50323:8889328] Alive 7395\n2021-05-31 18:51:10.668 WeChat[50323:8889328] Alive 7400\n2021-05-31 18:52:50.775 WeChat[50323:8889328] Alive 7405\n2021-05-31 18:54:42.522 WeChat[50323:8889328] Alive 7410\n2021-05-31 18:56:22.527 WeChat[50323:8889328] Alive 7415\n2021-05-31 18:58:02.599 WeChat[50323:8889328] Alive 7420\n2021-05-31 18:59:42.614 WeChat[50323:8889328] Alive 7425\n2021-05-31 19:01:22.632 WeChat[50323:8889328] Alive 7430\n2021-05-31 19:03:02.664 WeChat[50323:8889328] Alive 7435\n2021-05-31 19:04:42.667 WeChat[50323:8889328] Alive 7440\n2021-05-31 19:06:22.670 WeChat[50323:8889328] Alive 7445\n2021-05-31 19:08:02.714 WeChat[50323:8889328] Alive 7450\n2021-05-31 19:09:42.701 WeChat[50323:8889328] Alive 7455\n2021-05-31 19:11:22.724 WeChat[50323:8889328] Alive 7460\n2021-05-31 19:13:02.722 WeChat[50323:8889328] Alive 7465\n2021-05-31 19:14:42.739 WeChat[50323:8889328] Alive 7470\n2021-05-31 19:16:22.770 WeChat[50323:8889328] Alive 7475\n2021-05-31 19:17:04.625 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-31 19:18:02.786 WeChat[50323:8889328] Alive 7480\n2021-05-31 19:19:42.800 WeChat[50323:8889328] Alive 7485\n2021-05-31 19:19:49.834 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-31 19:19:53.936 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-31 19:19:57.155 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 19:19:57.155 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 19:19:57.155 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 19:19:57.157 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 19:19:57.157 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 19:19:57.157 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 19:20:09.220 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 19:20:09.220 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 19:20:09.220 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 19:20:09.223 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 19:20:09.223 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 19:20:09.223 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 19:21:22.815 WeChat[50323:8889328] Alive 7490\n2021-05-31 19:23:02.831 WeChat[50323:8889328] Alive 7495\n2021-05-31 19:24:42.845 WeChat[50323:8889328] Alive 7500\n2021-05-31 19:26:22.854 WeChat[50323:8889328] Alive 7505\n2021-05-31 19:28:02.839 WeChat[50323:8889328] Alive 7510\n2021-05-31 19:29:42.845 WeChat[50323:8889328] Alive 7515\n2021-05-31 19:31:19.634 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 19:31:19.634 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 19:31:19.634 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 19:31:19.634 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 19:31:19.634 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 19:31:19.634 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 19:31:22.890 WeChat[50323:8889328] Alive 7520\n2021-05-31 19:33:02.903 WeChat[50323:8889328] Alive 7525\n2021-05-31 19:34:22.711 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa902329e30> -[JTCaptureRequest init]\n2021-05-31 19:34:22.711 WeChat[50323:8889328] <JTCaptureManager: 0x7fa9023d1670> -[JTCaptureManager init]\n2021-05-31 19:34:22.743 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8f8fac610> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-31 19:34:22.795 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8f8fac610> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-31 19:34:22.807 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa908c95690> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-31 19:34:22.827 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8ffee0070> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-31 19:34:22.855 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8ffee0070> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-31 19:34:22.864 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa900f573c0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-31 19:34:25.263 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa90eab8260> -[JTToolbarView configAppearanceAndLayout]\n2021-05-31 19:34:25.280 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fd3fb010> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-31 19:34:26.250 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fe041440> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 19:34:26.257 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa902075690> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 19:34:26.265 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fb158e20> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-31 19:34:26.266 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fd58ff10> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-31 19:34:26.266 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa90f521fa0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-31 19:34:26.266 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9121f8220> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 19:34:26.271 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8e695d5c0> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-31 19:34:26.276 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fe041440> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 19:34:26.277 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9121f8220> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 19:34:26.297 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa902075690> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 19:34:27.632 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fe041440> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 19:34:27.633 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9121f8220> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 19:34:27.636 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa902075690> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 19:34:27.650 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fe041440> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 19:34:27.651 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9121f8220> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 19:34:27.654 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa902075690> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 19:34:29.298 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fe041440> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 19:34:29.300 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9121f8220> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 19:34:29.303 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa902075690> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 19:34:29.314 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fe041440> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 19:34:29.315 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9121f8220> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 19:34:29.317 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa902075690> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 19:34:32.023 WeChat[50323:8889328] <JTCaptureManager: 0x7fa9023d1670> -[JTCaptureManager dealloc]\n2021-05-31 19:34:32.023 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa902329e30> -[JTCaptureRequest dealloc]\n2021-05-31 19:34:32.023 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa908c95690> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-31 19:34:32.024 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8f8fac610> -[JTCaptureViewController dealloc]\n2021-05-31 19:34:32.028 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa900f573c0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-31 19:34:32.029 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8ffee0070> -[JTCaptureViewController dealloc]\n2021-05-31 19:34:32.030 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fd3fb010> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-31 19:34:32.035 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8e695d5c0> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-31 19:34:42.918 WeChat[50323:8889328] Alive 7530\n2021-05-31 19:35:36.238 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa908cc48e0> -[JTCaptureRequest init]\n2021-05-31 19:35:36.238 WeChat[50323:8889328] <JTCaptureManager: 0x7fa8e6b05230> -[JTCaptureManager init]\n2021-05-31 19:35:36.254 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f230210> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-31 19:35:36.299 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f230210> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-31 19:35:36.307 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8e6b8e9b0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-31 19:35:36.320 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90667e730> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-31 19:35:36.347 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90667e730> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-31 19:35:36.353 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8e6b56bf0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-31 19:35:39.033 WeChat[50323:8889328] <JTCaptureManager: 0x7fa8e6b05230> -[JTCaptureManager dealloc]\n2021-05-31 19:35:39.033 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa908cc48e0> -[JTCaptureRequest dealloc]\n2021-05-31 19:35:39.033 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8e6b8e9b0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-31 19:35:39.033 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f230210> -[JTCaptureViewController dealloc]\n2021-05-31 19:35:39.036 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8e6b56bf0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-31 19:35:39.037 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90667e730> -[JTCaptureViewController dealloc]\n2021-05-31 19:35:41.274 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa910f04c60> -[JTCaptureRequest init]\n2021-05-31 19:35:41.274 WeChat[50323:8889328] <JTCaptureManager: 0x7fa914d90670> -[JTCaptureManager init]\n2021-05-31 19:35:41.290 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f3babd0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-31 19:35:41.337 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f3babd0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-31 19:35:41.349 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fff76de0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-31 19:35:41.362 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90eb0d740> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-31 19:35:41.386 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90eb0d740> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-31 19:35:41.396 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fa68dac0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-31 19:35:46.022 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa912ed7590> -[JTToolbarView configAppearanceAndLayout]\n2021-05-31 19:35:46.041 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa90239a6e0> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-31 19:35:47.102 WeChat[50323:8889328] <JTPopoverView: 0x7fa901569980> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 19:35:47.105 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8e6e3f010> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 19:35:47.112 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa90fa2f690> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-31 19:35:47.112 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa90fa3a060> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-31 19:35:47.113 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa90facd100> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-31 19:35:47.113 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd7b5180> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 19:35:47.115 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa902e8b090> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-31 19:35:47.127 WeChat[50323:8889328] <JTPopoverView: 0x7fa901569980> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 19:35:47.128 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd7b5180> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 19:35:47.146 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8e6e3f010> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 19:35:48.525 WeChat[50323:8889328] <JTPopoverView: 0x7fa901569980> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 19:35:48.526 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd7b5180> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 19:35:48.529 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8e6e3f010> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 19:35:48.538 WeChat[50323:8889328] <JTPopoverView: 0x7fa901569980> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 19:35:48.539 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd7b5180> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 19:35:48.541 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8e6e3f010> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 19:35:51.121 WeChat[50323:8889328] <JTPopoverView: 0x7fa901569980> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 19:35:51.122 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd7b5180> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 19:35:51.125 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8e6e3f010> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 19:35:51.134 WeChat[50323:8889328] <JTPopoverView: 0x7fa901569980> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 19:35:51.136 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd7b5180> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 19:35:51.138 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8e6e3f010> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 19:35:53.345 WeChat[50323:8889328] <JTPopoverView: 0x7fa901569980> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 19:35:53.347 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd7b5180> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 19:35:53.349 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8e6e3f010> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 19:35:53.359 WeChat[50323:8889328] <JTPopoverView: 0x7fa901569980> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 19:35:53.360 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd7b5180> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 19:35:53.363 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8e6e3f010> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 19:35:56.937 WeChat[50323:8889328] <JTPopoverView: 0x7fa901569980> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 19:35:56.938 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd7b5180> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 19:35:56.941 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8e6e3f010> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 19:35:57.902 WeChat[50323:8889328] <JTPopoverView: 0x7fa901569980> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 19:35:57.903 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd7b5180> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 19:35:57.906 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8e6e3f010> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 19:35:57.918 WeChat[50323:8889328] <JTPopoverView: 0x7fa901569980> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 19:35:57.919 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd7b5180> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 19:35:57.921 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8e6e3f010> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 19:36:00.381 WeChat[50323:8889328] <JTPopoverView: 0x7fa901569980> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 19:36:00.383 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd7b5180> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 19:36:00.385 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8e6e3f010> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 19:36:01.326 WeChat[50323:8889328] <JTPopoverView: 0x7fa901569980> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 19:36:01.328 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd7b5180> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 19:36:01.330 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8e6e3f010> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 19:36:01.347 WeChat[50323:8889328] <JTPopoverView: 0x7fa901569980> -[JTPopoverView configAppearanceAndLayout]\n2021-05-31 19:36:01.348 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd7b5180> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-31 19:36:01.350 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8e6e3f010> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-31 19:36:01.448 WeChat[50323:8889328] Warning: Expected min height of view: (<NSPopoverTouchBarItemButton: 0x7fa8fe73fa20>) to be less than or equal to 30 but got a height of 32.000000. This error will be logged once per view in violation.\n2021-05-31 19:36:20.896 WeChat[50323:8889328] <JTCaptureManager: 0x7fa914d90670> -[JTCaptureManager dealloc]\n2021-05-31 19:36:20.896 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa910f04c60> -[JTCaptureRequest dealloc]\n2021-05-31 19:36:20.896 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fff76de0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-31 19:36:20.897 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f3babd0> -[JTCaptureViewController dealloc]\n2021-05-31 19:36:20.900 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fa68dac0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-31 19:36:20.901 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90eb0d740> -[JTCaptureViewController dealloc]\n2021-05-31 19:36:20.902 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa90239a6e0> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-31 19:36:20.906 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa902e8b090> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-31 19:36:22.938 WeChat[50323:8889328] Alive 7535\n2021-05-31 19:38:02.947 WeChat[50323:8889328] Alive 7540\n2021-05-31 19:39:42.965 WeChat[50323:8889328] Alive 7545\n2021-05-31 19:41:23.004 WeChat[50323:8889328] Alive 7550\n2021-05-31 19:43:02.982 WeChat[50323:8889328] Alive 7555\n2021-05-31 19:44:42.981 WeChat[50323:8889328] Alive 7560\n2021-05-31 19:46:22.991 WeChat[50323:8889328] Alive 7565\n2021-05-31 19:48:03.010 WeChat[50323:8889328] Alive 7570\n2021-05-31 19:49:43.035 WeChat[50323:8889328] Alive 7575\n2021-05-31 19:51:23.051 WeChat[50323:8889328] Alive 7580\n2021-05-31 19:53:03.084 WeChat[50323:8889328] Alive 7585\n2021-05-31 19:54:43.095 WeChat[50323:8889328] Alive 7590\n2021-05-31 19:56:23.098 WeChat[50323:8889328] Alive 7595\n2021-05-31 19:58:03.143 WeChat[50323:8889328] Alive 7600\n2021-05-31 19:59:43.151 WeChat[50323:8889328] Alive 7605\n2021-05-31 20:01:23.199 WeChat[50323:8889328] Alive 7610\n2021-05-31 20:03:03.206 WeChat[50323:8889328] Alive 7615\n2021-05-31 20:04:43.218 WeChat[50323:8889328] Alive 7620\n2021-05-31 20:06:23.234 WeChat[50323:8889328] Alive 7625\n2021-05-31 20:08:03.255 WeChat[50323:8889328] Alive 7630\n2021-05-31 20:09:43.263 WeChat[50323:8889328] Alive 7635\n2021-05-31 20:11:23.308 WeChat[50323:8889328] Alive 7640\n2021-05-31 20:13:03.354 WeChat[50323:8889328] Alive 7645\n2021-05-31 20:14:43.402 WeChat[50323:8889328] Alive 7650\n2021-05-31 20:16:23.411 WeChat[50323:8889328] Alive 7655\n2021-05-31 20:18:03.457 WeChat[50323:8889328] Alive 7660\n2021-05-31 20:19:43.467 WeChat[50323:8889328] Alive 7665\n2021-05-31 20:21:23.486 WeChat[50323:8889328] Alive 7670\n2021-05-31 20:23:03.519 WeChat[50323:8889328] Alive 7675\n2021-05-31 20:24:43.531 WeChat[50323:8889328] Alive 7680\n2021-05-31 20:26:23.541 WeChat[50323:8889328] Alive 7685\n2021-05-31 20:28:03.554 WeChat[50323:8889328] Alive 7690\n2021-05-31 20:29:09.268 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90de44ec0> -[JTCaptureRequest init]\n2021-05-31 20:29:09.268 WeChat[50323:8889328] <JTCaptureManager: 0x7fa8fe681f00> -[JTCaptureManager init]\n2021-05-31 20:29:09.293 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8f82ee9c0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-31 20:29:09.349 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8f82ee9c0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-31 20:29:09.358 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fd3f2510> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-31 20:29:09.374 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f6f6af0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-31 20:29:09.402 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f6f6af0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-31 20:29:09.410 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9027a9ae0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-31 20:29:09.557 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 20:29:09.557 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 20:29:09.557 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 20:29:09.558 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 20:29:09.558 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 20:29:09.558 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 20:29:12.554 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa8ff146860> -[JTToolbarView configAppearanceAndLayout]\n2021-05-31 20:29:12.576 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fdf98e60> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-31 20:29:13.244 WeChat[50323:8889328] <JTCaptureManager: 0x7fa8fe681f00> -[JTCaptureManager dealloc]\n2021-05-31 20:29:13.244 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90de44ec0> -[JTCaptureRequest dealloc]\n2021-05-31 20:29:13.251 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fd3f2510> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-31 20:29:13.251 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8f82ee9c0> -[JTCaptureViewController dealloc]\n2021-05-31 20:29:13.255 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9027a9ae0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-31 20:29:13.256 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90f6f6af0> -[JTCaptureViewController dealloc]\n2021-05-31 20:29:13.256 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fdf98e60> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-31 20:29:13.268 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 20:29:13.268 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 20:29:13.268 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 20:29:13.269 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 20:29:13.269 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 20:29:13.269 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 20:29:20.581 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa900fe3d10> -[JTCaptureRequest init]\n2021-05-31 20:29:20.581 WeChat[50323:8889328] <JTCaptureManager: 0x7fa900f52ea0> -[JTCaptureManager init]\n2021-05-31 20:29:20.600 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa914d58df0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-31 20:29:20.647 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa914d58df0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-31 20:29:20.653 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9129d6730> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-31 20:29:20.667 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa902297a10> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-31 20:29:20.692 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa902297a10> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-31 20:29:20.698 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9129eaca0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-31 20:29:20.799 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 20:29:20.799 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 20:29:20.799 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 20:29:20.800 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 20:29:20.800 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 20:29:20.800 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 20:29:24.128 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa902216ba0> -[JTToolbarView configAppearanceAndLayout]\n2021-05-31 20:29:24.143 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fa6d8e40> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-31 20:29:25.014 WeChat[50323:8889328] <JTCaptureManager: 0x7fa900f52ea0> -[JTCaptureManager dealloc]\n2021-05-31 20:29:25.014 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa900fe3d10> -[JTCaptureRequest dealloc]\n2021-05-31 20:29:25.015 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9129d6730> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-31 20:29:25.015 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa914d58df0> -[JTCaptureViewController dealloc]\n2021-05-31 20:29:25.018 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9129eaca0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-31 20:29:25.018 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa902297a10> -[JTCaptureViewController dealloc]\n2021-05-31 20:29:25.022 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fa6d8e40> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-31 20:29:25.029 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 20:29:25.029 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 20:29:25.029 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 20:29:25.030 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 20:29:25.030 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 20:29:25.053 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 20:29:33.511 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-31 20:29:33.511 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-31 20:29:33.511 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-31 20:29:43.566 WeChat[50323:8889328] Alive 7695\n2021-05-31 20:31:23.606 WeChat[50323:8889328] Alive 7700\n2021-05-31 20:33:03.615 WeChat[50323:8889328] Alive 7705\n2021-05-31 20:34:43.662 WeChat[50323:8889328] Alive 7710\n2021-05-31 20:36:23.667 WeChat[50323:8889328] Alive 7715\n2021-05-31 20:38:03.679 WeChat[50323:8889328] Alive 7720\n2021-05-31 20:39:43.698 WeChat[50323:8889328] Alive 7725\n2021-05-31 20:41:23.718 WeChat[50323:8889328] Alive 7730\n2021-05-31 20:43:03.724 WeChat[50323:8889328] Alive 7735\n2021-05-31 20:44:43.762 WeChat[50323:8889328] Alive 7740\n2021-05-31 20:46:23.774 WeChat[50323:8889328] Alive 7745\n2021-05-31 20:48:03.820 WeChat[50323:8889328] Alive 7750\n2021-05-31 20:49:43.870 WeChat[50323:8889328] Alive 7755\n2021-05-31 20:51:23.889 WeChat[50323:8889328] Alive 7760\n2021-05-31 20:53:03.932 WeChat[50323:8889328] Alive 7765\n2021-05-31 20:54:44.625 WeChat[50323:8889328] Alive 7770\n2021-05-31 20:56:23.957 WeChat[50323:8889328] Alive 7775\n2021-05-31 20:56:25.195 WeChat[50323:8889328] Event: makeProgress, from state: connecting to state: transfering\n2021-05-31 20:56:25.638 WeChat[50323:8889328] Event: makeProgress, from state: transfering to state: transfering\n2021-05-31 20:56:26.284 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-31 20:56:26.287 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n[SQLITERK_OK] Saved master info with 95 entries.\n2021-05-31 20:57:07.047 WeChat[50323:8889328] Event: makeProgress, from state: connecting to state: transfering\n2021-05-31 20:57:07.061 WeChat[50323:8889328] Event: makeProgress, from state: connecting to state: transfering\n2021-05-31 20:57:07.174 WeChat[50323:8889328] Event: makeProgress, from state: transfering to state: transfering\n2021-05-31 20:57:07.419 WeChat[50323:8889328] Event: makeProgress, from state: transfering to state: transfering\n2021-05-31 20:57:07.528 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-31 20:57:07.531 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-31 20:57:08.130 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-31 20:57:08.133 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-05-31 20:59:32.730 WeChat[50323:8889328] Alive 7780\n2021-06-01 02:57:55.600 WeChat[50323:8889328] Alive 7785\n2021-06-01 08:58:20.626 WeChat[50323:8889328] Alive 7790\n2021-06-01 09:28:03.194 WeChat[50323:8889328] Alive 7795\n2021-06-01 09:29:42.562 WeChat[50323:8889328] Alive 7800\n2021-06-01 09:30:24.262 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-06-01 09:30:24.268 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-06-01 09:31:22.576 WeChat[50323:8889328] Alive 7805\n2021-06-01 09:33:02.595 WeChat[50323:8889328] Alive 7810\n2021-06-01 09:34:42.628 WeChat[50323:8889328] Alive 7815\n2021-06-01 09:36:22.630 WeChat[50323:8889328] Alive 7820\n2021-06-01 09:38:02.631 WeChat[50323:8889328] Alive 7825\n2021-06-01 09:39:42.635 WeChat[50323:8889328] Alive 7830\n2021-06-01 09:41:22.653 WeChat[50323:8889328] Alive 7835\n2021-06-01 09:43:02.681 WeChat[50323:8889328] Alive 7840\n2021-06-01 09:44:42.654 WeChat[50323:8889328] Alive 7845\n2021-06-01 09:46:22.661 WeChat[50323:8889328] Alive 7850\n2021-06-01 09:47:38.828 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-06-01 09:47:38.831 WeChat[50323:8889328] Event: transferCompleted, from state: connecting to state: completed\n2021-06-01 09:48:02.671 WeChat[50323:8889328] Alive 7855\n2021-06-01 09:49:42.685 WeChat[50323:8889328] Alive 7860\n2021-06-01 09:51:22.700 WeChat[50323:8889328] Alive 7865\n2021-06-01 09:53:02.710 WeChat[50323:8889328] Alive 7870\n2021-06-01 09:54:42.754 WeChat[50323:8889328] Alive 7875\n2021-06-01 09:56:22.799 WeChat[50323:8889328] Alive 7880\n2021-06-01 09:58:02.813 WeChat[50323:8889328] Alive 7885\n2021-06-01 09:59:42.749 WeChat[50323:8889328] Alive 7890\n2021-06-01 10:01:22.787 WeChat[50323:8889328] Alive 7895\n2021-06-01 10:03:02.789 WeChat[50323:8889328] Alive 7900\n2021-06-01 10:04:42.796 WeChat[50323:8889328] Alive 7905\n2021-06-01 10:06:22.810 WeChat[50323:8889328] Alive 7910\n2021-06-01 10:08:02.838 WeChat[50323:8889328] Alive 7915\n2021-06-01 10:09:42.842 WeChat[50323:8889328] Alive 7920\n2021-06-01 10:11:22.857 WeChat[50323:8889328] Alive 7925\n2021-06-01 10:13:02.891 WeChat[50323:8889328] Alive 7930\n2021-06-01 10:13:36.245 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa908cfb510> -[JTCaptureRequest init]\n2021-06-01 10:13:36.247 WeChat[50323:8889328] <JTCaptureManager: 0x7fa908c99980> -[JTCaptureManager init]\n2021-06-01 10:13:36.275 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900b86220> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-06-01 10:13:36.324 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900b86220> -[JTCaptureViewController configAppearanceAndLayout]\n2021-06-01 10:13:36.333 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fde7ac10> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-06-01 10:13:36.349 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9089adbd0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-06-01 10:13:36.373 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9089adbd0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-06-01 10:13:36.378 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9027d8560> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-06-01 10:13:40.806 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa9020899e0> -[JTToolbarView configAppearanceAndLayout]\n2021-06-01 10:13:40.823 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fd656310> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-06-01 10:13:41.405 WeChat[50323:8889328] <JTCaptureManager: 0x7fa908c99980> -[JTCaptureManager dealloc]\n2021-06-01 10:13:41.405 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa908cfb510> -[JTCaptureRequest dealloc]\n2021-06-01 10:13:41.405 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fde7ac10> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-06-01 10:13:41.407 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900b86220> -[JTCaptureViewController dealloc]\n2021-06-01 10:13:41.410 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9027d8560> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-06-01 10:13:41.410 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9089adbd0> -[JTCaptureViewController dealloc]\n2021-06-01 10:13:41.416 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fd656310> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-06-01 10:13:43.632 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa9067c5360> -[JTCaptureRequest init]\n2021-06-01 10:13:43.632 WeChat[50323:8889328] <JTCaptureManager: 0x7fa900fbc6b0> -[JTCaptureManager init]\n2021-06-01 10:13:43.651 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8ff2f1e00> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-06-01 10:13:43.697 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8ff2f1e00> -[JTCaptureViewController configAppearanceAndLayout]\n2021-06-01 10:13:43.703 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fdea6310> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-06-01 10:13:43.717 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900c75280> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-06-01 10:13:43.741 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900c75280> -[JTCaptureViewController configAppearanceAndLayout]\n2021-06-01 10:13:43.747 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa902158750> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-06-01 10:13:46.452 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa9020899e0> -[JTToolbarView configAppearanceAndLayout]\n2021-06-01 10:13:46.466 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fd64b0f0> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-06-01 10:13:47.459 WeChat[50323:8889328] <JTPopoverView: 0x7fa902d29a50> -[JTPopoverView configAppearanceAndLayout]\n2021-06-01 10:13:47.465 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90f40e800> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-06-01 10:13:47.477 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa902e1e790> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-06-01 10:13:47.478 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa90facd100> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-06-01 10:13:47.478 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa90fa14490> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-06-01 10:13:47.478 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90093ceb0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-06-01 10:13:47.485 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8fd3cdb90> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-06-01 10:13:47.490 WeChat[50323:8889328] <JTPopoverView: 0x7fa902d29a50> -[JTPopoverView configAppearanceAndLayout]\n2021-06-01 10:13:47.491 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90093ceb0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-06-01 10:13:47.504 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90f40e800> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-06-01 10:13:48.456 WeChat[50323:8889328] <JTPopoverView: 0x7fa902d29a50> -[JTPopoverView configAppearanceAndLayout]\n2021-06-01 10:13:48.457 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90093ceb0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-06-01 10:13:48.459 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90f40e800> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-06-01 10:13:48.474 WeChat[50323:8889328] <JTPopoverView: 0x7fa902d29a50> -[JTPopoverView configAppearanceAndLayout]\n2021-06-01 10:13:48.475 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90093ceb0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-06-01 10:13:48.478 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90f40e800> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-06-01 10:13:51.608 WeChat[50323:8889328] <JTPopoverView: 0x7fa902d29a50> -[JTPopoverView configAppearanceAndLayout]\n2021-06-01 10:13:51.609 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90093ceb0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-06-01 10:13:51.612 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa90f40e800> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-06-01 10:13:54.635 WeChat[50323:8889328] <JTCaptureManager: 0x7fa900fbc6b0> -[JTCaptureManager dealloc]\n2021-06-01 10:13:54.635 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa9067c5360> -[JTCaptureRequest dealloc]\n2021-06-01 10:13:54.635 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fdea6310> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-06-01 10:13:54.636 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8ff2f1e00> -[JTCaptureViewController dealloc]\n2021-06-01 10:13:54.638 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa902158750> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-06-01 10:13:54.639 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900c75280> -[JTCaptureViewController dealloc]\n2021-06-01 10:13:54.640 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fd64b0f0> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-06-01 10:13:54.644 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8fd3cdb90> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-06-01 10:13:57.875 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa906649690> -[JTCaptureRequest init]\n2021-06-01 10:13:57.875 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90dc6bee0> -[JTCaptureManager init]\n2021-06-01 10:13:57.892 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900b76f50> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-06-01 10:13:57.935 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900b76f50> -[JTCaptureViewController configAppearanceAndLayout]\n2021-06-01 10:13:57.942 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90dcb1ac0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-06-01 10:13:57.961 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fb4b2860> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-06-01 10:13:57.984 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fb4b2860> -[JTCaptureViewController configAppearanceAndLayout]\n2021-06-01 10:13:57.991 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fdce5c10> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-06-01 10:13:59.606 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa9149f22b0> -[JTToolbarView configAppearanceAndLayout]\n2021-06-01 10:13:59.621 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa900ea6920> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-06-01 10:14:00.553 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90dc6bee0> -[JTCaptureManager dealloc]\n2021-06-01 10:14:00.554 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa906649690> -[JTCaptureRequest dealloc]\n2021-06-01 10:14:00.554 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90dcb1ac0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-06-01 10:14:00.555 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa900b76f50> -[JTCaptureViewController dealloc]\n2021-06-01 10:14:00.558 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fdce5c10> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-06-01 10:14:00.558 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8fb4b2860> -[JTCaptureViewController dealloc]\n2021-06-01 10:14:00.562 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa900ea6920> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-06-01 10:14:01.512 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa906649690> -[JTCaptureRequest init]\n2021-06-01 10:14:01.512 WeChat[50323:8889328] <JTCaptureManager: 0x7fa9015cef40> -[JTCaptureManager init]\n2021-06-01 10:14:01.530 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9023ddd00> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-06-01 10:14:01.574 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9023ddd00> -[JTCaptureViewController configAppearanceAndLayout]\n2021-06-01 10:14:01.580 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90dcb1ac0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-06-01 10:14:01.597 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa902820e80> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-06-01 10:14:01.621 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa902820e80> -[JTCaptureViewController configAppearanceAndLayout]\n2021-06-01 10:14:01.626 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8e69dde00> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-06-01 10:14:04.991 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa90f0c8e20> -[JTToolbarView configAppearanceAndLayout]\n2021-06-01 10:14:05.007 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa90fa14d60> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-06-01 10:14:06.670 WeChat[50323:8889328] <JTPopoverView: 0x7fa912ea38c0> -[JTPopoverView configAppearanceAndLayout]\n2021-06-01 10:14:06.674 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa9121ebfb0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-06-01 10:14:06.680 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa9118e4630> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-06-01 10:14:06.680 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa912590390> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-06-01 10:14:06.681 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fdfc3890> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-06-01 10:14:06.681 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fe006200> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-06-01 10:14:06.683 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa90f560460> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-06-01 10:14:06.687 WeChat[50323:8889328] <JTPopoverView: 0x7fa912ea38c0> -[JTPopoverView configAppearanceAndLayout]\n2021-06-01 10:14:06.696 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fe006200> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-06-01 10:14:06.698 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa9121ebfb0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-06-01 10:14:08.242 WeChat[50323:8889328] <JTPopoverView: 0x7fa912ea38c0> -[JTPopoverView configAppearanceAndLayout]\n2021-06-01 10:14:08.243 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fe006200> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-06-01 10:14:08.246 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa9121ebfb0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-06-01 10:14:08.258 WeChat[50323:8889328] <JTPopoverView: 0x7fa912ea38c0> -[JTPopoverView configAppearanceAndLayout]\n2021-06-01 10:14:08.259 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fe006200> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-06-01 10:14:08.261 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa9121ebfb0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-06-01 10:14:11.599 WeChat[50323:8889328] <JTPopoverView: 0x7fa912ea38c0> -[JTPopoverView configAppearanceAndLayout]\n2021-06-01 10:14:11.600 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fe006200> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-06-01 10:14:11.603 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa9121ebfb0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-06-01 10:14:12.587 WeChat[50323:8889328] <JTPopoverView: 0x7fa912ea38c0> -[JTPopoverView configAppearanceAndLayout]\n2021-06-01 10:14:12.589 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fe006200> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-06-01 10:14:12.591 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa9121ebfb0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-06-01 10:14:12.601 WeChat[50323:8889328] <JTPopoverView: 0x7fa912ea38c0> -[JTPopoverView configAppearanceAndLayout]\n2021-06-01 10:14:12.602 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fe006200> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-06-01 10:14:12.604 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa9121ebfb0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-06-01 10:14:15.238 WeChat[50323:8889328] <JTCaptureManager: 0x7fa9015cef40> -[JTCaptureManager dealloc]\n2021-06-01 10:14:15.238 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa906649690> -[JTCaptureRequest dealloc]\n2021-06-01 10:14:15.239 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90dcb1ac0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-06-01 10:14:15.239 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9023ddd00> -[JTCaptureViewController dealloc]\n2021-06-01 10:14:15.241 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8e69dde00> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-06-01 10:14:15.242 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa902820e80> -[JTCaptureViewController dealloc]\n2021-06-01 10:14:15.243 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa90fa14d60> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-06-01 10:14:15.246 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa90f560460> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-06-01 10:14:42.865 WeChat[50323:8889328] Alive 7935\n2021-06-01 10:16:22.871 WeChat[50323:8889328] Alive 7940\n2021-06-01 10:16:48.604 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 10:16:48.605 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 10:16:48.605 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 10:16:48.605 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 10:16:48.605 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 10:16:48.605 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 10:16:55.590 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 10:16:55.590 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 10:16:55.590 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 10:16:55.591 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 10:16:55.591 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 10:16:55.591 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 10:17:15.792 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 10:17:15.792 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 10:17:15.792 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 10:17:15.793 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 10:17:15.793 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 10:17:15.793 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 10:18:02.891 WeChat[50323:8889328] Alive 7945\n2021-06-01 10:19:42.925 WeChat[50323:8889328] Alive 7950\n2021-06-01 10:21:22.926 WeChat[50323:8889328] Alive 7955\n2021-06-01 10:23:02.941 WeChat[50323:8889328] Alive 7960\n2021-06-01 10:24:42.950 WeChat[50323:8889328] Alive 7965\n2021-06-01 10:26:22.989 WeChat[50323:8889328] Alive 7970\n2021-06-01 10:28:02.993 WeChat[50323:8889328] Alive 7975\n2021-06-01 10:29:43.014 WeChat[50323:8889328] Alive 7980\n2021-06-01 10:31:23.058 WeChat[50323:8889328] Alive 7985\n2021-06-01 10:33:03.071 WeChat[50323:8889328] Alive 7990\n2021-06-01 10:34:43.088 WeChat[50323:8889328] Alive 7995\n2021-06-01 10:36:23.116 WeChat[50323:8889328] Alive 8000\n2021-06-01 10:38:03.160 WeChat[50323:8889328] Alive 8005\n2021-06-01 10:40:03.208 WeChat[50323:8889328] Alive 8010\n2021-06-01 10:41:43.210 WeChat[50323:8889328] Alive 8015\n2021-06-01 10:43:29.964 WeChat[50323:8889328] Alive 8020\n2021-06-01 10:45:42.468 WeChat[50323:8889328] Alive 8025\n2021-06-01 10:47:43.684 WeChat[50323:8889328] Alive 8030\n2021-06-01 10:49:11.471 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa908c74620> -[JTCaptureRequest init]\n2021-06-01 10:49:11.471 WeChat[50323:8889328] <JTCaptureManager: 0x7fa908c5af10> -[JTCaptureManager init]\n2021-06-01 10:49:11.503 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8f74c93c0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-06-01 10:49:11.553 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8f74c93c0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-06-01 10:49:11.570 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fdd42570> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-06-01 10:49:11.593 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa902466f40> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-06-01 10:49:11.624 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa902466f40> -[JTCaptureViewController configAppearanceAndLayout]\n2021-06-01 10:49:11.636 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa914cd2a10> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-06-01 10:49:14.684 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa902153690> -[JTToolbarView configAppearanceAndLayout]\n2021-06-01 10:49:14.705 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8ffe2e2c0> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-06-01 10:49:15.587 WeChat[50323:8889328] <JTCaptureManager: 0x7fa908c5af10> -[JTCaptureManager dealloc]\n2021-06-01 10:49:15.587 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa908c74620> -[JTCaptureRequest dealloc]\n2021-06-01 10:49:15.589 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fdd42570> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-06-01 10:49:15.590 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8f74c93c0> -[JTCaptureViewController dealloc]\n2021-06-01 10:49:15.591 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa914cd2a10> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-06-01 10:49:15.592 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa902466f40> -[JTCaptureViewController dealloc]\n2021-06-01 10:49:15.593 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8ffe2e2c0> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-06-01 10:49:23.697 WeChat[50323:8889328] Alive 8035\n2021-06-01 10:51:03.706 WeChat[50323:8889328] Alive 8040\n2021-06-01 10:52:43.719 WeChat[50323:8889328] Alive 8045\n2021-06-01 10:54:23.724 WeChat[50323:8889328] Alive 8050\n2021-06-01 10:56:03.734 WeChat[50323:8889328] Alive 8055\n2021-06-01 10:57:43.770 WeChat[50323:8889328] Alive 8060\n2021-06-01 10:59:23.791 WeChat[50323:8889328] Alive 8065\n2021-06-01 11:01:03.797 WeChat[50323:8889328] Alive 8070\n2021-06-01 11:02:43.840 WeChat[50323:8889328] Alive 8075\n2021-06-01 11:04:23.849 WeChat[50323:8889328] Alive 8080\n2021-06-01 11:06:03.894 WeChat[50323:8889328] Alive 8085\n2021-06-01 11:07:43.905 WeChat[50323:8889328] Alive 8090\n2021-06-01 11:09:23.916 WeChat[50323:8889328] Alive 8095\n2021-06-01 11:11:03.941 WeChat[50323:8889328] Alive 8100\n2021-06-01 11:12:43.946 WeChat[50323:8889328] Alive 8105\n[SQLITERK_OK] Saved master info with 129 entries.\n2021-06-01 11:14:23.965 WeChat[50323:8889328] Alive 8110\n2021-06-01 11:16:03.979 WeChat[50323:8889328] Alive 8115\n2021-06-01 11:17:43.992 WeChat[50323:8889328] Alive 8120\n2021-06-01 11:19:24.004 WeChat[50323:8889328] Alive 8125\n2021-06-01 11:21:04.017 WeChat[50323:8889328] Alive 8130\n2021-06-01 11:22:44.060 WeChat[50323:8889328] Alive 8135\n2021-06-01 11:24:24.062 WeChat[50323:8889328] Alive 8140\n2021-06-01 11:26:04.110 WeChat[50323:8889328] Alive 8145\n2021-06-01 11:27:44.119 WeChat[50323:8889328] Alive 8150\n2021-06-01 11:29:24.141 WeChat[50323:8889328] Alive 8155\n2021-06-01 11:31:04.184 WeChat[50323:8889328] Alive 8160\n2021-06-01 11:32:44.194 WeChat[50323:8889328] Alive 8165\n2021-06-01 11:34:24.209 WeChat[50323:8889328] Alive 8170\n2021-06-01 11:36:04.224 WeChat[50323:8889328] Alive 8175\n2021-06-01 11:37:44.237 WeChat[50323:8889328] Alive 8180\n2021-06-01 11:39:24.252 WeChat[50323:8889328] Alive 8185\n2021-06-01 11:41:04.257 WeChat[50323:8889328] Alive 8190\n2021-06-01 11:42:44.269 WeChat[50323:8889328] Alive 8195\n2021-06-01 11:44:24.208 WeChat[50323:8889328] Alive 8200\n2021-06-01 11:46:04.219 WeChat[50323:8889328] Alive 8205\n2021-06-01 11:47:44.225 WeChat[50323:8889328] Alive 8210\n2021-06-01 11:49:24.258 WeChat[50323:8889328] Alive 8215\n2021-06-01 11:49:28.427 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"06CB0A94-8AF1-43BB-B688-CDE2E7D54F62\\\"}\"\n)\n2021-06-01 11:49:28.461 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"88035e64c507b844287fe615e17d6d547903b101\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-06-01 11:49:28.667 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"getNetworkType\\\",\\\"params\\\":{\\\"__context_key\\\":\\\"88035e64c507b844287fe615e17d6d547903b101\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1001\\\"}\"\n)\n2021-06-01 11:49:28.670 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"setNavigationBarColor\\\",\\\"params\\\":{\\\"color\\\":\\\"#ffffff\\\",\\\"__context_key\\\":\\\"88035e64c507b844287fe615e17d6d547903b101\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1002\\\"}\"\n)\n2021-06-01 11:49:28.671 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"setBounceBackground\\\",\\\"params\\\":{\\\"backgroundColor\\\":\\\"#ffffff\\\",\\\"footerBounceColor\\\":\\\"#f2f2f2\\\",\\\"__context_key\\\":\\\"88035e64c507b844287fe615e17d6d547903b101\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1003\\\"}\"\n)\n2021-06-01 11:49:28.686 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"writeLog\\\",\\\"params\\\":{\\\"level\\\":\\\"info\\\",\\\"msg\\\":\\\"__wap__ wx config web compt result,wxOpen,{\\\\\\\"err_msg\\\\\\\":\\\\\\\"handleMPPageAction:fail_webcompt unsupported\\\\\\\"} location:[https://mp.weixin.qq.com/s?__biz=MjM5MzIzNDY2MQ==∣=2654863409&idx=1&sn=856032bb260fca83c4550643ede40023&chksm=bd508bbb8a2702ad0f20583547227796db408341188d982b7a80e86d2c57ed370668df822f55&scene=0&xtrack=1&key=36a1175a1e86453e3f64a2720e15f6c9b71ef8870f7661d7c8b7ac59ff43af7e51de2499f0ca9aa4c1aaf4c024a4eb1a5a699ee67241693bfd6702cd788c7a39f58fc1ac528a910a74fac86871f0826802fcaa7ec0f15dc83b6262274affe232fd884150e1da78e474fe1256885709269895e63e3481f9dc5774eb6f2b802d0f&ascene=1&uin=MzcxNTQ0NDAw&devicetype=iMac+MacBookPro16%2C1+OSX+OSX+10.16+build(20E241)&version=13000310&nettype=WIFI⟨=en&fontScale=100&exportkey=AirEbOzEMEFuS%2Fqy0BHe0%2Fc%3D&pass_ticket=r4Ov7Kmipo6gQSOHomnMnz9yAn73NDlqmvWEbMpl8ja6n6uxEOFUy%2Bp2otgU8d2X&wx_header=0&fontgear=2.000000]\\\",\\\"__context_key\\\":\\\"88035e64c507b844287fe615e17d6d547903b101\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1004\\\"}\"\n)\n2021-06-01 11:49:28.704 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"currentMpInfo\\\",\\\"params\\\":{\\\"userName\\\":\\\"gh_c243bac7b5d9\\\",\\\"brandName\\\":\\\"\\U5609\\U5b9e\\U57fa\\U91d1\\\",\\\"title\\\":\\\"\\U301030000\\U4e2a\\U7ea2\\U5305\\U3011\\U513f\\U7ae5\\U8282\\U5feb\\U4e50\\Uff0c\\U91cd\\U62fe\\U4e00\\U5143\\U94b1\\U7684\\U68a6\\U60f3\\\",\\\"brandIcon\\\":\\\"http://wx.qlogo.cn/mmhead/Q3auHgzwzM7HIjibiaqiamPXz5Dia7NBecicmCjQjl6UibqiccDiaDxDibqTu0g/132\\\",\\\"topBarStyle\\\":0,\\\"topBarShowed\\\":false,\\\"isMenuShowBrandInfo\\\":1,\\\"cover\\\":\\\"https://mmbiz.qlogo.cn/mmbiz_jpg/icwr2u1yrZmxQr9moXj2fybmNniaLMRqgVepj6ECkLbA80FlNFf8U3jsicibx5ujmGzxomTd93b8HP3nOc58Uiay3uA/0?wx_fmt=jpeg\\\",\\\"digest\\\":\\\"\\U5609\\U5b9e\\U57fa\\U91d16.1\\U798f\\U5229\\U6765\\U88ad\\Uff0c\\U5609\\U4eba\\U4eec\\U901f\\U6233\\U74dc\\U5206\\U4e09\\U4e07\\U7ea2\\U5305\\Uff01\\\",\\\"itemShowType\\\":\\\"0\\\",\\\"isPaySubscribe\\\":0,\\\"forbidForward\\\":0,\\\"__context_key\\\":\\\"88035e64c507b844287fe615e17d6d547903b101\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1005\\\"}\"\n)\n2021-06-01 11:49:28.706 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"createWebViewForFastLoad\\\",\\\"params\\\":{\\\"scene\\\":1,\\\"__context_key\\\":\\\"88035e64c507b844287fe615e17d6d547903b101\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1006\\\"}\"\n)\n2021-06-01 11:49:28.706 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"hideToolbar\\\",\\\"params\\\":{\\\"__context_key\\\":\\\"88035e64c507b844287fe615e17d6d547903b101\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1007\\\"}\"\n)\n2021-06-01 11:49:28.707 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"showOptionMenu\\\",\\\"params\\\":{\\\"__context_key\\\":\\\"88035e64c507b844287fe615e17d6d547903b101\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1008\\\"}\"\n)\n2021-06-01 11:49:28.749 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"getNetworkType\\\",\\\"params\\\":{\\\"__context_key\\\":\\\"88035e64c507b844287fe615e17d6d547903b101\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1009\\\"}\"\n)\n2021-06-01 11:49:28.963 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"handleHaokanAction\\\",\\\"params\\\":{\\\"imgUrl\\\":\\\"http://wx.qlogo.cn/mmhead/Q3auHgzwzM7HIjibiaqiamPXz5Dia7NBecicmCjQjl6UibqiccDiaDxDibqTu0g/132\\\",\\\"link\\\":\\\"http://mp.weixin.qq.com/s?__biz=MjM5MzIzNDY2MQ==∣=2654863409&idx=1&sn=856032bb260fca83c4550643ede40023&chksm=bd508bbb8a2702ad0f20583547227796db408341188d982b7a80e86d2c57ed370668df822f55#rd\\\",\\\"desc\\\":\\\"\\U5609\\U5b9e\\U57fa\\U91d16.1\\U798f\\U5229\\U6765\\U88ad\\Uff0c\\U5609\\U4eba\\U4eec\\U901f\\U6233\\U74dc\\U5206\\U4e09\\U4e07\\U7ea2\\U5305\\Uff01\\\",\\\"title\\\":\\\"\\U301030000\\U4e2a\\U7ea2\\U5305\\U3011\\U513f\\U7ae5\\U8282\\U5feb\\U4e50\\Uff0c\\U91cd\\U62fe\\U4e00\\U5143\\U94b1\\U7684\\U68a6\\U60f3\\\",\\\"action\\\":\\\"update_recommend_status\\\",\\\"permission\\\":1,\\\"recommend\\\":0,\\\"__context_key\\\":\\\"88035e64c507b844287fe615e17d6d547903b101\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1010\\\"}\"\n)\n2021-06-01 11:49:30.251 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"handleMPPageAction\\\",\\\"params\\\":{\\\"action\\\":\\\"syncReadState\\\",\\\"state\\\":0,\\\"__context_key\\\":\\\"88035e64c507b844287fe615e17d6d547903b101\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1011\\\"}\"\n)\n2021-06-01 11:49:31.889 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"handleMPPageAction\\\",\\\"params\\\":{\\\"action\\\":\\\"syncReadState\\\",\\\"state\\\":1,\\\"__context_key\\\":\\\"88035e64c507b844287fe615e17d6d547903b101\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1012\\\"}\"\n)\n2021-06-01 11:49:38.056 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"06CB0A94-8AF1-43BB-B688-CDE2E7D54F62\\\"}\"\n)\n2021-06-01 11:49:38.061 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"currentMpInfo\\\",\\\"params\\\":{\\\"userName\\\":\\\"gh_c243bac7b5d9\\\",\\\"brandName\\\":\\\"\\U5609\\U5b9e\\U57fa\\U91d1\\\",\\\"title\\\":\\\"\\U301030000\\U4e2a\\U7ea2\\U5305\\U3011\\U513f\\U7ae5\\U8282\\U5feb\\U4e50\\Uff0c\\U91cd\\U62fe\\U4e00\\U5143\\U94b1\\U7684\\U68a6\\U60f3\\\",\\\"brandIcon\\\":\\\"http://wx.qlogo.cn/mmhead/Q3auHgzwzM7HIjibiaqiamPXz5Dia7NBecicmCjQjl6UibqiccDiaDxDibqTu0g/132\\\",\\\"topBarStyle\\\":0,\\\"topBarShowed\\\":false,\\\"isMenuShowBrandInfo\\\":1,\\\"cover\\\":\\\"https://mmbiz.qlogo.cn/mmbiz_jpg/icwr2u1yrZmxQr9moXj2fybmNniaLMRqgVepj6ECkLbA80FlNFf8U3jsicibx5ujmGzxomTd93b8HP3nOc58Uiay3uA/0?wx_fmt=jpeg\\\",\\\"digest\\\":\\\"\\U5609\\U5b9e\\U57fa\\U91d16.1\\U798f\\U5229\\U6765\\U88ad\\Uff0c\\U5609\\U4eba\\U4eec\\U901f\\U6233\\U74dc\\U5206\\U4e09\\U4e07\\U7ea2\\U5305\\Uff01\\\",\\\"itemShowType\\\":\\\"0\\\",\\\"isPaySubscribe\\\":0,\\\"forbidForward\\\":0,\\\"__context_key\\\":\\\"88035e64c507b844287fe615e17d6d547903b101\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1013\\\"}\"\n)\n2021-06-01 11:49:38.069 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"88035e64c507b844287fe615e17d6d547903b101\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-06-01 11:49:51.762 WeChat[50323:8889328] (\n    \"{\\\"__domReadyNotify\\\":\\\"06CB0A94-8AF1-43BB-B688-CDE2E7D54F62\\\"}\"\n)\n2021-06-01 11:49:51.769 WeChat[50323:8889328] (\n    \"{\\\"func\\\":\\\"log\\\",\\\"params\\\":{\\\"msg\\\":\\\"error ReferenceError: Can't find variable: _enable_old_UrlStyleImagePreviews\\\",\\\"__context_key\\\":\\\"88035e64c507b844287fe615e17d6d547903b101\\\"},\\\"__msg_type\\\":\\\"call\\\",\\\"__callback_id\\\":\\\"1000\\\"}\"\n)\n2021-06-01 11:51:04.266 WeChat[50323:8889328] Alive 8220\n2021-06-01 11:52:44.282 WeChat[50323:8889328] Alive 8225\n2021-06-01 11:54:24.305 WeChat[50323:8889328] Alive 8230\n2021-06-01 11:56:04.305 WeChat[50323:8889328] Alive 8235\n2021-06-01 11:57:44.312 WeChat[50323:8889328] Alive 8240\n2021-06-01 11:59:24.276 WeChat[50323:8889328] Alive 8245\n2021-06-01 12:01:04.287 WeChat[50323:8889328] Alive 8250\n2021-06-01 12:02:44.298 WeChat[50323:8889328] Alive 8255\n2021-06-01 12:04:24.323 WeChat[50323:8889328] Alive 8260\n2021-06-01 12:06:04.335 WeChat[50323:8889328] Alive 8265\n2021-06-01 12:07:44.342 WeChat[50323:8889328] Alive 8270\n2021-06-01 12:09:24.372 WeChat[50323:8889328] Alive 8275\n2021-06-01 12:11:04.382 WeChat[50323:8889328] Alive 8280\n2021-06-01 12:12:44.393 WeChat[50323:8889328] Alive 8285\n2021-06-01 12:14:24.418 WeChat[50323:8889328] Alive 8290\n2021-06-01 12:16:04.434 WeChat[50323:8889328] Alive 8295\n2021-06-01 12:17:44.475 WeChat[50323:8889328] Alive 8300\n2021-06-01 12:19:24.489 WeChat[50323:8889328] Alive 8305\n2021-06-01 12:20:24.241 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 12:20:24.241 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 12:20:24.241 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 12:20:24.241 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 12:20:24.241 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 12:20:24.241 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 12:20:41.913 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 12:20:41.913 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 12:20:41.914 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 12:20:41.921 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 12:20:41.921 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 12:20:41.921 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 12:21:04.504 WeChat[50323:8889328] Alive 8310\n2021-06-01 12:21:12.591 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 12:21:12.591 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 12:21:12.591 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 12:21:12.592 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 12:21:12.592 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 12:21:12.593 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 12:22:44.507 WeChat[50323:8889328] Alive 8315\n2021-06-01 12:24:24.523 WeChat[50323:8889328] Alive 8320\n2021-06-01 12:26:07.032 WeChat[50323:8889328] Alive 8325\n2021-06-01 12:28:16.836 WeChat[50323:8889328] Alive 8330\n2021-06-01 12:29:56.923 WeChat[50323:8889328] Alive 8335\n2021-06-01 12:31:36.931 WeChat[50323:8889328] Alive 8340\n2021-06-01 12:33:16.978 WeChat[50323:8889328] Alive 8345\n2021-06-01 12:34:56.994 WeChat[50323:8889328] Alive 8350\n2021-06-01 12:36:37.024 WeChat[50323:8889328] Alive 8355\n2021-06-01 12:38:17.075 WeChat[50323:8889328] Alive 8360\n2021-06-01 12:39:57.080 WeChat[50323:8889328] Alive 8365\n2021-06-01 12:41:37.091 WeChat[50323:8889328] Alive 8370\n2021-06-01 12:43:17.128 WeChat[50323:8889328] Alive 8375\n2021-06-01 12:44:57.162 WeChat[50323:8889328] Alive 8380\n2021-06-01 12:46:37.171 WeChat[50323:8889328] Alive 8385\n2021-06-01 12:48:17.218 WeChat[50323:8889328] Alive 8390\n2021-06-01 12:49:57.222 WeChat[50323:8889328] Alive 8395\n2021-06-01 12:51:37.269 WeChat[50323:8889328] Alive 8400\n2021-06-01 12:53:17.270 WeChat[50323:8889328] Alive 8405\n2021-06-01 12:54:57.281 WeChat[50323:8889328] Alive 8410\n2021-06-01 12:56:37.315 WeChat[50323:8889328] Alive 8415\n2021-06-01 12:58:17.330 WeChat[50323:8889328] Alive 8420\n2021-06-01 12:59:57.349 WeChat[50323:8889328] Alive 8425\n2021-06-01 13:01:38.285 WeChat[50323:8889328] Alive 8430\n2021-06-01 13:03:24.360 WeChat[50323:8889328] Alive 8435\n[SQLITERK_OK] Saved master info with 95 entries.\n2021-06-01 14:12:57.148 WeChat[50323:8889328] Alive 8440\n2021-06-01 14:14:37.155 WeChat[50323:8889328] Alive 8445\n2021-06-01 14:16:17.169 WeChat[50323:8889328] Alive 8450\n2021-06-01 14:17:57.215 WeChat[50323:8889328] Alive 8455\n2021-06-01 14:19:37.217 WeChat[50323:8889328] Alive 8460\n2021-06-01 14:21:17.228 WeChat[50323:8889328] Alive 8465\n2021-06-01 14:22:57.266 WeChat[50323:8889328] Alive 8470\n2021-06-01 14:24:37.273 WeChat[50323:8889328] Alive 8475\n2021-06-01 14:26:17.292 WeChat[50323:8889328] Alive 8480\n2021-06-01 14:27:57.252 WeChat[50323:8889328] Alive 8485\n2021-06-01 14:29:37.264 WeChat[50323:8889328] Alive 8490\n2021-06-01 14:31:17.265 WeChat[50323:8889328] Alive 8495\n2021-06-01 14:32:57.276 WeChat[50323:8889328] Alive 8500\n2021-06-01 14:34:37.317 WeChat[50323:8889328] Alive 8505\n2021-06-01 14:36:17.322 WeChat[50323:8889328] Alive 8510\n2021-06-01 14:37:57.375 WeChat[50323:8889328] Alive 8515\n2021-06-01 14:39:37.422 WeChat[50323:8889328] Alive 8520\n2021-06-01 14:41:17.463 WeChat[50323:8889328] Alive 8525\n2021-06-01 14:42:57.676 WeChat[50323:8889328] Alive 8530\n2021-06-01 14:44:37.695 WeChat[50323:8889328] Alive 8535\n2021-06-01 14:46:17.709 WeChat[50323:8889328] Alive 8540\n2021-06-01 14:47:57.724 WeChat[50323:8889328] Alive 8545\n2021-06-01 14:49:37.785 WeChat[50323:8889328] Alive 8550\n2021-06-01 14:51:17.744 WeChat[50323:8889328] Alive 8555\n2021-06-01 14:52:57.794 WeChat[50323:8889328] Alive 8560\n2021-06-01 14:54:37.806 WeChat[50323:8889328] Alive 8565\n2021-06-01 14:56:17.819 WeChat[50323:8889328] Alive 8570\n2021-06-01 14:57:57.822 WeChat[50323:8889328] Alive 8575\n2021-06-01 14:59:37.845 WeChat[50323:8889328] Alive 8580\n2021-06-01 15:01:17.894 WeChat[50323:8889328] Alive 8585\n2021-06-01 15:02:57.918 WeChat[50323:8889328] Alive 8590\n2021-06-01 15:04:37.947 WeChat[50323:8889328] Alive 8595\n2021-06-01 15:06:17.990 WeChat[50323:8889328] Alive 8600\n2021-06-01 15:07:58.042 WeChat[50323:8889328] Alive 8605\n2021-06-01 15:09:38.056 WeChat[50323:8889328] Alive 8610\n2021-06-01 15:11:18.076 WeChat[50323:8889328] Alive 8615\n2021-06-01 15:12:58.123 WeChat[50323:8889328] Alive 8620\n2021-06-01 15:14:38.144 WeChat[50323:8889328] Alive 8625\n2021-06-01 15:16:18.181 WeChat[50323:8889328] Alive 8630\n2021-06-01 15:17:58.201 WeChat[50323:8889328] Alive 8635\n2021-06-01 15:19:38.232 WeChat[50323:8889328] Alive 8640\n2021-06-01 15:21:18.254 WeChat[50323:8889328] Alive 8645\n2021-06-01 15:22:58.278 WeChat[50323:8889328] Alive 8650\n2021-06-01 15:23:26.076 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa8f9959100> -[JTCaptureRequest init]\n2021-06-01 15:23:26.077 WeChat[50323:8889328] <JTCaptureManager: 0x7fa9066d4ee0> -[JTCaptureManager init]\n2021-06-01 15:23:26.138 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90dc78990> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-06-01 15:23:26.188 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90dc78990> -[JTCaptureViewController configAppearanceAndLayout]\n2021-06-01 15:23:26.197 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9066763a0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-06-01 15:23:26.242 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90191dcc0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-06-01 15:23:26.267 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90191dcc0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-06-01 15:23:26.273 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fb608090> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-06-01 15:23:26.410 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 15:23:26.411 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 15:23:26.411 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 15:23:26.411 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 15:23:26.411 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 15:23:26.411 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 15:23:28.387 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa8f8e8f180> -[JTToolbarView configAppearanceAndLayout]\n2021-06-01 15:23:28.407 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fe73ec20> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-06-01 15:23:29.353 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fd64e3d0> -[JTPopoverView configAppearanceAndLayout]\n2021-06-01 15:23:29.357 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa911aa7500> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-06-01 15:23:29.365 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa901340bd0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-06-01 15:23:29.366 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa8fd3436e0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-06-01 15:23:29.366 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa90218b390> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-06-01 15:23:29.366 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd30e290> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-06-01 15:23:29.370 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8fdd4d650> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-06-01 15:23:29.375 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fd64e3d0> -[JTPopoverView configAppearanceAndLayout]\n2021-06-01 15:23:29.383 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd30e290> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-06-01 15:23:29.386 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa911aa7500> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-06-01 15:23:31.835 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fd64e3d0> -[JTPopoverView configAppearanceAndLayout]\n2021-06-01 15:23:31.837 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd30e290> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-06-01 15:23:31.840 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa911aa7500> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-06-01 15:23:31.849 WeChat[50323:8889328] <JTPopoverView: 0x7fa8fd64e3d0> -[JTPopoverView configAppearanceAndLayout]\n2021-06-01 15:23:31.850 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa8fd30e290> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-06-01 15:23:31.852 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa911aa7500> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-06-01 15:23:37.129 WeChat[50323:8889328] <JTCaptureManager: 0x7fa9066d4ee0> -[JTCaptureManager dealloc]\n2021-06-01 15:23:37.129 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa8f9959100> -[JTCaptureRequest dealloc]\n2021-06-01 15:23:37.130 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa9066763a0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-06-01 15:23:37.130 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90dc78990> -[JTCaptureViewController dealloc]\n2021-06-01 15:23:37.133 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8fb608090> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-06-01 15:23:37.133 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa90191dcc0> -[JTCaptureViewController dealloc]\n2021-06-01 15:23:37.134 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa8fe73ec20> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-06-01 15:23:37.138 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa8fdd4d650> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-06-01 15:23:37.155 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 15:23:37.155 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 15:23:37.155 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 15:23:37.155 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 15:23:37.155 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 15:23:37.155 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 15:23:38.360 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 15:23:38.360 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 15:23:38.360 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 15:24:38.302 WeChat[50323:8889328] Alive 8655\n2021-06-01 15:26:18.316 WeChat[50323:8889328] Alive 8660\n2021-06-01 15:27:58.273 WeChat[50323:8889328] Alive 8665\n2021-06-01 15:29:38.297 WeChat[50323:8889328] Alive 8670\n[SQLITERK_OK] Saved master info with 131 entries.\n2021-06-01 15:31:18.341 WeChat[50323:8889328] Alive 8675\n2021-06-01 15:32:58.389 WeChat[50323:8889328] Alive 8680\n2021-06-01 15:34:39.840 WeChat[50323:8889328] Alive 8685\n[SQLITERK_OK] Saved master info with 121 entries.\n2021-06-01 15:36:19.843 WeChat[50323:8889328] Alive 8690\n2021-06-01 15:38:00.001 WeChat[50323:8889328] Alive 8695\n2021-06-01 15:39:39.856 WeChat[50323:8889328] Alive 8700\n2021-06-01 15:41:19.896 WeChat[50323:8889328] Alive 8705\n2021-06-01 15:42:59.852 WeChat[50323:8889328] Alive 8710\n2021-06-01 15:44:39.854 WeChat[50323:8889328] Alive 8715\n2021-06-01 15:46:19.857 WeChat[50323:8889328] Alive 8720\n2021-06-01 15:47:59.859 WeChat[50323:8889328] Alive 8725\n2021-06-01 15:49:39.862 WeChat[50323:8889328] Alive 8730\n2021-06-01 15:51:19.865 WeChat[50323:8889328] Alive 8735\n2021-06-01 15:52:59.868 WeChat[50323:8889328] Alive 8740\n2021-06-01 15:54:39.912 WeChat[50323:8889328] Alive 8745\n2021-06-01 15:56:29.815 WeChat[50323:8889328] Alive 8750\n2021-06-01 15:58:09.850 WeChat[50323:8889328] Alive 8755\n2021-06-01 15:59:49.855 WeChat[50323:8889328] Alive 8760\n2021-06-01 16:01:29.858 WeChat[50323:8889328] Alive 8765\n2021-06-01 16:03:09.862 WeChat[50323:8889328] Alive 8770\n2021-06-01 16:05:00.011 WeChat[50323:8889328] Alive 8775\n2021-06-01 16:06:39.862 WeChat[50323:8889328] Alive 8780\n2021-06-01 16:08:19.865 WeChat[50323:8889328] Alive 8785\n2021-06-01 16:09:59.869 WeChat[50323:8889328] Alive 8790\n2021-06-01 16:11:39.916 WeChat[50323:8889328] Alive 8795\n2021-06-01 16:13:19.935 WeChat[50323:8889328] Alive 8800\n2021-06-01 16:14:59.959 WeChat[50323:8889328] Alive 8805\n2021-06-01 16:15:09.006 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90235f820> -[JTCaptureRequest init]\n2021-06-01 16:15:09.006 WeChat[50323:8889328] <JTCaptureManager: 0x7fa906674a60> -[JTCaptureManager init]\n2021-06-01 16:15:09.042 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8e69fa520> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-06-01 16:15:09.087 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8e69fa520> -[JTCaptureViewController configAppearanceAndLayout]\n2021-06-01 16:15:09.094 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90dcd3720> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-06-01 16:15:09.119 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8f67dab40> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-06-01 16:15:09.142 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8f67dab40> -[JTCaptureViewController configAppearanceAndLayout]\n2021-06-01 16:15:09.148 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8e733de50> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-06-01 16:15:12.216 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa90dc949e0> -[JTToolbarView configAppearanceAndLayout]\n2021-06-01 16:15:12.232 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa911e66830> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-06-01 16:15:13.365 WeChat[50323:8889328] <JTPopoverView: 0x7fa90dcef8f0> -[JTPopoverView configAppearanceAndLayout]\n2021-06-01 16:15:13.369 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8f824b2c0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-06-01 16:15:13.375 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa9018e2e80> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-06-01 16:15:13.375 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa90f181290> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-06-01 16:15:13.376 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa90f168ab0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-06-01 16:15:13.376 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90ed94590> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-06-01 16:15:13.379 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa900d540e0> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-06-01 16:15:13.387 WeChat[50323:8889328] <JTPopoverView: 0x7fa90dcef8f0> -[JTPopoverView configAppearanceAndLayout]\n2021-06-01 16:15:13.389 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90ed94590> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-06-01 16:15:13.391 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8f824b2c0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-06-01 16:15:15.989 WeChat[50323:8889328] <JTPopoverView: 0x7fa90dcef8f0> -[JTPopoverView configAppearanceAndLayout]\n2021-06-01 16:15:15.991 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90ed94590> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-06-01 16:15:15.994 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8f824b2c0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-06-01 16:15:16.004 WeChat[50323:8889328] <JTPopoverView: 0x7fa90dcef8f0> -[JTPopoverView configAppearanceAndLayout]\n2021-06-01 16:15:16.006 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90ed94590> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-06-01 16:15:16.008 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa8f824b2c0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-06-01 16:15:19.819 WeChat[50323:8889328] <JTCaptureManager: 0x7fa906674a60> -[JTCaptureManager dealloc]\n2021-06-01 16:15:19.819 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90235f820> -[JTCaptureRequest dealloc]\n2021-06-01 16:15:19.819 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90dcd3720> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-06-01 16:15:19.820 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8e69fa520> -[JTCaptureViewController dealloc]\n2021-06-01 16:15:19.823 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa8e733de50> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-06-01 16:15:19.823 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa8f67dab40> -[JTCaptureViewController dealloc]\n2021-06-01 16:15:19.831 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa911e66830> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-06-01 16:15:19.833 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa900d540e0> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-06-01 16:16:39.982 WeChat[50323:8889328] Alive 8810\n2021-06-01 16:17:46.070 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 16:17:46.071 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 16:17:46.071 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 16:17:46.072 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 16:17:46.072 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 16:17:46.072 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 16:18:20.007 WeChat[50323:8889328] Alive 8815\n2021-06-01 16:19:59.972 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 16:19:59.972 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 16:19:59.972 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 16:19:59.975 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 16:19:59.976 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 16:19:59.976 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 16:20:00.026 WeChat[50323:8889328] Alive 8820\n2021-06-01 16:20:26.699 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 16:20:26.699 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 16:20:26.699 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 16:20:26.700 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-06-01 16:20:26.700 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-06-01 16:20:26.700 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-06-01 16:21:40.050 WeChat[50323:8889328] Alive 8825\nSaving session...completed.\nDeleting expired sessions...none found.\n\n[Process completed]\n\n\n```\n"
  },
  {
    "id": 46264710,
    "title": "后端工程圣殿形象的崩塌以及重建",
    "description": "作为一个前端，似乎一直有点抬不起头。总是在圈子里被鄙视，什么：前端也是程序员？什么：JavaScript 工程太乱等等等等。我一直对后端工程心存敬畏，总之后端在我眼中一直是高大上的形象，但是最近我近距离深入接触了某公司的后端 Java 工程，三观彻底被毁了：一直鄙视我们前端的后端工程师们，搭出...",
    "custom_description": null,
    "updated_at": "2021-05-31T12:39:17.000Z",
    "created_at": "2021-05-31T12:39:17.000Z",
    "slug": "gx48bf",
    "word_count": 2992,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1622355446000-5eae8033-c041-4f6e-88f4-2f5af0b512ea.png",
    "body": "作为一个前端，似乎一直有点抬不起头。总是在圈子里被鄙视，什么：前端也是程序员？什么：JavaScript 工程太乱等等等等。我一直对后端工程心存敬畏，总之后端在我眼中一直是高大上的形象，但是最近我近距离深入接触了某公司的后端 Java 工程，三观彻底被毁了：一直鄙视我们前端的后端工程师们，搭出来的后端工程就这？心中一万匹马奔腾而过。在我原来的观念里，**后端工程一直就像是圣殿般的存在，如今真正一看，却如同废墟。**<br />​\n\n自己一直想往全栈方向发展，于是决定在废墟中重建，虽然不能立即达到圣殿的级别，但是力求达到常见的前端工程水准。<br />​<br />\n<a name=\"dSVNE\"></a>\n## 缘起\n后端接口一直调不通，后端同学总是说他那里是好的。我说开发环境调不通，他发来一堆 SQL 给我：你得在本地环境建数据呀。为了节省时间，我干脆在本地克隆了后端工程，开始近距离接触。一看，三观尽毁：<br />​<br />\n<a name=\"otbN7\"></a>\n## 项目不能在本地一键启动\n我接触过的所有前端项目，都会有一个 README，写清楚如何本地运行，尽管都是差不多的，尽管很简单，但都会注明。一般都会支持 `yarn dev` 或者 `yarn start` 等等一键运行命令。但是我打开的 java 工程，什么都没有。当然，能看出是基于 SpringBoot 的一个 maven 工程，于是 Googl 了一下 maven 工程的启动方式，试了一下 `mvn bootRun` 果然是各种报错。<br />​<br />\n<a name=\"OYMB4\"></a>\n### 重建方案\n于是我通过各种错误提示，了解到了项目的依赖：mysql、redis 等等，就补充了一个 `docker-compose.yaml` 文件，在执行 `mvn bootRun` 之前，`docker-compose up -d` 一下，启动相关的依赖项。当然没有那么顺利，仍然有很多错误，详细的就不说了，心里窝火。最后的解决办法：\n\n- **写一个初始数据库的脚本，并配置在 **`**docker-compose.yaml**`** 文件中，使得在 **`**docker-compose up -d**`** 时自动创建好需要的数据库<br />init.sql**\n```sql\nCREATE DATABASE IF NOT EXISTS dbname;\nUSE dbname;\n```\n**docker-compose.yaml**\n```yaml\nversion: '3.3'\nservices:\n  adminer:\n    image: adminer:4.8.0\n    restart: always\n    ports:\n      - 7777:8080\n  db:\n    image: mysql:5.7\n    restart: always\n    environment:\n      MYSQL_DATABASE: 'dbname'\n      MYSQL_USER: 'root'\n      MYSQL_ROOT_PASSWORD: 'password'\n    ports:\n      - '3306:3306'\n    command: --init-file /data/application/init.sql\n    expose:\n      - '3306'\n    volumes:\n      - my-db:/var/lib/mysql\n      - ./init.sql:/data/application/init.sql\n  redis:\n    image: redis\n    command: redis-server --requirepass 123456\n    restart: always\n    ports:\n      - '6379:6379'\n\n# Names our volume\nvolumes:\n  my-db:\n```\n\n- **新建一个 local profile 文件，并配置好相关的本地环境变量**\n   - 对于本地数据库连接配置，新建`src/main/resources/db/datasource-local.yml`文件，配置如下：\n```yaml\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    hikari:\n      max-lifetime: 1800000\n      maximum-pool-size: 10\n    type: com.zaxxer.hikari.HikariDataSource\n    url: jdbc:mysql://localhost:3306/dbname?useUnicode=true&rewriteBatchedStatements=true&autoReconnect=true&failOverReadOnly=false&characterEncoding=UTF-8&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai\n    username: root\n    password: password\n```\n\n   - 对于本地 Redis 配置，新建 `src/main/resources/redis/redis-local.yml` 文件，配置如下：\n```yaml\nspring:\n  redis:\n    host: localhost\n    lettuce:\n      pool:\n        max-active: 100\n        max-idle: 100\n        max-wait: 6000\n        min-idle: 50\n    lock:\n      host: localhost\n      password: 123456\n      port: 6379\n    password: 123456\n    port: 6379\n    timeout: 5000\n```\n\n   - 在 `pom.xml` 里新增一个 local profile：\n```xml\n...\n<profiles>\n        <profile>\n            <id>local</id>\n            <properties>\n                <package.environment>local</package.environment>\n            </properties>\n            <activation>\n                <activeByDefault>true</activeByDefault>\n            </activation>\n        </profile>\n  \t\t\t...\n</profiles>\n...\n```\n\n   - 增加 application-local.properties 文件：\n```xml\nenv=local\nserver.port=8080\nserver.http2.enabled=true\n```\n\n- **新建一个 start.sh 文件，无非就是启动相关依赖，再利用 **`**mvn bootRun**`** 启动项目。总之封装成一个脚本文件，方便后续本地一键启动项目。**\n```shell\nmvn clean install\ndocker-compose up -d\nmvn bootRun\n```\n​<br />\n<a name=\"iLAx9\"></a>\n## 完全没有任何测试代码\n这真是日了狗了。<br />​\n\n我所见过的前端工程，测试占比并不多，由于前端 UI 测试代价比较大，变化多，所以很少会去写详细的自动化测试，但是会做好 `file watch`，一旦代码变化，界面也随之更新，所以也还好。但是对于公共逻辑，或者重要的组件，一般都是一个实现文件对应着一个测试文件，每个文件用来干什么，只要看下对应的测试文件就一目了然：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1622355446000-5eae8033-c041-4f6e-88f4-2f5af0b512ea.png#clientId=u8d7fa753-272e-4&from=paste&height=248&id=u4e0a0f95&margin=%5Bobject%20Object%5D&name=image.png&originHeight=465&originWidth=815&originalType=binary&size=43855&status=done&style=none&taskId=u10f26eb2-5a99-457b-924d-3f3e99dc526&width=434.66668701171875)<br />但是我打开的 java 工程，看似很专业，分层分得很细，遵照了《领域驱动设计》的层次结构：![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1622355968608-bb1ef753-8d79-4305-9dcc-07b4c5bc40fe.png#clientId=u8d7fa753-272e-4&from=paste&height=873&id=ua4186f0b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2620&originWidth=2970&originalType=binary&size=541444&status=done&style=none&taskId=ua2bd916b-7dac-428c-bf19-f678ea3ed07&width=990)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1622356121139-ad443f97-c81b-475d-9194-cd727b61ae89.png#clientId=u8d7fa753-272e-4&from=paste&height=322&id=ub9ac226d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=656&originWidth=1007&originalType=binary&size=98138&status=done&style=none&taskId=u6c8fa508-b761-4859-95b9-e21d1c7c8de&width=493.66668701171875)<br />但是《领域驱动设计》中引入这个分层架构是为了方便自动化测试，并且让程序本身更加简单明了。显然这个项目工程，只是生硬照搬了分层结构，并没有实现《领域驱动设计》中引入这个结构的目的。<br />​<br />\n<a name=\"UZ9Xa\"></a>\n### 部分重建方案\n对于新加的代码，必须添加测试。这对我来说很艰难，不太会用 java 写测试，但最终把测试加入了，每次把改动推到远程仓库前，会自动运行项目中的测试。对于这个我还没有形成一个通用的方案，只能记录一些零碎的新得。<br />​\n\n**@MockBean 可以解决测试实例的替换**<br />对于一些依赖，在运行测试时需要控制住，这时候可以采用 @MockBean 将实际依赖替换成一个假的对象实例。前提是实现代码做到了依赖一个抽象，而不是具体的实例。<br />​\n\n**对于没有依赖接口，而是依赖特定实例实现的代码，可以增加一些 setter 以方便测试**<br />比如这样的代码：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1622356992948-d3be2176-5030-4b95-814b-b4fd63f709fc.png#clientId=u8d7fa753-272e-4&from=paste&height=298&id=uc006b883&margin=%5Bobject%20Object%5D&name=image.png&originHeight=298&originWidth=508&originalType=binary&size=117006&status=done&style=none&taskId=u24d7f28b-13ea-4312-81fc-057dc21c97d&width=508)<br />显然它对 HttpClient 的依赖没有使用依赖注入。应该有办法改造一下，但我还不会，于是给这个类增加了一个 setter 方法：\n```java\n    public void setHttpClient(HttpClient client) {\n        this.httpClient = client;\n    }\n```\n然后在测试代码中，通过 @BeforeEach 对其内部 httpClient 进行替换：\n```java\n    @BeforeEach\n    void initialize() {\n        mpService.setHttpClient(new MockHttpClient());\n    }\n```\n当然，还可以在测试中不更改 HttpClient，而是更改对应的 HttpClient 要调用的远程端点，使用 MockServer 的方式，防止在测试中调用真正的远程端点。\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.None)\npublic class XXXTest {\n    public static MockWebServer mockBackEnd;\n\n    @BeforeAll\n    static void setUp() throws IOException {\n        mockBackEnd = new MockWebServer();\n        mockBackEnd.start();\n    }\n\n    @AfterAll\n    static void tearDown() throws IOException {\n        mockBackEnd.shutdown();\n    }\n\n    @BeforeEach\n    void initialize() {\n        String baseUrl = String.format(\"http://localhost:%s\",\n                mockBackEnd.getPort());\n\n        mpService.setQrCodeCreateUrl(baseUrl + \"/test\");\n    }\n\n    @Autowired\n\tprivate MpService mpService;\n    \n    @Test\n    void XXXTest() {\n        MockResponse mockResponse = new MockResponse();\n        mockResponse.setBody(\"{\\\"ticket\\\":\\\"gQH47joAAAAAAAAAASxodHRwOi8vd2VpeGluLnFxLmNvbS9xL2taZ2Z3TVRtNzJXV1Brb3ZhYmJJAAIEZ23sUwMEmm\\n\" +\n                \"3sUw==\\\",\\\"expire_seconds\\\":60,\\\"url\\\":\\\"http://weixin.qq.com/q/kZgfwMTm72WWPkovabbI\\\"}\");\n        mockResponse.addHeader(\"Content-Type\", \"application/json\");\n\n        mockBackEnd.enqueue(mockResponse);\n        ...\n        assertThat(...);\n    }\n```\n**总之，不要让测试产生真正的远程调用，要么 mock 自己使用的 HttpClient，对 sendRequest 方法进行打桩；要么 mock 这个远程 server，固定返回期待的 Response。**<br />​<br />\n<a name=\"GXnRN\"></a>\n## 设计瑕疵\n后端系统中所有的日期字段类型，全部设置成为了 Long 型，存储一个时间的秒数。这个让我非常不解，问下来的原因是时间的时区会带来问题……<br />​\n\n我想不出日期时间格式会带来什么时区问题，就算有，采用 UTC 时间会怎样呢？总之目前的设计，导致编码不便，数据库查询不便，以及造测试数据时非常不方便（比如 Adminer 界面不会弹出日期时间选择框，而是一个数字输入框……）。<br />​\n\n更加讽刺的是，这个设计号称能避免时区问题，结果偏偏带来了不应该有的时区问题：比如，我在调用后端接口创建某些资源时，由于业务逻辑限制开始时间和结束时间必须在同一天，我的前端明明传了同一天的时间给到后端，但后端就是一直报开始时间和结束时间不在同一天的错误！<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1622357986780-0d090bf0-c2fd-4589-b79a-bc9309e88163.png#clientId=u8d7fa753-272e-4&from=paste&height=467&id=u5ab044be&margin=%5Bobject%20Object%5D&name=image.png&originHeight=467&originWidth=546&originalType=binary&size=31620&status=done&style=none&taskId=ue59dc185-cc52-427d-bfce-3d9beaf88df&width=546)<br />最后查看后端代码，是这样写的：\n```java\nLocalDate eventStartDate = eventStartTime == null ? null : Instant.ofEpochSecond(eventStartTime).atZone(ZoneId.systemDefault()).toLocalDate();\n            LocalDate eventEndDate = eventEndTime == null ? null : Instant.ofEpochSecond(eventEndTime).atZone(ZoneId.systemDefault()).toLocalDate();\n\n```\n显然当前的 BUG 证明了系统的默认时区和用户真正使用的时区并不相同。为什么我倾向于直接采用日期时间类型，是因为日期时间类型在序列化时可以带上时区信息，比如 `2021-05-31 00:00:00+8` 代表了在东八区下 5 月 31 日的最开始时刻，但是它在 UTC 时间下，就是 5 月 30 日。<br />​<br />\n<a name=\"V2J7h\"></a>\n### 暂时的解决方案\n由于直接将整个系统的时间设计从长整型改成日期时间型，工作量较大，我只能先修复了这个问题。修复可以通过把服务器的时区设置改成和用户的时区（东八区）相同，但是由于服务器的配置并没有代码话，我没有采用修改服务器设置。理想情况是一切基础设施也代码化，将一切系统知识采用文本记录并由 git 跟踪。<br />​\n\n由于现在增加时区信息让前端传递不太合适（而且后期如果改成日期时间格式，并不需要前端单独传递时区信息），以及考虑到产品只面向中国用户，因此暂时在代码中将时区从默认改成了东八区, 不过，任何代码的改动，都添加了测试代码，以保证重构的安全。\n```diff\n-            LocalDate eventStartDate = eventStartTime == null ? null : Instant.ofEpochSecond(eventStartTime).atZone(ZoneId.systemDefault()).toLocalDate();\n-            LocalDate eventEndDate = eventEndTime == null ? null : Instant.ofEpochSecond(eventEndTime).atZone(ZoneId.systemDefault()).toLocalDate();\n+            LocalDate eventStartDate = eventStartTime == null ? null : Instant.ofEpochSecond(eventStartTime).atZone(ZoneId.of(\"Asia/Shanghai\")).toLocalDate();\n+            LocalDate eventEndDate = eventEndTime == null ? null : Instant.ofEpochSecond(eventEndTime).atZone(ZoneId.of(\"Asia/Shanghai\")).toLocalDate();\n\t\t\t\t\t\tif (eventEndDate != null && eventStartDate != null && !eventStartDate.equals(eventEndDate)) {\n                return \"场次开始时间和结束时间需要在同一天！\";\n            }\n```\n```java\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.time.ZoneId;\nimport java.util.TimeZone;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass CampaignEventValidationUseCaseImplTest {\n    private CampaignEventValidationUseCaseImpl sut;\n\n    @BeforeEach\n    void setUp() {\n        sut = new CampaignEventValidationUseCaseImpl();\n    }\n\n    /**\n     * BUG：开始时间选择 2021-05-20 00:05，结束时间选择 2021-05-20 23:55，校验报错说：场次开始时间和结束时间需要在同一天\n     */\n    @Test\n    void validate场次开始时间和结束时间需要在同一天() {\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/Kiev\")); // 模拟服务器时区没有设置在东八区\n        \n        sut = new CampaignEventValidationUseCaseImpl();\n\n        EventTime4Check event = new EventTime4Check();\n        event.setEventEndTime(1621526100L);\n        event.setEventStartTime(1621440300L);\n\n        CampaignDto campaignDto = new CampaignDto();\n        campaignDto.setCampaignId(\"12345\");\n        campaignDto.setStartTime(1621483200L);\n        campaignDto.setEndTime(1622188000L);\n\n        assertNotNull(sut);\n\n        assertThat(sut.validate(event, campaignDto)).isNotEqualTo(\"场次开始时间和结束时间需要在同一天！\");\n    }\n}\n```\n<a name=\"kEl0O\"></a>\n## \n<a name=\"Ieq6s\"></a>\n## 长篇没有测试又满是 BUG 的函数\n这个工程里充斥着长篇函数，状态变量特别多，而且往往在函数开头就定义一堆。如前所述，有没有测试，而且实际联调下来又有 BUG。<br />​<br />\n<a name=\"uHKmB\"></a>\n### 部分重建方案\n<a name=\"XimNW\"></a>\n#### 内联只被用到一次的变量，对于被引用多次的变量，将其定义挪到第一次引用之前；\n<a name=\"Rdb5U\"></a>\n#### 对于已知有 BUG 的分支，使用提前退出，并在单独的小函数中进行自动化测试并修复：\n```java\n@Override\n    public Boolean queryCampaignHasReservableEvent(String campaignId, CampaignType campaignType) throws Exception {\n        // 新增代码\n        if (campaignType == CampaignType.CAMPAIGN) {\n            // 联调发现这个分支有 BUG，提前返回新的函数，并对其进行充分的自动化测试\n            return queryCampaignHasReservableEventForCampaign(campaignId);\n        }\n        \n        // 原有代码\n        EventQueryCondition queryCondition = new EventQueryCondition();\n        queryCondition.setCampaignId(campaignId);\n        // 此处省略原有的几十行漏洞代码\n        ...\n        PageInfo<EventDto> pageInfo = getOnlyEvents(queryCondition);\n        return pageInfo.getTotal() != 0;\n    }\n```\n<a name=\"hnyrc\"></a>\n## 其他重复代码等等问题\n项目中居然有很多整段整段的代码重复，以及格式不规整的问题，这些问题都可以被自动扫描出来，于是搭建一个 SonarQube，以方便快速定位这些问题（扫描结果不堪入目🙈，这还只是新建没多久的项目啊……）：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1622464119723-b9350125-e10e-4be6-b175-4033e9f59c1f.png#clientId=u8d50202b-7c2c-4&from=paste&height=1117&id=udc24a279&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1117&originWidth=1293&originalType=binary&size=137528&status=done&style=none&taskId=u4105fe18-ae93-4986-9f43-285055e99c7&width=1293)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1622464170293-832de223-f13d-451a-84d1-b621b8d737e3.png#clientId=u8d50202b-7c2c-4&from=paste&height=664&id=u2f803133&margin=%5Bobject%20Object%5D&name=image.png&originHeight=664&originWidth=846&originalType=binary&size=40661&status=done&style=none&taskId=ub7769d2e-84a5-4c6d-9fc4-c7ddf4abf39&width=846)<br />​\n\n可以看出，重建很艰难，也是个长期工程，今天就记录到这里。\n"
  },
  {
    "id": 46138807,
    "title": "TypeScript 实现对不同类的通用扩展",
    "description": "有个奇怪的需求，对项目中存在的不同的类，给它们扩展出一个相同的方法，以供消费者调用。也就是说，要求从原来的类派生出来的新类，除了拥有原来类的方法外，还额外多出了一个新的通用方法。比如对于这样两个类，假如可以通过一个名字叫做 genericExtend() 的函数扩展，那么其扩展出的新类会多出一...",
    "custom_description": null,
    "updated_at": "2021-05-27T12:02:47.000Z",
    "created_at": "2021-05-27T12:02:47.000Z",
    "slug": "tv61xg",
    "word_count": 752,
    "cover": null,
    "body": "有个奇怪的需求，对项目中存在的不同的类，给它们扩展出一个相同的方法，以供消费者调用。也就是说，要求从原来的类派生出来的新类，除了拥有原来类的方法外，还额外多出了一个新的通用方法。<br />​\n\n比如对于这样两个类，假如可以通过一个名字叫做 genericExtend() 的函数扩展，那么其扩展出的新类会多出一个 genericMethod 方法：\n```typescript\nclass A {\n  a() {\n    // ...\n  }\n}\n  \nclass B {\n  b() {\n    // ...\n  }\n}\n\nconst instanceofA = new (genericExtend(A))()\nconst instanceofB = new (genericExtend(B))()\n\ninstanceofA.a() // ok\ninstanceofA.genericMethod() // ok\n\ninstanceofB.b() // ok\ninstanceofB.genericMethod() // ok\n```\n这个需求看起来很奇怪，但也不是完全不合理，比如原始的 A 和 B，甚至 C 以及 D 等等类，是第三方来的依赖，虽然不完全一样，但是又有一些类似的地方，可以被通用处理。同时项目中又大量存在直接调用它们的原始方法的地方，不能全部替换，因此，可以将这些实例替换为被扩展后的实例，由于被扩展后的实例是原始类的子类，所以原有调用不用改变。而对于新的希望应用通用处理逻辑的地方，可以直接调用新的方法 genericMethod()。<br />​<br />\n<a name=\"Q27gP\"></a>\n## 一个幼稚的实现\n​\n\n具体实现如下：<br />​<br />\n```typescript\ntype Constructor = new (...args: any[]) => any\n\nfunction genericExtend<T extends Constructor>(target: T) {\n  return class GenericExtended extends target {\n    constructor(...args: any[]) {\n      super(...args)\n    }\n\n    genericMethod() {\n      ...\n    }\n  }\n}\n```\n这个实现完全能满足最初提出的需求，并且，可以通过联合类型，实现静态类型检查，比如对 instanceofA 定义一个联合类型，那么无论调用原始方法还是新的通用方法，都能享受到静态类型的约束：\n```typescript\nconst instanceofA: GenericExtended & A = new (genericExtend(A))()\nconst instanceofB = new (genericExtend(B))()\n\ninstanceofA.a() // ok，有代码智能提示\ninstanceofA.genericMethod() // ok，有代码智能提示\n\ninstanceofB.b() // ok，不报错，但是没有静态类型检查\ninstanceofB.genericMethod() // ok，不报错，但是没有静态类型检查\n```\n<a name=\"baXz4\"></a>\n## \n<a name=\"eSHeY\"></a>\n## 幼稚实现不好的地方\n​\n\n虽然幼稚的实现完全能够工作，并且我将它用在了实际的工程里，但是它有这些缺点：<br />​<br />\n\n- 在实现上使用了 any 关键字\n- 在声明实例的类型时，需要使用联合类型的方式，比较丑\n- 不显式声明类型，就没有类型检查，没有触发 TypeScript 的类型自动推断\n\n​\n\n不知道这个需求会不会是某种通用模式？从而有现成的更加优雅的实现方案？可能受制于自己的认知，网上搜索了很久，没有找到优雅的通用的实现。希望有高人能指点指点。\n"
  },
  {
    "id": 46066493,
    "title": "使用 cURL 提高前后端开发连调中的沟通效率",
    "description": "背景无论是出于开发效率考虑，还是出于优化架构考虑，前后端项目分离，两班人马并行开发已经成为常见的开发模式。相比在接口发布之后再启动前端开发的模式，分离并行开发也给前端带来了更多的挑战：浏览器跨域问题：由于接口不在同一个项目，所以前端在本地开发时无法直接调通后端接口；mock 问题：接口可用之前...",
    "custom_description": null,
    "updated_at": "2021-05-26T12:43:19.000Z",
    "created_at": "2021-05-26T12:43:19.000Z",
    "slug": "vnh05w",
    "word_count": 804,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1622032570715-8b7468aa-3916-4f17-97ac-4fa715992158.png",
    "body": "<a name=\"z2lYO\"></a>\n## 背景\n​\n\n无论是出于开发效率考虑，还是出于优化架构考虑，前后端项目分离，两班人马并行开发已经成为常见的开发模式。相比在接口发布之后再启动前端开发的模式，分离并行开发也给前端带来了更多的挑战：<br />​<br />\n\n- 浏览器跨域问题：由于接口不在同一个项目，所以前端在本地开发时无法直接调通后端接口；\n- mock 问题：接口可用之前，需要本地先 mock 返回数据；\n- 不同环境连调问题：由于往往存在开发、测试、预生产和生产环境，前端项目要能够在不同环境自由切换，并且不用修改代码。\n\n​\n\n如何优雅地解决上述问题，在《[前后端分离开发中前端需要克服的挑战](https://zhuanlan.zhihu.com/p/351121637)》中已经详细描述，总结就是通过环境变量来触发调用接口的代码指向 mock 或者不同环境。《[前后端分离开发中前端需要克服的挑战](https://zhuanlan.zhihu.com/p/351121637)》解决了前端开发的问题，**理论上前端只要针对 mock 数据开发，配置好不同环境的接口端点，发布到不同环境之后就不用管了，如果接口完全按照 mock 定义的契约实现，不应该有任何问题。**<br />​\n\n但是现实中还是免不了出乎前后端开发的意料，明明 mock 数据时好的，到了对应的环境就是对不上。在连调过程中，往往碰到前后端各种冗长的无效沟通：前端问后端问什么没有返回 xxx？后端问前端：你传的参数是什么？前端告诉后端：xxx；后端说我调用是好的呀，你说的是那个环境？……<br />​\n\n几个小时下来，要么发现聊的不是同一个环境，要么发现是某个神奇的 header 字段导致，等等。那么，怎么避免这种不必要的不精确的沟通呢？<br />​<br />\n<a name=\"CaeaU\"></a>\n## cURL\n​\n\ncURL 是解决这个沟通问题的救星。前端碰到接口调用问题，直接将异常请求以 cURL 形式发送给后端，不需要手动生造请求，只要在开发者工具中选中这个异常请求，右键复制成 cURL 即可。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1622032570715-8b7468aa-3916-4f17-97ac-4fa715992158.png#clientId=u16cd9165-1764-4&from=paste&height=783&id=u96c08dcb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=783&originWidth=996&originalType=binary&size=362750&status=done&style=none&taskId=u59058289-90e0-4350-afed-e43ebecb2bc&width=996)<br />cURL 以文本形式携带了请求的所有信息，接口端点、请求头和参数等等，后端拿到后就有了所有的信息，不需要再多问一句，而且可以快速重放请求，做有针对性的参数修改等等以排查问题。<br />​<br />\n<a name=\"tlVwt\"></a>\n## Postman\n​\n\n当然，后端甚至不必只在命令行做纯文本形式的修改，他可以直接将 cURL 文本导入到 Postman 里，从而使用 GUI 来操作这个请求，以及顺便保存了所有的操作历史，非常方便：<br />​\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1622032852665-20909c7a-3fbb-40e0-a2e0-c27291ca5dc2.png#clientId=u16cd9165-1764-4&from=paste&height=870&id=u8094a87d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=870&originWidth=1444&originalType=binary&size=317203&status=done&style=none&taskId=u235b4006-d732-4ba9-b1f9-53a92cfb981&width=1444)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1622032879387-a2807e16-3fcc-4e20-9043-ee319eaf934f.png#clientId=u16cd9165-1764-4&from=paste&height=468&id=u1f9e929d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=468&originWidth=1848&originalType=binary&size=348156&status=done&style=none&taskId=u80d4412b-35eb-44cf-9f3f-b0845668af4&width=1848)\n"
  },
  {
    "id": 45979767,
    "title": "查看 Mac 微信运行日志",
    "description": "通过命令行启动微信：/Applications/WeChat.app/Contents/MacOS/WeChat ; exit;从运行日志看，微信似乎是使用 Objective C 开发，采用了 SQLite 数据库：一段完整的启动日志如下：➜ /Applications/WeChat.app...",
    "custom_description": null,
    "updated_at": "2021-05-25T10:16:28.000Z",
    "created_at": "2021-05-25T10:16:28.000Z",
    "slug": "ick1fr",
    "word_count": 2192,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1621937399717-46ea876d-f8a2-4622-803f-98fa44a71910.png",
    "body": "通过命令行启动微信：\n```shell\n/Applications/WeChat.app/Contents/MacOS/WeChat ; exit;\n```\n从运行日志看，微信似乎是使用 Objective C 开发，采用了 SQLite 数据库：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1621937399717-46ea876d-f8a2-4622-803f-98fa44a71910.png#clientId=uc7331a08-8098-4&from=paste&height=536&id=uc9525b48&margin=%5Bobject%20Object%5D&name=image.png&originHeight=536&originWidth=934&originalType=binary&size=394400&status=done&style=none&taskId=u2e95388d-ea36-46e9-8e11-e4797f0149c&width=934)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1621937428876-b57525aa-5814-4f8c-a567-4735167d502a.png#clientId=uc7331a08-8098-4&from=paste&height=368&id=u4125563f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=368&originWidth=674&originalType=binary&size=81723&status=done&style=none&taskId=ud8e9629c-2a18-42a3-ac57-fdd5bfc6746&width=674)<br />一段完整的启动日志如下：\n```shell\n➜ /Applications/WeChat.app/Contents/MacOS/WeChat ; exit;\nobjc[50323]: Class AFHTTPSessionManager is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383008) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b02d38). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFNetworkReachabilityManager is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107382f68) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b02dd8). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFSecurityPolicy is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107382fb8) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b02e28). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFQueryStringPair is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383148) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b02e78). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFHTTPRequestSerializer is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383198) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b02ec8). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFStreamingMultipartFormData is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x1073831c0) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b02ef0). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFMultipartBodyStream is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383210) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b02f40). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFHTTPBodyPart is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383238) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b02f68). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFJSONRequestSerializer is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x1073832d8) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b03008). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFPropertyListRequestSerializer is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383328) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b03058). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFHTTPResponseSerializer is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383378) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b030a8). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFJSONResponseSerializer is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x1073833c8) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b030f8). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFXMLParserResponseSerializer is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383418) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b03148). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFXMLDocumentResponseSerializer is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383468) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b03198). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFPropertyListResponseSerializer is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x1073834b8) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b031e8). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFImageResponseSerializer is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383508) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b03238). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFCompoundResponseSerializer is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383558) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b03288). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFURLSessionManagerTaskDelegate is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x107383058) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b032d8). One of the two will be used. Which one is undefined.\nobjc[50323]: Class _AFURLSessionTaskSwizzling is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x1073830d0) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b03350). One of the two will be used. Which one is undefined.\nobjc[50323]: Class AFURLSessionManager is implemented in both /Applications/WeChat.app/Contents/Frameworks/AFNetworking.framework/Versions/A/AFNetworking (0x1073830f8) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b03378). One of the two will be used. Which one is undefined.\nobjc[50323]: Class MarsReachability is implemented in both /Applications/WeChat.app/Contents/Frameworks/matrixreport.framework/Versions/A/matrixreport (0x1074607b8) and /Applications/WeChat.app/Contents/MacOS/WeChat (0x105b0bfe8). One of the two will be used. Which one is undefined.\n2021-05-25 18:04:07.452 WeChat[50323:8889328] Event: kMMLoginEventUseOneClickLogin, from state: stateStart to state: stateShowingOneClick\n[WCDB]Code:283, Type:SQLiteGlobal, Msg:recovered 12 frames from WAL file /Users/cnjeftia/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/9505a027381d29abc18274656ac20813/KvConfig/kv_config.d\n2021-05-25 18:04:09.980 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:04:09.980 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:04:09.980 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:04:09.981 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:04:09.981 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:04:09.981 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:04:10.000 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:04:10.000 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:04:10.000 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:04:10.520 WeChat[50323:8889328] Event: kMMLoginEventOneClickRequestSent, from state: stateShowingOneClick to state: stateWaittingConfirm\n2021-05-25 18:04:19.410 WeChat[50323:8889328] Event: kMMLoginEventOneClickRequestConfirmed, from state: stateWaittingConfirm to state: stateLoggingIn\n<CFData 0x7fa908817dc0 [0x7fff806abb70]>{length = 6, capacity = 6, bytes = 0x88665a26aa4d}\n2021-05-25 18:04:20.291 WeChat[50323:8889328] <MMSplitView: 0x7fa90eb2ae40>: the delegate <MMMainViewController: 0x7fa90dea2410> was sent -splitView:resizeSubviewsWithOldSize: and left the arranged view frames in an inconsistent state:\n2021-05-25 18:04:20.291 WeChat[50323:8889328] Split view bounds: {{0, 0}, {1284, 815}}\n2021-05-25 18:04:20.291 WeChat[50323:8889328]     Arranged view frame: {{0, 0}, {269, 815}}\n2021-05-25 18:04:20.291 WeChat[50323:8889328]     Arranged view frame: {{270, 0}, {1015, 815}}\n2021-05-25 18:04:20.291 WeChat[50323:8889328] The outer edges of the arranged view frames are supposed to line up with the split view's bounds' edges. NSSplitView is working around the problem, perhaps at the cost of more redrawing. (This message is only logged once per NSSplitView.)\n<CFData 0x7fa90debc060 [0x7fff806abb70]>{length = 6, capacity = 6, bytes = 0x88665a26aa4d}\n[SQLITERK_OK] Saved master info with 157 entries.\n[SQLITERK_OK] Saved master info with 111 entries.\n[SQLITERK_OK] Saved master info with 115 entries.\n2021-05-25 18:04:22.030 WeChat[50323:8889869] -[MMPinyinCacheInfo encodeWithCoder:]: unrecognized selector sent to instance 0x7fa90f9fb110\n2021-05-25 18:04:22.044 WeChat[50323:8889869] *** -[NSKeyedArchiver dealloc]: warning: NSKeyedArchiver deallocated without having had -finishEncoding called on it.\n2021-05-25 18:04:22.595 WeChat[50323:8889328] Warning: Expected min height of view: (<NSPopoverTouchBarItemButton: 0x7fa90f7872d0>) to be less than or equal to 30 but got a height of 32.000000. This error will be logged once per view in violation.\n[SQLITERK_OK] Saved master info with 117 entries.\n[SQLITERK_OK] Saved master info with 125 entries.\n[SQLITERK_OK] Saved master info with 137 entries.\n[SQLITERK_OK] Saved master info with 163 entries.\n[SQLITERK_OK] Saved master info with 109 entries.\n[SQLITERK_OK] Saved master info with 135 entries.\n[SQLITERK_OK] Saved master info with 85 entries.\n2021-05-25 18:04:24.164 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:04:24.164 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:04:24.164 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:04:24.164 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:04:24.164 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:04:24.164 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:04:24.413 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:04:24.413 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:04:24.413 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:04:24.413 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:04:24.413 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:04:24.413 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:05:27.969 WeChat[50323:8889328] Alive 5\n2021-05-25 18:07:07.992 WeChat[50323:8889328] Alive 10\n2021-05-25 18:08:14.296 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:08:14.296 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:08:14.296 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:08:14.302 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:08:14.302 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:08:14.302 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:08:48.023 WeChat[50323:8889328] Alive 15\n2021-05-25 18:08:57.868 WeChat[50323:8889328] Warning: Expected min height of view: (<NSButton: 0x7fa90fc3ed70>) to be less than or equal to 30 but got a height of 32.000000. This error will be logged once per view in violation.\n2021-05-25 18:08:57.872 WeChat[50323:8889328] Warning: Expected min height of view: (<NSButton: 0x7fa90f8081d0>) to be less than or equal to 30 but got a height of 32.000000. This error will be logged once per view in violation.\n2021-05-25 18:09:02.758 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:09:02.758 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:09:02.758 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:09:02.759 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:09:02.759 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:09:02.759 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:09:05.943 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:09:05.943 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:09:05.943 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:09:05.944 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:09:05.944 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:09:05.944 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:09:25.879 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:09:25.879 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:09:25.879 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:09:25.880 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:09:25.880 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:09:25.880 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:09:28.874 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90f8693a0> -[JTCaptureRequest init]\n2021-05-25 18:09:28.875 WeChat[50323:8889328] <JTCaptureManager: 0x7fa9067611b0> -[JTCaptureManager init]\n2021-05-25 18:09:28.911 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa912127bf0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-25 18:09:28.957 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa912127bf0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-25 18:09:28.964 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f4c4780> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-25 18:09:28.979 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9120fa7c0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-25 18:09:29.001 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9120fa7c0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-25 18:09:29.007 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa911d18600> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-25 18:09:29.171 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:09:29.171 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:09:29.171 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:09:29.171 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:09:29.171 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:09:29.171 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:09:37.607 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa9121a2f80> -[JTToolbarView configAppearanceAndLayout]\n2021-05-25 18:09:37.622 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa91228d7e0> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-25 18:09:43.657 WeChat[50323:8889328] <JTPopoverView: 0x7fa91335ab60> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:09:43.661 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91327b7f0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:09:43.668 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa90ebc11b0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-25 18:09:43.668 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa90eb116d0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-25 18:09:43.668 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa90f48eff0> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-25 18:09:43.668 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9132bb390> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:09:43.671 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa911fc4bd0> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-25 18:09:43.673 WeChat[50323:8889328] <JTPopoverView: 0x7fa91335ab60> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:09:43.674 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9132bb390> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:09:43.676 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91327b7f0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:09:45.726 WeChat[50323:8889328] <JTPopoverView: 0x7fa91335ab60> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:09:45.728 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9132bb390> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:09:45.730 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91327b7f0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:09:45.739 WeChat[50323:8889328] <JTPopoverView: 0x7fa91335ab60> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:09:45.740 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9132bb390> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:09:45.742 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91327b7f0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:09:51.439 WeChat[50323:8889328] <JTPopoverView: 0x7fa91335ab60> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:09:51.440 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9132bb390> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:09:51.442 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91327b7f0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:09:52.817 WeChat[50323:8889328] <JTPopoverView: 0x7fa91335ab60> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:09:52.818 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9132bb390> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:09:52.819 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91327b7f0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:09:52.826 WeChat[50323:8889328] <JTPopoverView: 0x7fa91335ab60> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:09:52.827 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa9132bb390> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:09:52.828 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91327b7f0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:09:54.961 WeChat[50323:8889328] <JTCaptureManager: 0x7fa9067611b0> -[JTCaptureManager dealloc]\n2021-05-25 18:09:54.961 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90f8693a0> -[JTCaptureRequest dealloc]\n2021-05-25 18:09:54.961 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa911d18600> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-25 18:09:54.961 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9120fa7c0> -[JTCaptureViewController dealloc]\n2021-05-25 18:09:54.964 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f4c4780> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-25 18:09:54.964 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa912127bf0> -[JTCaptureViewController dealloc]\n2021-05-25 18:09:54.966 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa91228d7e0> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-25 18:09:54.971 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa911fc4bd0> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-25 18:10:13.772 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90dc0a380> -[JTCaptureRequest init]\n2021-05-25 18:10:13.772 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90dc52b90> -[JTCaptureManager init]\n2021-05-25 18:10:13.788 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa910e946e0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-25 18:10:13.831 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa910e946e0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-25 18:10:13.835 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f136ed0> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-25 18:10:13.849 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9120fa7c0> -[JTCaptureViewController initWithFrame:screenImage:]\n2021-05-25 18:10:13.872 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9120fa7c0> -[JTCaptureViewController configAppearanceAndLayout]\n2021-05-25 18:10:13.876 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa911f2b280> -[JTCaptureWindowController registerForChangeThemeNotification]\n2021-05-25 18:10:13.981 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:10:13.981 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:10:13.981 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:10:13.981 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:10:13.981 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:10:13.982 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:10:16.786 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:10:16.786 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:10:16.786 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:10:16.786 WeChat[50323:8889328] _TIPropertyValueIsValid called with 4 on nil context!\n2021-05-25 18:10:16.786 WeChat[50323:8889328] imkxpc_getApplicationProperty:reply: called with incorrect property value 4, bailing.\n2021-05-25 18:10:16.786 WeChat[50323:8889328] Text input context does not respond to _valueForTIProperty:\n2021-05-25 18:10:18.261 WeChat[50323:8889328] <JTToolbarViewForDefault: 0x7fa912126e70> -[JTToolbarView configAppearanceAndLayout]\n2021-05-25 18:10:18.273 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa9121c6760> -[JTToolbarWindowController registerForChangeThemeNotification]\n2021-05-25 18:10:20.935 WeChat[50323:8889328] <JTPopoverView: 0x7fa911a2e6d0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:10:20.938 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91275cfe0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:10:20.944 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa912129200> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-25 18:10:20.944 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa912128e90> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-25 18:10:20.944 WeChat[50323:8889328] <JTPopoverMenuFontSizeButton: 0x7fa90de7db80> -[JTPopoverMenuFontSizeButton configAppearanceAndLayout]\n2021-05-25 18:10:20.944 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90f8e81a0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:10:20.946 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa90fac3790> -[JTPopoverWindowController registerForChangeThemeNotification]\n2021-05-25 18:10:20.949 WeChat[50323:8889328] <JTPopoverView: 0x7fa911a2e6d0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:10:20.950 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90f8e81a0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:10:20.951 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91275cfe0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:10:22.558 WeChat[50323:8889328] <JTPopoverView: 0x7fa911a2e6d0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:10:22.559 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90f8e81a0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:10:22.561 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91275cfe0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:10:22.568 WeChat[50323:8889328] <JTPopoverView: 0x7fa911a2e6d0> -[JTPopoverView configAppearanceAndLayout]\n2021-05-25 18:10:22.569 WeChat[50323:8889328] <JTPopoverFontSizeViewForWechat: 0x7fa90f8e81a0> -[JTPopoverFontSizeViewForWechat configAppearanceAndLayout]\n2021-05-25 18:10:22.571 WeChat[50323:8889328] <JTPopoverLineWidthView: 0x7fa91275cfe0> -[JTPopoverLineWidthView configAppearanceAndLayout]\n2021-05-25 18:10:25.450 WeChat[50323:8889328] <JTCaptureManager: 0x7fa90dc52b90> -[JTCaptureManager dealloc]\n2021-05-25 18:10:25.450 WeChat[50323:8889328] <JTCaptureRequest: 0x7fa90dc0a380> -[JTCaptureRequest dealloc]\n2021-05-25 18:10:25.451 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa911f2b280> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-25 18:10:25.451 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa9120fa7c0> -[JTCaptureViewController dealloc]\n2021-05-25 18:10:25.454 WeChat[50323:8889328] <JTCaptureWindowController: 0x7fa90f136ed0> -[JTCaptureWindowController unregisterForChangeThemeNotification]\n2021-05-25 18:10:25.454 WeChat[50323:8889328] <JTCaptureViewController: 0x7fa910e946e0> -[JTCaptureViewController dealloc]\n2021-05-25 18:10:25.457 WeChat[50323:8889328] <JTToolbarWindowController: 0x7fa9121c6760> -[JTToolbarWindowController unregisterForChangeThemeNotification]\n2021-05-25 18:10:25.462 WeChat[50323:8889328] <JTPopoverWindowController: 0x7fa90fac3790> -[JTPopoverWindowController unregisterForChangeThemeNotification]\n2021-05-25 18:10:28.038 WeChat[50323:8889328] Alive 20\n2021-05-25 18:12:08.077 WeChat[50323:8889328] Alive 25\n```\n我本并没有兴趣研究微信，但这是它崩溃后，重新启动时自动触发的一段命令行启动脚本，吸引了我的注意，随手记录一下。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1621937758004-5dd0b466-bb7b-4dcd-abaf-5b035b06e8d4.png#clientId=uc7331a08-8098-4&from=paste&height=826&id=u3248482e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=826&originWidth=1605&originalType=binary&size=422030&status=done&style=none&taskId=u8fa9e04a-2f39-4b74-8d63-95617d92a93&width=1605)\n"
  },
  {
    "id": 44981213,
    "title": "敏捷反对敏捷",
    "description": "今天是母亲节，我也是今天才得知母亲节的最初推动者现在正在推动反对母亲节。不用问原因是什么，一定是现在的母亲节的形式或者内容或者两者违背了最初推动的初衷。我昨天写了《程序员，困在敏捷里》，又大佬注意到了，告诉我，我所描述的这些现象，Bob 大叔在新作《敏捷整洁之道》中也痛斥了。于是我赶紧找到这本...",
    "custom_description": null,
    "updated_at": "2021-05-09T15:35:29.000Z",
    "created_at": "2021-05-09T15:35:29.000Z",
    "slug": "hvzpak",
    "word_count": 793,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1620573711262-db9d6b22-4578-407a-bdab-bb6017d9579c.png",
    "body": "今天是母亲节，我也是今天才得知母亲节的最初推动者现在正在推动反对母亲节。不用问原因是什么，一定是现在的母亲节的形式或者内容或者两者违背了最初推动的初衷。\n\n我昨天写了《[程序员，困在敏捷里](https://zhuanlan.zhihu.com/p/370768780)》，又大佬注意到了，告诉我，我所描述的这些现象，Bob 大叔在新作《敏捷整洁之道》中也痛斥了。于是我赶紧找到这本书，一口气读完了。\n\n书名原本叫《Clean Agile》，翻译为《敏捷整洁之道》，显然是延续了《Clean Code》的翻译，但是在我看来，这次的 Clean 是一个双关语，不仅是整洁的意思，更有清理门户的意思，这从本书的副标题得到了证实：正本清源。而 Bob 大叔是敏捷宣言的最初起草人之一，所以我觉得有点敏捷反对敏捷的意思。\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1620573711262-db9d6b22-4578-407a-bdab-bb6017d9579c.png#clientId=ue75a5554-bf29-4&from=paste&height=413&id=ue077423a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=826&originWidth=2066&originalType=binary&size=590685&status=done&style=none&taskId=ud349be1f-8570-4081-8cb9-5a5dd495af1&width=1033)\n\n敏捷的最初推动者们，本来是想解放程序员们的，结果被管理者剥去了核心，故意曲解而变成了进一步压榨剥削程序员的工具，因此 Bob 大叔看不下去了，写了《Clean Agile》来反对各种伪敏捷。注意，Bob 大叔是美国人，因此管理者用敏捷来压榨程序员并非中国特色，只能说是资本家特色。而 Bob 大叔就像是程序员界的马克思，我似乎听到他在《Clean Agile》里怒吼：全世界程序员，联合起来！\n\n<a name=\"etXZH\"></a>\n## 敏捷从来无关于快\n\n\n敏捷是用来戳破幻想的。这个幻想就是，软件开发中存在银弹，虽然《人月神话》里已经讽刺过这种想法，但是没用，于是敏捷想来戳破这个幻想，但是看来失败了。\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1620573742366-be670fa2-afc3-4cf6-9c7b-4c211abfe865.png#clientId=ue75a5554-bf29-4&from=paste&height=605&id=u0071f193&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1210&originWidth=2046&originalType=binary&size=1052519&status=done&style=none&taskId=ub7629292-d6ab-4a2e-a955-02bc4c069ec&width=1023)\n<a name=\"D6p1t\"></a>\n## 增加人手只会更慢\n\n\n同样《人月神话》里已经指出过。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1620573902346-f70d900d-baf7-4840-8ed6-d70db8896edd.png#clientId=ue75a5554-bf29-4&from=paste&height=490&id=u642bdb0d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=980&originWidth=1924&originalType=binary&size=479088&status=done&style=none&taskId=u784fb201-6a7a-4b94-95df-022df72909e&width=962)\n<a name=\"FbTf5\"></a>\n## 为什么不写测试？\n\n\n每次质疑团队中的成员，为什么不写测试，为什么有这么多重复代码？得到的回答往往是工期太紧，来不及。这背后隐含的逻辑是盲写烂代码的速度更快，或者说大佬们苦苦追求的高质量，难道是为了更慢？\n\nBob 大叔再次指出，提高质量是手段，目的正是为了更快。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1620573977160-acbc5cd2-845e-4453-bee0-1ced1e427e75.png#clientId=ue75a5554-bf29-4&from=paste&height=299&id=u72270132&margin=%5Bobject%20Object%5D&name=image.png&originHeight=597&originWidth=1908&originalType=binary&size=379060&status=done&style=none&taskId=ueef3ace7-b6f7-431d-99ca-7d4ae629036&width=954)\n<a name=\"Z2b00\"></a>\n## 学会拒绝\n\n\n否则就只是任人使唤的劳工，而非专业人士。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1620574201431-60d2c9b5-c36c-47db-b3e5-c6fba16d9e90.png#clientId=ue75a5554-bf29-4&from=paste&height=346&id=uab7db475&margin=%5Bobject%20Object%5D&name=image.png&originHeight=691&originWidth=1897&originalType=binary&size=535459&status=done&style=none&taskId=ub1fce6f3-0b87-40c2-b9fb-b7f5dfbbd75&width=948.5)<br />\n\n<a name=\"ciGYI\"></a>\n## 软件开发中的测不准原理\n\n\n交付日期越确定，那么能做完的任务范围就越不确定；而如果要做完的功能越没得商量，那么，交付日期就越不确定。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1620574256534-40d6b9b2-8716-4fbc-aa1c-e4928b370064.png#clientId=ue75a5554-bf29-4&from=paste&height=239&id=u06e71d4b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=477&originWidth=1888&originalType=binary&size=331566&status=done&style=none&taskId=ueb9c61b3-75e8-4191-9ade-d65c461b9ae&width=944)<br />\n\n<a name=\"easT2\"></a>\n## 不要做坏事\n\n\n咳咳，这可是 2020 年 7 月份出版的书，请不要做相关的联想。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1620574407288-5ea07fc5-fc28-4e66-8473-0cc2d7d6325a.png#clientId=ue75a5554-bf29-4&from=paste&id=u0b32d0ce&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1512&originWidth=1224&originalType=binary&size=789182&status=done&style=none&taskId=u3f3e1b77-fd4d-4e20-9140-cf7c89f021b)\n"
  },
  {
    "id": 44936407,
    "title": "程序员，困在敏捷里",
    "description": "一次次猝死事件新闻报导背后，是程序员已成为高危职业的讨论。一个在数字化转型领域制造了巨大价值的行业，为什么同时也是一个社会问题的制造者？为了找到这个问题的答案，程序员朱家瓦进行了多年的卧底观察，通过频繁跳槽辗转数个进行数字化转型的企业，全身心投入到包括初创公司、家族企业、科技巨头、国内大厂、知...",
    "custom_description": null,
    "updated_at": "2021-05-08T13:00:59.000Z",
    "created_at": "2021-05-08T13:00:59.000Z",
    "slug": "dmdxgq",
    "word_count": 1983,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1620476579618-7bfa966c-ec77-4411-ab36-5302f5afa70b.png",
    "body": "一次次猝死事件新闻报导背后，是程序员已成为高危职业的讨论。\n\n一个在数字化转型领域制造了巨大价值的行业，为什么同时也是一个社会问题的制造者？为了找到这个问题的答案，程序员朱家瓦进行了多年的卧底观察，通过频繁跳槽辗转数个进行数字化转型的企业，全身心投入到包括初创公司、家族企业、科技巨头、国内大厂、知名外企等等的技术团队的日常工作中，答案渐渐浮现。\n\n是的，文章明显模仿了《[外卖骑手，困在系统里](https://zhuanlan.zhihu.com/p/225120404)》，这真是一个讽刺，因为我曾经说过：《[我，不想做外卖员](https://zhuanlan.zhihu.com/p/350661159)》，因为做外卖员很危险。而讽刺在于，程序员本就是一个高危职业。\n\n文章不长，我试图通过对程序员朱家瓦同学所经历的不同团队实施的同一个敏捷流程进行简要解读，让更多程序员一起思考一个问题：数字化转型时代，敏捷究竟应该是一个怎样的存在？\n\n<a name=\"VaGfw\"></a>\n## 变化\n\n\n又有需求发生变更了，又有两小时的时间搭进了拉通会里。\n\n程序员朱家瓦清晰地记得，十几年前，敏捷开发还不太流行，但也会存在加班的情况，一般是在项目上线前一周。而据统计，到了 2018 年，90% 的软件开发都采用了敏捷，他所呆过的不同技术团队，也无一例外全部采用了敏捷开发，崇尚拥抱变化，持续发布（也就是项目持续上线），于是加班变得频繁了。从前，项目发布的间隔期以月计甚至以年为单位，但从采用敏捷流程开始，就变成以周、甚至天为单位。\n\n由于敏捷崇尚拥抱变化，因此开发团队不能再对需求变更持抵制态度。而且敏捷强调承诺精神，迭代开始承诺要做完的故事卡，就一定要做完。由于迭代期间产生的变化因素，以及敏捷所鼓励的频繁沟通，导致程序员往往一直在开会、讨论，只有在下班后才有时间写代码。\n\n一个迭代中，一个程序员并不只一次地临时要被拉进变更拉通会里。\n\n敏捷流程有能力有动力接连不断地吞掉写代码的时间，对于某些人来说，这是值得称颂的进步，是响应市场变化的体现 —— 鼓励在开发的任何阶段产生变化，敏捷流程减少了成本、降低了风险。Kent Beck 等人在敏捷宣言里表示：[响应变化高于遵循计划](https://agilemanifesto.org/iso/zhchs/manifesto.html)。他们说，这是更好的软件开发方法。\n\n而对于实践软件开发方法论进步的程序员而言，这却可能是疯狂且要命的。\n\n在敏捷流程里，故事点是最重要的指标，而延期是不被允许的，一旦发生，便意味着回顾、业务部门的不尊重，甚至被淘汰。有程序员抱怨自己和外卖员很像，虽然知道交通规则，但是不得不被逼着去违反。自己在写代码时，做得最多的就是放弃最佳实践，不断妥协。\n\n程序员们很难去对抗最终被分配的故事点，估点时如果出了比较大的数字，就需要解释。一旦解释，就会有人来“帮”你，最终大家就妥协了一个较小的数字。一位程序员告诉朱家瓦，他呆过好几个团队，不同的团队有不同的估点方法，点数也有不同的含义。但是最多的都是一点代表一天。虽然一个故事点的需求卡不算很复杂，但是完成的定义（Definition of Done）内涵特别丰富。因此要在一天完成的前提是没有打扰，屁股不能从工位上挪开一次。\n\n不写测试、重复代码、完全没有文档（项目的 README 都没有）、代码复审流于形式……在优秀程序员朱家瓦同学看来，这些举动无异于反模式，但却是程序员们长期在敏捷流程的控制与规训之下做出的不得已的代码实践，而这种反模式的直接后果就是 —— 程序员陷入软件焦油坑的概率急剧上升，从而造成更多加班的恶性循环。\n\n<a name=\"vRrlU\"></a>\n## DevOps \n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1620476579618-7bfa966c-ec77-4411-ab36-5302f5afa70b.png#clientId=u6cb108cb-01f0-4&from=paste&id=uc88f7454&margin=%5Bobject%20Object%5D&name=image.png&originHeight=472&originWidth=720&originalType=binary&size=62802&status=done&style=none&taskId=u90735856-ff02-42a2-925b-6017c2c3065)<br />软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运维工作必须紧密合作。敏捷开发的拥抱变化使得强调稳定的运维人员不得不走出舒适区。DevOps 理念很棒，但是现实很骨感。脆弱难用的工具链，让程序员不得不深入了解运维细节，使得程序员的日子雪上加霜。\n\n<a name=\"WeKNt\"></a>\n## 测试左移\n\n\n测试左移，号称给程序员赋能，就是说测试同学给程序员赋与一种似乎他们本来不会的能力，让他们有能力去完成测试。比如降低测试门槛、使用测试工具（自动化）、培养测试意识。然而现实就是一种去掉专门的测试人员的实践。朱家瓦同学呆过的团队中，测试人员总是不足，甚至有的团队完全没有测试人员，全部由程序员自己保证质量，美名其曰：敏捷测试之道。\n\n<a name=\"Di22I\"></a>\n## 有限游戏\n作为现实中的敏捷体验者，朱家瓦同学很想对所有的业务方提出一个建议：可以让所有的业务方和 Scrum Master 们都去当一个月程序员，这样，他们才会知道敏捷流程对程序员的压迫有多么严重。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1620477729224-bf106647-a019-411b-be84-ca654cb6105f.png#clientId=u6cb108cb-01f0-4&from=paste&id=u1c16cd64&margin=%5Bobject%20Object%5D&name=image.png&originHeight=865&originWidth=581&originalType=binary&size=101088&status=done&style=none&taskId=u67a06b71-fc9b-448b-8c95-4f45ded1724)<br />敏捷中的程序员们，其实和外卖骑手一样，都急着把东西在 Deadline 前成功 Deliver 出去，猛踩油门，闯红灯，抄近道，但是干扰项很多，天气、拥挤的人流……<br />\n<br />敏捷中的程序员们就像疯狂的司机，一直在危险驾驶、疲劳驾驶。这显然不可持续，只是一个有限游戏，出事儿是必然的，下场是悲惨的。\n\n造成这种结果的原因，朱家瓦同学很困惑，要么是敏捷方法本身不对，要么大家对敏捷的理解不到位。\n\n但是，朱家瓦同学只想告诫各位程序员：就算周围的司机们开车多么野，作为看到此文并且读到最后的你，希望你安全驾驶，做个专业的程序员，敢于说不，谨慎承诺。就算你在伪敏捷团队中生存不下去，但是你能避免猝死。只要你能避免猝死，活得长久，就有可能将程序员的职业从青春饭变成无限游戏。\n"
  },
  {
    "id": 44093598,
    "title": "我活好，但大厂不要",
    "description": "明明我活这么好，偏偏大厂就是不要？这是一个困扰我多年的问题：我活好要价又低，可大厂就是不要。今天无意中听了一场郑大的直播，突然受到启发，知道原因了。我的故事我面过好几次阿里的职位，有好几次都走到最后的 HR 面了，但就是从没有拿到过 Offer。其中最让我不可思议的一次是，几年前阿里文娱一个高...",
    "custom_description": null,
    "updated_at": "2021-04-22T12:10:57.000Z",
    "created_at": "2021-04-22T12:10:57.000Z",
    "slug": "ml2psw",
    "word_count": 2651,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1619090113625-cbc78ba7-459f-4c67-bef1-042c2476d85b.png",
    "body": "> 明明我活这么好，偏偏大厂就是不要？\n\n这是一个困扰我多年的问题：我活好要价又低，可大厂就是不要。今天无意中听了一场郑大的直播，突然受到启发，知道原因了。<br />\n\n<a name=\"rL5Ht\"></a>\n## 我的故事\n\n<br />我面过好几次阿里的职位，有好几次都走到最后的 HR 面了，但就是从没有拿到过 Offer。其中最让我不可思议的一次是，几年前阿里文娱一个高 P 通过 github 找到我的联系方式，说是看了我的个人项目以及代码提交记录，觉得我很不错，问我有没有意向考虑阿里的机会。我那时在一个创业小厂，一个人要干很多人的活，比 996 还狠，关键还经常拿不到工资，苦于没有好的机会，当然一口答应下来。<br />\n<br />但是，我也没有非常猴急，而是问了具体的项目情况。了解到是音视频相关，而且最近很着急做一个视频弹幕方案，我说能不能给我两天时间，我做一个 demo，再参加面试？面试官觉得这个态度很好，也答应了，并加了我的微信。两天后，我把做好的 demo 链接（[https://ass-editor.js.org/](https://ass-editor.js.org/)）通过微信发给了面试官，面试官看了后非常满意，并约了第二天的正式电话面试时间。<br />\n<br />我当时非常激动，觉得这个职位就是给我准备的，面试官明确表示了这个 demo 正是他们想要的，所以这是我的面试历史中，感到最有信心的一次。但是没有想到，我最有信心的一次面试，结果竟然终止于一面，连二面的机会都没有拿到！<br />\n<br />第二天，电话面试开始，面试官首先就告诉我，说把 demo 给他的主管看了，主管也感到非常满意！我听了开心极了，以为 Offer 唾手可得了。接下来，面试官说还是需要问一些技术问题，以做个全面考察。面试官非常有耐心，各种启发式提问，给我充足的时间思考，足足聊了一个小时。<br />\n<br />但是具体什么问题，我现在已经不记得了，因为完全不懂，根本不在我的涉猎范围内。但是面试官非常客气和礼貌，只是让我等通知。挂完电话我心想，虽然各种知识点都没有答上来，但是我的 demo 做得这么好，面试官可能在和主管沟通中会帮我争取一下，然后等几天后就接到他主管的面试电话了。没想到，挂完面试电话没过几分钟，就有 HR 打电话来，通知我面试失败！<br />\n<br />我懵了……<br />\n<br />后来我多次回想起这件事，越想越不能理解。虽然很多问题答不上来，但是我活好呀：遵循好的工程实践比如自动化部署、测试驱动开发。两天时间搞定最小可用产品并上线，代码放在 github 上，完全没有推广的情况下，得到 21 颗星，和 9 个 fork。这么棒的开发工程师，怎么连二面机会都没有拿到呢！<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1619090113625-cbc78ba7-459f-4c67-bef1-042c2476d85b.png#clientId=u76a68c61-5e44-4&from=paste&height=632&id=uf0a0a213&margin=%5Bobject%20Object%5D&name=image.png&originHeight=632&originWidth=1230&originalType=binary&size=78222&status=done&style=none&taskId=u84707254-605c-4595-9315-1f131e75915&width=1230)<br />\n\n<a name=\"NtMx4\"></a>\n## 别人的故事\n\n<br />**我活好，但大厂不要。**为什么？这难道是我一个人的困惑？非也，我后来发现别人也有同样的困惑。TDD 是程序员的专业素养（参见《代码整洁之道》），有很多 TDD 的拥趸们，为自己的 TDD 技能感到自豪，但同时又苦于大厂根本就不看重自己所自豪的地方。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1619090557472-b5a3108b-7e77-4844-a807-93f5e95fa556.png#clientId=u76a68c61-5e44-4&from=paste&height=516&id=uaeca6ad2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=516&originWidth=930&originalType=binary&size=86915&status=done&style=none&taskId=u79c67de0-8e24-4990-baf5-9377784e584&width=930)<br />难道是阿里的独特之处？非也，比如这位牛人，所有项目都达到近乎 100% 测试覆盖率（SonarQube 扫描结果）以及全部代码质量都在 A 的那种，去面试了腾讯，结果只通过了一面：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1619090970705-fa43c8b2-65b4-438d-99ca-481f79e72458.png#clientId=u76a68c61-5e44-4&from=paste&height=592&id=u37bd4e87&margin=%5Bobject%20Object%5D&name=image.png&originHeight=592&originWidth=958&originalType=binary&size=255699&status=done&style=none&taskId=u0facc913-8bdd-4fb1-bb1a-f564a43ee4e&width=958)\n<a name=\"ueiFk\"></a>\n## 为什么明明活好大厂却不要？\n\n<br />听了郑大的直播，听到郑大总结的一类老程序员，不能区分知识和技能，总是用自己的技能去理解知识，因此总是得不到提升（不记得原话，大意如此）。比如业界在长时间里总结出来的优秀设计模式沉淀下来，就属于知识。这类老程序员不愿意去学习，而是习惯于自己在实践中摸索，形成一套渐进于业界的标准设计模式，但是又不到位。这个总结让我顿悟了：<br />\n\n<a name=\"OIXMe\"></a>\n### 活好，只能证明你的技能；但是大厂，往往更注重对知识的考察。\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1619091836483-fad23953-c877-4f06-a766-2ed6975d4cdd.png#clientId=u76a68c61-5e44-4&from=paste&height=624&id=LL9cU&margin=%5Bobject%20Object%5D&name=image.png&originHeight=624&originWidth=1294&originalType=binary&size=103317&status=done&style=none&taskId=ue4b4e204-4b29-4335-925d-52b03cc39ac&width=1294)<br />比如有人质疑过微软总是喜欢问各种算法，说如果有人把所有的算法背下来，既背下来实现代码，还背下来他们的复杂度、优劣区别等等，不是很容易通过你们的面试吗？微软给出的回答是：如果真有这样的候选人，那么肯定是我们要找的人。<br />\n<br />虽然有很多相反类型的人，只知道学知识，却不注重运用和练习，没有消化成自己的，于是就又忘记了，没有什么用。但是**作为程序员，更应该小心自己走到另一个极端**，就是太注重练习和不断提高自己在某方面的技能，却极少花时间学其他知识，于是坐井观天，对自己的局限性没有认知。不仅进不了大厂，在小厂里也长年没有提升。<br />\n<br />Bob 大叔做程序员做到 70 多岁，还在持续为业界作出贡献并且拥有极大的影响力，但是很多程序员到了 35 岁甚至 30 岁就开始焦虑自己的职业生涯，很大原因就是**只提高自己的技能，却忽视了扩展自己的知识面。**<br />\n\n<a name=\"Orj3W\"></a>\n## 总结\n\n<br />还是用 Bob 大叔的《代码整洁之道》中的关于**坚持学习**的一段话来总结吧（练习同样重要，书里也有同样强调，但本文是专门写给活好的程序员的，略去练习部分）： <br />\n\n> 你知道什么是N-S（Nassi-Schneiderman）图表吗？如果不知道，那为什么不了解一下呢？你知道“米利型”（Mealy）和“摩尔型”（Moore）这两种状态机的差别吗？你应该知道的。你能不需查阅算法手册就可写出一个快速排序程序吗？你知道“变换分析”（Transform Analysis）这个术语的意思吗?你知道如何用数据流图进行功能分解吗？你知道“临时传递数据”（Tramp Data）的意思吗？你听说过“耦合性”（Conascence）吗？什么是Parnas表呢？\n> \n\n> 近50年来，各种观点、实践、技术、工具与术语在我们这一领域层出不穷。你对这些了解多少呢？如果想成为一名专业开发者，那你就得对其中的相当一大部分有所了解，而且要不断扩展这一知识面。\n> \n\n> 下面列出了**每个**专业软件开发人员**必须精通**的事项。\n> \n\n> 设计模式。必须能描述GOF书中的全部24种模式，同时还要有POSA书中的多数模式的实战经验。\n> 设计原则。必须了解SOLID原则，而且要深刻理解组件设计原则。\n> 方法。必须理解XP、Scrum、精益、看板、瀑布、结构化分析及结构化设计等。\n> 实践。必须掌握测试驱动开发、面向对象设计、结构化编程、持续集成和结对编程。\n> 工件。必须了解如何使用UML图、DFD图、结构图、Petri网络图、状态迁移图表、流程图和决策表。\n> \n\n> 读书，看相关文章，关注博客和微博，参加技术大会，访问用户群，多参与读书与学习小组。不懂就学，不要畏难。如果你是.NET程序员，就去学学Java；如果你是Java程序员，就去学学Ruby；如果你是C语言程序员，就去学学Lisp；如果你真想练练脑子，就去学学Prolog和Forth吧！\n> \n\n> —— [美] Robert C. Martin《代码整洁之道：程序员的职业素养》\n\n<a name=\"ZjvpA\"></a>\n## \n<a name=\"F2Hjt\"></a>\n## 我的故事后续\n\n<br />看了我的那段最有信心然而惨败的面试经历，有人一定会追问，难道就没有找面试官了解详情吗？当然有，毕竟我们都相互加了微信，而且成了朋友圈的点赞之交，还是有些沟通的。甚至有一次他来上海玩，我还约了和他在星巴克喝了杯咖啡。他给我的反馈是，根据我的资历，他们期待我达到 P7，但是面试评定下来，只到 P6+，还是差了点。我当时还在某创业小厂，已经几个月没拿到工资了，我说给我 P6 也行啊。他说大可不必，让我千万不要自降身价。然后说在阿里的程序员，不懂 Java 的确少见，不太适合，但是别的地方也许可以。<br />\n<br />写到这儿，我很惭愧，竟然一直没有去学习 Java。就此打住，我要去学习 Java 了，以及好好研究 SpringCloud，有兴趣一起学习的程序员朋友，欢迎加我微信共同进步：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1619093316177-66d056b7-8afe-42b8-bbf8-877c9edb76c9.png#clientId=u76a68c61-5e44-4&from=paste&height=430&id=ubcee7cff&margin=%5Bobject%20Object%5D&name=image.png&originHeight=430&originWidth=430&originalType=binary&size=75332&status=done&style=none&taskId=u1aea9ec9-8b59-4514-ace9-3f52649cf4a&width=430)\n"
  },
  {
    "id": 44086005,
    "title": "【解决】jest 跑测试时找不到模块",
    "description": "【症状】项目配置了对模块的基于项目根目录的绝对路径引用方式，也可以正常跑起来，但是在跑测试时却碰到找不到模块的错误：➜ yarn test:e2eyarn run v1.22.10$ jest --config ./test/jest-e2e.json FAIL  test/app.e2e-s...",
    "custom_description": null,
    "updated_at": "2021-04-22T07:02:40.000Z",
    "created_at": "2021-04-22T07:02:40.000Z",
    "slug": "zvqg3g",
    "word_count": 400,
    "cover": null,
    "body": "<a name=\"BzYlf\"></a>\n## 【症状】\n项目配置了对模块的基于项目根目录的绝对路径引用方式，也可以正常跑起来，但是在跑测试时却碰到找不到模块的错误：\n```shell\n➜ yarn test:e2e\nyarn run v1.22.10\n$ jest --config ./test/jest-e2e.json\n FAIL  test/app.e2e-spec.ts\n  ● Test suite failed to run\n\n    Cannot find module '@/utils/aws.service' from '../src/app-bff-module.ts'\n\n    Require stack:\n      /Users/path/to/your/project/src/app-bff-module.ts\n      app.e2e-spec.ts\n\n       5 |\n       6 | import config from './config/index'\n    >  7 | import { AWSService } from '@/utils/aws.service'\n         | ^\n       8 | import { EngagementModule } from '@/domains/engagement/engagement.module'\n       9 |\n      10 | @Module({\n\n      at Resolver.resolveModule (../node_modules/jest-resolve/build/index.js:306:11)\n      at Object.<anonymous> (../src/app-bff-module.ts:7:1)\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        9.649 s\nRan all test suites.\nerror Command failed with exit code 1.\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\n```\n<a name=\"jhDbB\"></a>\n## 【原因分析】\n项目配置了对模块的基于项目根目录的绝对路径引用，减少了因为相对路径带来的不一致困扰。这是通过 `tsconfig.json`文件配置的，比如：\n```json\n{\n  \"compilerOptions\": {\n    ...\n    \"paths\": {\n      \"@/*\": [\n        \"src/*\"\n      ]\n    }\n  },\n  ...\n}\n  \n```\n但是看起来 jest 跑起来时并未自动解析 `tsconfig.json`，通过查看 `package.json`中的命令可以看出，跑测试时读取了 `jest-e2e.json`这个文件：\n```json\n{\n  ...\n  \"scripts\": {\n    ...\n    \"test:e2e\": \"jest --config ./test/jest-e2e.json\",\n    ...\n  }\n  ...\n}\n```\n于是，推测应该将基于项目根目录的绝对路径引用方式配置到 `jest-e2e.json`文件中。\n<a name=\"Ob1pF\"></a>\n## 【解决】\n打开 `test/jest-e2e.json`文件，加入如下配置：\n```json\n{\n  ...\n  \"rootDir\": \"..\",\n  \"moduleNameMapper\": {\n    \"@/(.*)\": \"<rootDir>/src/$1\"\n  }\n  ...\n}\n```\n注意，由于这个文件在 `test`目录下，所以其项目根目录的配置应该为上层目录：\"..\"。<br />重新运行 `yarn test:e2e`，成功！\n"
  },
  {
    "id": 42416447,
    "title": "机器学习之 AWS DeepRacer 初体验",
    "description": "机器学习这门科学所关注的问题是：计算机程序如何随着经验积累自动提高性能。近年来，机器学习被成功地应用于很多领域，从检测信用卡交易欺诈的数据挖掘程序，到获取用户阅读兴趣的信息过滤系统，再到能在高速公路上自动行驶的汽车。—— 美·Tom M. Mitchell 著《机器学习》 CIP 数据核字（2...",
    "custom_description": null,
    "updated_at": "2021-04-11T05:21:00.000Z",
    "created_at": "2021-04-11T05:08:15.000Z",
    "slug": "hk1ggb",
    "word_count": 3283,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1618056524073-12af5ea4-c4e7-4f73-8408-97cccac59356.png",
    "body": "> 机器学习这门科学所关注的问题是：计算机程序如何随着经验积累自动提高性能。近年来，机器学习被成功地应用于很多领域，从检测信用卡交易欺诈的数据挖掘程序，到获取用户阅读兴趣的信息过滤系统，再到能在高速公路上自动行驶的汽车。\n> \n\n> —— 美·Tom M. Mitchell 著《机器学习》 CIP 数据核字（2002）第 077094 号\n\n<a name=\"MvCtg\"></a>\n## <br />\n<a name=\"hI5gT\"></a>\n## 先炫耀一下\n\n\n看起来，机器学习应用于自动驾驶，至少也有 20 多年历史了。但是直到上周五，我才有幸第一次零距离参与了一把。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618056524073-12af5ea4-c4e7-4f73-8408-97cccac59356.png#align=left&display=inline&height=944&margin=%5Bobject%20Object%5D&name=image.png&originHeight=944&originWidth=1080&size=778992&status=done&style=none&width=1080)<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618058503380-dfc8bba6-acce-45bf-91e1-7e4fb84c2372.png#align=left&display=inline&height=617&margin=%5Bobject%20Object%5D&name=image.png&originHeight=617&originWidth=1080&size=1058497&status=done&style=none&width=1080)<br />\n<br />昨天有幸参加了亚马逊云科技的“机器学习及自动驾驶体验日”活动，并且所在小组 Alpha Car 在比赛中竟以微弱优势拿了冠军。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618056602018-4a19bf06-00a1-4a3d-80d9-aba8abd05f30.png#align=left&display=inline&height=1080&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1080&originWidth=1623&size=1416824&status=done&style=none&width=1623)<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618058169172-7b9a9baf-ff33-458f-9904-ca28b17eeeed.png#align=left&display=inline&height=1080&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1080&originWidth=1623&size=2592982&status=done&style=none&width=1623)<br />\n<br />还领到一张很有逼格的奖状：<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618058269554-d0a0b5ff-5f54-46e3-8039-e308d6e92f1f.png#align=left&display=inline&height=1080&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1080&originWidth=1440&size=1897260&status=done&style=none&width=1440)\n<a name=\"EMUcY\"></a>\n## \n<a name=\"vTFL5\"></a>\n## 感恩\n\n\n> 职业程序员用自己的时间来练习。老板的职责不包括避免你的技术落伍，也不包括为你打造一份好看的履历。医生练习手术不需要病人付钱，球员练习绕桩（通常）不需要球迷付钱，乐手练习音阶也不需要乐迷付钱。所以老板没有义务为程序员的练习来买单。\n> \n\n> —— 【美】Robert C. Martin 《代码整洁之道：程序员的职业素养》\n\n\n<br />Bob 大叔在强调程序员的专业素养时指出，保持自己的学习跟上时代节奏，是自己的责任，而且应该在业余时间完成，而不应该占用雇主的时间，也不应该期待雇主支付相关的费用。<br />\n<br />虽然如此，仍然有雇主会在工作日给员工提供培训的机会，甚至花费大量金钱。对这样的雇主，我心存感激！<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618115298138-ad929fea-854f-426e-bc20-96e617c78972.png#align=left&display=inline&height=718&margin=%5Bobject%20Object%5D&name=image.png&originHeight=718&originWidth=1080&size=1150076&status=done&style=none&width=1080)<br />\n\n<a name=\"VZjV8\"></a>\n## AWS DeepRacer 简介\n\n<br />官网：[https://aws.amazon.com/cn/deepracer/?nc2=type_a](https://aws.amazon.com/cn/deepracer/?nc2=type_a)<br />\n<br />使用 AWS DeepRacer，可以在云上进行自动驾驶赛车训练，随后既可以参加线上虚拟赛车，也可以将训练好的赛车模型导出为压缩文件，上传至真正的 AWS DeepRacer 赛车上，在真实跑道上进行比赛。<br />\n<br />它号称各种技能水平的开发人员都可以通过其基于云的 3D 赛车模拟器亲身体验机器学习，我实际体验下来，发现 AWS 真的做到了！最大的感受是，DeepRacer 整个系统解耦做得相当漂亮，多数步骤都使用界面引导，唯一需要写代码的部分，就是奖励函数，采用 Python 编码，相当简单，的确对于开发菜鸟，也能使用！<br />\n<br />你可以参加免费的在线培训：[https://www.aws.training/Details/eLearning?id=32143](https://www.aws.training/Details/eLearning?id=32143)，学完也可以拿一个很有逼格的结业证书，像这样：<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618109721016-545effe8-32c8-4b8b-82cf-e2fe3f3a3b74.png#align=left&display=inline&height=1416&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1416&originWidth=2048&size=207166&status=done&style=none&width=2048)<br />\n\n<a name=\"Ge0Zx\"></a>\n## 机器学习问题的标准描述\n\n<br />首先看一下机器学习的严格定义：对于某类任务 **T** 和性能度量 **P**，如果一个计算机程序在 **T** 上以 **P** 衡量的性能随着经验 **E** 而自我完善，那么我们成这个计算机程序在从经验 **E** 中**学习**。<br />\n<br />比如对于 AWS 的 DeepRacer 中的计时赛，就是这样一个机器人驾驶学习问题：<br />\n\n- 任务 **T**：通过视觉传感器在赛车道上行驶\n- 性能标准 **P**：无差错行驶指定圈数所花费的时间（时间越短越好，行驶过程中不能出轨道）\n- 训练经验 **E**：使用模型中配置好的驾驶指令在 AWS DeepRacer 提供的 3D 赛车赛道上进行驾驶\n\n\n<br />简而言之，机器学习就是“**通过经验提高性能的某类程序**”。<br />\n\n<a name=\"EZgFu\"></a>\n## 机器学习的一般套路\n\n<br />通过使用 AWS DeepRacer，你可以毫不费力地亲身体验到机器学习的一般套路，而且生动，令人难忘。<br />\n\n<a name=\"hDItf\"></a>\n### 选择训练经验\n\n<br />这是机器学习系统面临的第一个设计问题，在 AWS DeepRacer 中，预设计了各种赛道，你只需要点击选择就好。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618061079851-44fcb559-7725-4d0c-b8e6-5f8bd14b5d22.png#align=left&display=inline&height=7608&margin=%5Bobject%20Object%5D&name=image.png&originHeight=7608&originWidth=1532&size=1887149&status=done&style=none&width=1532)<br />\n<br />具体地说，AWS DeepRacer 采用的强化学习方法，赛道信息在其中被称为环境，也就是轨道。轨道中定义了赛车可以走动的地方，以及被允许的状态。赛车在轨道中探索并搜集数据，这些被搜集的数据就被用作底层神经网络的训练经验。<br />\n\n<a name=\"gIJBo\"></a>\n### 选择目标函数\n\n<br />这是机器学习系统面临的第二个设计选择，它需要决定要学习的知识的确切类型以及执行程序怎样使用这些知识。对于赛车问题，由于只要不出轨道，前进方向正确，都是被允许的驾驶方式，最终的程序只要并且必须学会从所有的驾驶方式中选择最快速跑完指定圈数的驾驶策略。很明显，要学习的信息类型就是一个程序或者函数，该函数以赛车在轨道中所处的状态作为输入，并且从所有被允许的驾驶策略中产生某个驾驶行为作为输出。即 **V**: State -> Result。如前面所介绍的，这个函数被体现为奖励函数，是唯一需要写点代码的部分。<br />\n<br />这个函数写起来虽然简单，但却是产生好的结果的关键所在。根据我的体验，这个函数并不是越复杂越好，相信也没有人能预先写出最佳的奖励函数，一定是各种摸索，最终找到一个最好的，而且在未来被更好的奖励函数打败也是很正常的。<br />\n<br />具体来说，对于任意的赛车状态，奖励函数的准确值应该是多少呢？最简单的做法是不管什么状态，总是给予奖励。这显然不会产生好的结果；也许你会想到，应该奖励行进在轨道中间，离中线不要太远的驾驶行为。要写出自己想要的奖励函数，需要先了解一下 AWS DeepRacer 都提供了哪些赛车状态参数、可以产生哪些具体的驾驶行为以及奖励函数在 AWS DeepRacer 中的具体体现形式。\n\n如前所述，在 AWS DeepRacer 中，奖励函数是一段 Python 代码，它可以读取描述当前状态的参数，并返回一个奖励数值。参数描述了赛车状态的不同方面，比如位置、在轨道中的朝向、速度、转角等等。\n\n所谓状态，就是赛车所在的环境在指定时刻的快照，即赛车的前置摄像头所捕获的图片。AWS DeepRacer 系统可以为奖励函数提供的参数一共有 13 种：\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618106779003-123ff8ff-b903-40b1-9fc6-57ffe11ac976.png#align=left&display=inline&height=405&margin=%5Bobject%20Object%5D&name=image.png&originHeight=405&originWidth=720&size=39022&status=done&style=none&width=720)\n\n1. `x` and \n1. `y<br />`赛车在轨道上的位置<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618063138235-5bdcee6f-f485-4f69-b559-bb387db7cd3c.png#align=left&display=inline&height=900&margin=%5Bobject%20Object%5D&name=image.png&originHeight=900&originWidth=1054&size=83286&status=done&style=none&width=1054)\n1. `heading<br />`赛车在轨道上的朝向<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618101215709-b80ee8c9-f577-4f96-8671-8b353ed5495d.png#align=left&display=inline&height=604&margin=%5Bobject%20Object%5D&name=image.png&originHeight=604&originWidth=814&size=44809&status=done&style=none&width=814)\n1. `waypoints`<br />航路点坐标列表<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618063099341-0b93619b-29b2-455b-98fc-9990b338348f.png#align=left&display=inline&height=566&margin=%5Bobject%20Object%5D&name=image.png&originHeight=566&originWidth=816&size=74532&status=done&style=none&width=816)\n1. `closest_waypoints`<br />赛道上离赛车最近的 2 个航路点\n1. `progress`<br />跑完的轨道部分百分比\n1. `steps` 完成的步数<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618112811092-b6c61e8d-c87c-4a35-b54c-4f67b0ac7de7.png#align=left&display=inline&height=1822&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1822&originWidth=2998&size=1772231&status=done&style=none&width=2998)\n1. `track_width` <br />轨道宽度<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618063039534-552dd093-3c87-414a-983d-c4bceb1b81c5.png#align=left&display=inline&height=1110&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1110&originWidth=634&size=71530&status=done&style=none&width=634)\n1. `distance_from_center` <br />偏离轨道中线的距离<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618063020926-c6b1adda-c0d4-4d4c-96c1-637eb0f9b009.png#align=left&display=inline&height=1138&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1138&originWidth=652&size=77152&status=done&style=none&width=652)\n1. `is_left_of_center` <br />赛车是否在中线左边？\n1. `all_wheels_on_track` <br />赛车是否完全处于轨道界内？<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618063002298-20509d8a-2c34-48e2-9d5d-60b580d40f4d.png#align=left&display=inline&height=567&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1134&originWidth=648&size=80025&status=done&style=none&width=324) ![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618101515924-83c73f12-2d63-4198-8ea5-45d8168415c0.png#align=left&display=inline&height=566&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1132&originWidth=648&size=87977&status=done&style=none&width=324)\n1. `speed` <br />赛车车速<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618062967759-5207c2d8-ccd8-4a4c-9532-3731cd5f705c.png#align=left&display=inline&height=1120&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1120&originWidth=676&size=90973&status=done&style=none&width=676)\n1. `steering_angle` <br />前轮方向盘转角 <br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618062948608-9f4e36a7-0260-47d1-809c-65e5a57e0f1b.png#align=left&display=inline&height=1124&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1124&originWidth=686&size=81299&status=done&style=none&width=686)\n\n\n\n如前所述，你可以根本就不使用这些参数，全部情况下都给予奖励。或者利用全部的参数，但是并不一定就有好的结果。我在实验时，选择了对靠中线，以及不出界的情况给予奖励，奖励函数代码如下：\n\n<a name=\"O73PX\"></a>\n### ![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618101865809-39e94ce2-74bd-4dd6-b66f-a3ad325dcb54.png#align=left&display=inline&height=1110&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1110&originWidth=1482&size=191139&status=done&style=none&width=1482)\n编辑完奖励函数，就可以开始训练了，训练过程中可以查看过程详情：<br />![screencapture-console-aws-amazon-deepracer-home-2021-04-09-11_42_38.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618118388570-5773cd15-7050-48ac-93f4-91a518d5224a.png#align=left&display=inline&height=3804&margin=%5Bobject%20Object%5D&name=screencapture-console-aws-amazon-deepracer-home-2021-04-09-11_42_38.png&originHeight=3804&originWidth=3840&size=2036307&status=done&style=none&width=3840)\n<a name=\"8I9Fz\"></a>\n### <br />选择目标函数的表示\n\n\n前面一步的目标函数是形如** V**:** **State -> Result 的形式，即从当前状态可以映射称一个结果（好或者坏）。这是一个理想的函数，实际上只能得到 ![](https://cdn.nlark.com/yuque/__latex/6d06db0dc1d8f0f84c81e5a8e6d5ae9e.svg#card=math&code=%5Chat%7BV%7D%20&height=20&width=12) ，一个 **V** 的估计。学习的过程就是尽量较少估计值 ![](https://cdn.nlark.com/yuque/__latex/6d06db0dc1d8f0f84c81e5a8e6d5ae9e.svg#card=math&code=%5Chat%7BV%7D%20&height=20&width=12) 和理想值 **V **的误差的过程。\n\n这个具体的表示不用关心，只需要知道底层是一个 CNN 网络就行，具体表示可以理解为一个加权平均函数。也就是说，AWS DeepRacer 使用了一个 CNN 网络，然后通过类似加权平均这样的计算，努力使得这个结果值，和奖励函数的返回值接近。\n\n权重就是学习过程所要调整的数值，而参数除了上面介绍的 13 个状态参数外（模型之内），还有超参数（模型之外）。超参数是人工调整的，而模型参数则是学习过程自动调整的。所以机器学习，实际上是人机共同学习。机器学习负责模型参数的调整，有各种算法，但是归根结底是一种试错改进法。同样，需要人工调整的超参数，也是人通过试错调整的方式，慢慢改进得到的较好的值。\n\n<a name=\"OQa3c\"></a>\n### 选择函数逼近算法\n\n<br />这个算法的根本目的在于逐步减小目标函数估计值和理想值的误差，关键在于更新权值的策略。大致做法是从任意指定的初始权值开始，使用目标函数的具体表示计算出 ![](https://cdn.nlark.com/yuque/__latex/6d06db0dc1d8f0f84c81e5a8e6d5ae9e.svg#card=math&code=%5Chat%7BV%7D%20&height=20&width=12)，然后计算 **V** 和  的误差。注意这个 **V** 是奖励函数的返回值，因此实际奖励和实际模型拟合出的结果的误差就能指导学习过程去调整权重。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618110981190-450830b1-4593-49a0-981a-053b27e9867a.png#align=left&display=inline&height=751&margin=%5Bobject%20Object%5D&name=image.png&originHeight=751&originWidth=1098&size=170406&status=done&style=none&width=1098)<br />AWS DeepRacer 支持两种算法，默认选项是 Huber 算法，你也可以改成均方差算法。他们的区别是均方差算法带来的权值改动会使得误差波动更大，因此收敛性会逊于 Huber。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618111089037-ead748e8-9bc3-42e6-86e1-3710b599231a.png#align=left&display=inline&height=1714&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1714&originWidth=3212&size=1149403&status=done&style=none&width=3212)\n<a name=\"LgzAW\"></a>\n### \n<a name=\"SKvew\"></a>\n### 最终设计\n\n<br />任何机器学习系统，最终会包含如下几个核心模块：<br />\n\n![](https://cdn.nlark.com/yuque/__puml/64bc8ec083c10d07227192f9f4b9c1d9.svg#lake_card_v2=eyJjb2RlIjoiQHN0YXJ0dW1sXG5zdGF0ZSBcIuWunumqjOeUn-aIkOWZqFwiIGFzIGdlbmVyYXRvclxuc3RhdGUgXCLms5vljJblmahcIiBhcyBnZW5lcmFsaXplclxuc3RhdGUgXCLpibTlrprlmahcIiBhcyByZXdhcmRlclxuc3RhdGUgXCLmiafooYzns7vnu59cIiBhcyBleGVjdXRvclxuIFxuZ2VuZXJhdG9yIC1yaWdodC0-IGV4ZWN1dG9yOiDmlrDpl67popjvvIjotZvpgZPvvIlcbmV4ZWN1dG9yIC1kb3duLT4gcmV3YXJkZXI6IOino-etlOi3r-e6v1xucmV3YXJkZXIgLWxlZnQtPiBnZW5lcmFsaXplcjog6K6t57uD5qC35L6L77yI5pGE5YOP5aS05o2V6I6355qE5Zu-5YOPXFxu5Lul5Y-K5a-55bqU55qE5a6e6ZmF5aWW5Yqx77yJXG5nZW5lcmFsaXplciAtdXAtPiBnZW5lcmF0b3I6IOWBh-iuvu-8iOaooeWei-aLn-WQiOe7k-aenO-8iVxuQGVuZHVtbCIsInR5cGUiOiJwdW1sIiwibWFyZ2luIjp0cnVlLCJpZCI6Im44QTVQIiwidXJsIjoiaHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlL19fcHVtbC82NGJjOGVjMDgzYzEwZDA3MjI3MTkyZjlmNGI5YzFkOS5zdmciLCJjYXJkIjoiZGlhZ3JhbSJ9)\n<br />AWS DeepRacer 采用了机器学习中的强化学习方法，这是区别于**有监督学习**和**无监督学习**之外的，第三种机器学习类型，其设计如下：<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1618113266705-1acaa97f-fbcf-4c07-abd1-fd86cb004bf5.png#align=left&display=inline&height=822&margin=%5Bobject%20Object%5D&name=image.png&originHeight=822&originWidth=1066&size=136787&status=done&style=none&width=1066)<br />\n<br />其中环境对应实验生成器，奖励环节对应鉴定器，代理人对应执行系统。代理人在指定环境中探索通过执行能够带来奖励的动作并且避免带来惩罚的动作来学习需要完成的任务。\n<a name=\"BF7fU\"></a>\n## \n<a name=\"t8J9L\"></a>\n## 总结\n\n<br />机器学习分成三种类型：有监督学习、无监督学习以及强化学习。AWS DeepRacer 是一个设计得非常棒的系统，将非常复杂的机器学习课程，呈现得无比简单。它构建在已有的 AWS 资源上，比如环境、模型等静态数据存储在 S3 上，而训练过程中的动态数据存储在 Redis 中，并不断更新。各个组件解耦做得相当漂亮，用户只需要在奖励函数这部分写一点点代码，其他都通过友好的界面引导完成，这真的是名副其实的机器学习低代码平台！尽管 AWS DeepRacer 采用的强化学习，但是可以完整地体验到机器学习中的一般套路。<br />\n\n<a name=\"Rxwrh\"></a>\n## 彩蛋\n\n\n> （只要是）我不能创造的，我就（还）没有理解。\n> \n\n> —— 物理学家费曼\n\n\n<br />AWS DeepRacer 非常棒，但是要使用它，由于会使用到存储和计算，因此会产生费用。作为程序员，如果想要自己实现它，工程量又实在太大太大了。但是，凭一己之力，实现一个机器学习版的井字棋游戏，还是完全可能的。而且虽然不一定采用强化学习，但只要是机器学习，套路都是一样的。你可以先去 [https://tictactoe.js.org](https://tictactoe.js.org) 体验一下，然后按照本文介绍的套路自己撸一个。如果碰到困难可以参考它的源码：[https://github.com/Jeff-Tian/tic-tac-toe-ai](https://github.com/Jeff-Tian/tic-tac-toe-ai)，以及图文逐步指导：[https://mp.weixin.qq.com/s/xzE-kVvMqqtHOe276k706g](https://mp.weixin.qq.com/s/xzE-kVvMqqtHOe276k706g) 。\n<a name=\"TNXe2\"></a>\n### \n"
  },
  {
    "id": 34388573,
    "title": "代码如诗，牛刀小试 —— 一个小小编程练习",
    "description": "这道题的逻辑对我来说太简单了，但是，我的文言文水平，是在是令人捉急！https://github.com/josevalim/nested-data-structure-traversal/blob/master/wenyan/recursive.wy像诗一样优美的代码有人问雷军：“你写过诗吗...",
    "custom_description": null,
    "updated_at": "2021-04-08T12:03:41.000Z",
    "created_at": "2021-04-08T12:03:41.000Z",
    "slug": "yyt229",
    "word_count": 8356,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1617882990375-c665cdcd-3827-4ae2-bf9b-49185e53c6ad.png",
    "body": "> 这道题的逻辑对我来说太简单了，但是，我的文言文水平，是在是令人捉急！\n> [https://github.com/josevalim/nested-data-structure-traversal/blob/master/wenyan/recursive.wy](https://github.com/josevalim/nested-data-structure-traversal/blob/master/wenyan/recursive.wy)\n\n<a name=\"38zWR\"></a>\n## 像诗一样优美的代码\n有人问雷军：“你写过诗吗？”<br />雷军回答：“没有。但是有人说过，我写的代码，就像诗一样优美。哈哈哈哈哈哈哈哈哈哈”<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617882990375-c665cdcd-3827-4ae2-bf9b-49185e53c6ad.png#align=left&display=inline&height=2000&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2000&originWidth=725&size=1262022&status=done&style=none&width=725)<br />像诗一样优美，这样的代码，真的是艺术中的艺术了！<br />\n\n<a name=\"eUTlA\"></a>\n## 工欲善其事，必先利其器\n但是，工欲善其事，必先利其器。如果编程语言本身很丑，实在令程序员不爽。所以，要写出像诗一样的代码，得先找个足够优美的编程语言。到目前为止，文言文编程语言，是最惊艳我的一门编程语言。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617882259097-9dae431b-10a3-4311-8416-26ad5310c934.png#align=left&display=inline&height=906&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1812&originWidth=1976&size=551492&status=done&style=none&width=988)\n<a name=\"LQgDk\"></a>\n## 使用不熟悉的编程语言进行开源贡献\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617883299122-b249b8e6-cb2b-4368-b101-1bdd263bd98d.png#align=left&display=inline&height=438&margin=%5Bobject%20Object%5D&name=image.png&originHeight=438&originWidth=666&size=208076&status=done&style=none&width=666)\n> 专业人士都需要通过专门训练提升自己的技能，无一例外。乐手练习音阶，球员练习绕桩，医生练习开刀和缝针，律师练习论辩，士兵练习执行任务。要想表现优异，专业人士就会选择练习。\n> \n\n> 保持不落伍的一种方法是为开源项目贡献代码，就像律师和医生参加公益活动一样。开源项目有很多，为其他人真正关心的开源项目做一点贡献，应该可以算是提升技能的最好办法了。\n> \n\n> 所以，如果你是Java程序员，请为Rails项目做点贡献。如果你为老板写了很多C++，可以找一个Python项目贡献代码。\n> —— [美] Robert C. Martin 《代码整洁之道：程序员的职业素养》\n\nBob 大叔在《代码整洁之道：程序员的职业素养》中建议我们多用自己不熟悉的语言为开源项目贡献代码，我在工作中使用 TypeScript 语言，所以我决定使用文言语言编程语言，为开源项目 [nested-data-structure-traversal](https://github.com/josevalim/nested-data-structure-traversal) 做一点贡献。<br />这个开源项目目前一共有 149 星，并不是太知名。它主要是收集各种编程语言解决一个嵌套数据结构的遍历和标记问题，其 README 上给的 Python 示例，虽然行数较少，但是并不令人满意，因为它修改了传入的参数，有副作用。\n<a name=\"5vUFB\"></a>\n## 分析\n通过应用不可变思想，采用递归方案，不仅同样可以实现代码行数比较少，没有副作用，而且还能避免使用循环语句。\n<a name=\"VODDS\"></a>\n## 文言实现效果\n最终代码行数还是超过了 100 行，但是多数是测试代码。不过，主要由于文言水平太差，以及对文言编程语言不熟，所以最终没能写成诗。好在项目的作者并不介意，提了 PR，秒合！[https://github.com/josevalim/nested-data-structure-traversal/pull/69/files](https://github.com/josevalim/nested-data-structure-traversal/pull/69/files)\n```\n注曰：访问 https://ide.wy-lang.org/?file=%E9%81%8D%E5%8E%86%E5%B5%8C%E5%A5%97%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84，\n注曰：粘贴本页代码，即可运行。\n\n注曰：遍访并标记嵌套数据结构编程练习\n\n吾有一術名之曰「访问章节列表」：\n欲行是術必先得一物曰「章节列表」、一物曰「章节计数器」、一物曰「课程计数器」、一物曰「累积者」。\n乃行是術曰：\n    夫「章节列表」之一，名之曰「此章节」。\n    夫「章节列表」之其餘，名之曰「其餘章节」。\n    吾有一數、曰一，名之曰「索引一」。\n    吾有一數、曰一，名之曰「索引二」。\n    夫「此章节」之「「reset_lesson_position」」，變其，名之曰「课程计数未重置」。\n    \n    若「课程计数未重置」者：\n        夫「此章节」之「「lessons」」，名之曰「课程列表」。\n        夫「课程列表」之長，加「课程计数器」以其。\n        昔之「索引一」者、今其是矣。\n        昔之「索引二」者、今「课程计数器」是矣。\n    云云。\n\n    昔之「此章节」之「「position」」者、今「章节计数器」是矣。\n    夫「此章节」之「「lessons」」，名之曰「课程列表」。\n    吾有一列，名之曰「虚空」。\n    施「访问课程列表」於「课程列表」、於「索引二」、於「虚空」。\n    昔之「此章节」之「「lessons」」者、今其是矣。\n    充「累积者」以「此章节」。\n\n    若「其餘章节」之長不大於零者，乃得「累积者」云云。\n\n    加「章节计数器」以一，名之曰「新章节计数器」。\n    施「访问章节列表」於「其餘章节」、於「新章节计数器」、於「索引一」、於「累积者」，\n    名之曰「已访问之章节列表」，乃得 「已访问之章节列表」！\n是謂「访问章节列表」之術也。\n\n噫！吾有一術名之曰「访问课程列表」：\n欲行是術必先得一物曰「课程列表」、一物曰「课程计数器」、一物曰「累积者」。\n乃行是術曰：\n    變「课程列表」名之曰「未见课程列表」。\n    夫「课程列表」之長，名之曰「長度」。\n    吾有一爻，名之曰「或虚空」。若「長度」等於零者，昔之「或虚空」者今陽是矣云云。\n    夫「未见课程列表」「或虚空」中有陽乎？名之曰「無实」。\n    若「無实」者，乃得「累积者」云云。\n\n    夫「课程列表」之一，名之曰「此课程」；\n    夫「课程列表」之其餘，名之曰「其餘课程」。\n    昔之「此课程」之「「position」」者今「课程计数器」是矣。\n    \n    充「累积者」以「此课程」。\n    加「课程计数器」以一，名之曰「新课程计数器」。\n    施「访问课程列表」於「其餘课程」、於「新课程计数器」、於「累积者」，\n    名之曰「已访问课程列表」，乃得 「已访问课程列表」！\n是謂「访问课程列表」之術也。\n\n噫！吾有一術名之曰「遍访章节」：\n欲行是術必先得一物曰「章节列表」。\n乃行是術曰：\n    吾有一列，名之曰「虚空」。\n    施「访问章节列表」於「章节列表」、於一、於一、於「虚空」，\n    名之曰「已遍访章节」，乃得「已遍访章节」！\n是謂「遍访章节」之術也。\n\n噫！吾有一術名之曰「造测试数据」：\n乃行是術曰：\n    噫！吾有一列名之曰「庚未」，\n    吾有一物名之曰「丑甲」。\n    昔之「丑甲」之「「title」」者今「「Getting started」」是矣。\n    昔之「丑甲」之「「reset_lesson_position」」者今陰是矣。\n    吾有一列名之曰「辛戊」，\n    吾有一物名之曰「已访问课程列表」。\n    昔之「已访问课程列表」之「「name」」者今「「Welcome」」是矣。\n    吾有一物名之曰「戌丁」，\n    昔之「戌丁」之「「name」」者今「「Installation」」是矣。\n    充「辛戊」以「已访问课程列表」、以「戌丁」。\n    昔之「丑甲」之「「lessons」」者今「辛戊」是矣。\n    吾有一物名之曰「酉寅」，\n    昔之「酉寅」之「「title」」者今「「Basic operator」」是矣。\n    昔之「酉寅」之「「reset_lesson_position」」者今陰是矣。\n    吾有一列名之曰「未甲」，\n    吾有一物名之曰「二申」。\n    昔之「二申」之「「name」」者今「「Addition / Subtraction」」是矣。\n    吾有一物名之曰「未丑」，\n    昔之「未丑」之「「name」」者今「「Multiplication / Division」」是矣。\n    充「未甲」以「二申」、以「未丑」。\n    昔之「酉寅」之「「lessons」」者今「未甲」是矣。\n    吾有一物名之曰「二寅」，\n    昔之「二寅」之「「title」」者今「「Advanced topics」」是矣；\n    昔之「二寅」之「「reset_lesson_position」」者今陽是矣。\n    吾有一列名之曰「卯乙」，\n    吾有一物名之曰「寅丙」。\n    昔之「寅丙」之「「name」」者今「「Mutability」」是矣。\n    吾有一物名之曰「壬庚」，\n    昔之「壬庚」之「「name」」者今「「Immutability」」是矣。\n    充「卯乙」以「寅丙」、以「壬庚」。\n    昔之「二寅」之「「lessons」」者今「卯乙」是矣。\n    充「庚未」以「丑甲」、以「酉寅」、以「二寅」。\n    乃得「庚未」！\n是謂「造测试数据」之術也。\n\n施「造测试数据」之術，名之曰「测试数据」。\n施「遍访章节」於「测试数据」，名之曰「已遍访章节」。\n\n吾有一物曰「已遍访章节」，書之！\n\n夫「已遍访章节」之三，名之曰「末章节」；\n夫「末章节」之「「title」」，曰「标题」。\n\n吾有一物，曰「标题」。書之！\n\n夫「末章节」之「「lessons」」，名之曰「末章节之课程」；\n夫「末章节之课程」之一，名之曰「课程一」；\n夫「末章节之课程」之二，名之曰「课程二」。\n夫「课程一」之「「position」」，曰「位置一」；\n夫「课程二」之「「position」」，曰「位置二」。\n\n吾有二物，曰「位置一」、「位置二」。書之！\n```\n<a name=\"hCBM0\"></a>\n## 彩蛋\n附上雷军 1989 年写的汇编，能把汇编写成诗，实在是高手高手高高手。不过和我写的小诗不同，雷军写的那可是长篇史诗！\n```\n;\n; RI.ASM Revision 2.12 [ July 12, 1994 ]\nRevision equ 'V2.12 '\n;\n;\n;\n;  RAMinit Release 2.0 \n;  Copyright (c) 1989-1994 by Yellow Rose Software Co.\n;  Written by Mr. Leijun\n;\n;  Function:\n;  Press HotKey to remove all TSR program after this program\n;\n;\n\n; ..........................................................................\n; Removed Softwares by RI:\n; SPDOS v6.0F, WPS v3.0F\n; Game Busters III, IV\n; NETX ( Novell 3.11 )\n; PC-CACHE\n; Norton Cache\n; Microsoft SmartDrv\n; SideKick 1.56A\n; MOUSE Driver\n; Crazy (Monochrome simulate CGA program)\n; RAMBIOS v2.0\n; 386MAX Version 6.01\n; ..........................................................................\n; No cancel softwares:\n; Windows 3.1 MSD\n;\n; No removed TSR softwares:\n; MS-DOS fastopen\n; Buffers, Files ... (QEMM 6.0)\n; QCache (386MAX 6.01)\n; ..........................................................................\n;\nCOMMENT\n\nV2.04 Use mouse driver software reset function to initiation mouse\n2/17/1993 by Mr. Lei and Mr. Feng\nV2.05 RI cannot work in Windows DOS prompt\n3/9/1993 by Mr. Lei\nV2.06 1. When XMS cannot allocate 1K memory, RI halts.\n2. RI repeat deallocates EMS memory.\nV2.07 HotKey Setup Error\n4/25/1993 by Mr. Lei\nV2.08 KB Buffer\nV2.10 1. Release high memory blocks (EMM386 QEMM386 S-ICE 386MAX)\n2. RI copies flag\nV2.12 1. Exists a critical error in Init 8259 procedure\n2. Save [40:F0--FF] user data area\n\n\n\ndosseg\n.model tiny\n.code\nlocals @@\norg 100h\n\nStart: jmp Main\norg 103h\n\nTrue equ 1\nFalse equ 0\nMaxHandles equ 100h\n\nINT3 macro\nout 0ffh,al\nendm\n;\n; HotKey Status Test Var\n; --------------- ---------------\n;\n; 7 6 5 4 3 2 1 0 417 418 496\n; . . x . x . . . Left Alt is pressed 8 2\n; x . . . x . . . Right Alt is pressed 8 8\n; . . . x . x . . Left Ctrl is pressed 4 1\n; . x . . . x . . Right Ctrl is pressed 4 4\n; . . . . . . x . Left Shift is pressed 2\n; . . . . . . . x Right Shift is pressed 1\n;\nLeftAlt equ 00101000b\nRightAlt equ 10001000b\nLeftCtrl equ 00010100b\nRightCtrl equ 01000100b\nLeftShift equ 00000010b\nRightShift equ 00000001b\nHotKey db LeftCtrl or RightCtrl\n\nDataBegin dw 0\nNextDataSeg dw 0ffffh\noldInt2F_addr dw 0, 0\nXMS_control dw 0, 0\nHandle_begin dw 0\ncvtOfs dw 0 ; DOS 3.0 equ 0 and above DOS 4.0 is 1\norg 104h\ndb 0dh\ndb Revision\ndb ??date\ndb 26\norg 114h\ntsrLength dw 0\nMachineID db 0FCh ; IBM PC/AT\n\nAuxHotKey db 0 ; 2Dh ; 'X' Scan Code\nAuxHotKeyName db 'X$ '\nPower db True\nFlag db '!'\nKbd102 db 0\nNoFlag db 0\nStopFlag db 1\nDosEnv dw 0\nWorkSeg dw 0\nPrevDataSeg dw 0\nCopies db '1'\nold_8259 db 0 ; 21h port\ndb 0 ; a1h port\n\nStatus dw 0\nXMSbit equ 00000001b\nEMSbit equ 00000010b\nSKbit equ 10000000b\n\nGoINT1C: db 0eah\noldInt1C_addr dw 0, 0\nnewINT1C:\ntest cs:Status, SKbit\njnz GoINT1C\ncmp cs:StopFlag, 0\njz @@0\n;\n; Mr. Lei 2/8/1993\n; Problem: if WPS quit and reenter, old RI cann't control keyboard. ;\npush ds\npush ax\nxor ax, ax\nmov ds, ax\nmov ax, ds:[94]\ncmp ax, offset NewInt9\npop ax\npop ds\njnz GoINT1C\nmov cs:StopFlag, 0\n\n@@0: push ax\npush ds\npush es\nxor ax, ax\nmov ds, ax\nmov es, ds:[94+2]\ncmp word ptr es:[101h], 'IE' ; 'LEI'\njz @@1\ncli\nmov cs:StopFlag, 1\nmov ax, ds:[94]\nmov cs:oldINT9_addr2, ax\nmov ax, ds:[94+2]\nmov cs:oldINT9_addr2[2], ax\nmov ds:[94], offset newINT9_2\nmov ds:[94+2], cs\nsti\n@@1: pop es\npop ds\npop ax\njmp GoINT1C\n\n; ----------------------------------------------------------------------\n; INT2F Func\n;\n; AX = C0D7h Return RI segment in AX\n; AX = C0D8h Removes all TSR programs after RI\n; AX = C0D9h Removes all TSR programs include RI\n; AX = C0DAh Removes all RI copies\n; ----------------------------------------------------------------------\n\nnewINT2F:\ncmp ax, 0c0d7h ; LEI Hanzi GB Code\njnz @@1\npush cs\npop ax\niret\n@@1: cmp ax, 0c0d7h+1\njnz @@2\njmp KeepSelf\n@@2: cmp ax, 0c0d7h+2\njnz @@3\njmp NoKeepSelf\n@@3: cmp ax, 0c0d7h+3\njnz @@9\nmov cs:NextDataSeg, -1\nmov cs:Copies, '1'\njmp NoKeepSelf\n@@9: jmp dword ptr cs:oldInt2F_addr\n\n\nCallInt9:\nret\n\n\nnewINT9_2:\nmov cs:NoFlag, 1\npushf\ndb 9ah ; call far ptr oldint9_addr\noldInt9_Addr2 dw 0, 0\njmp newINT9_proc\n\nnewINT9:\npushf\ndb 9ah ; call far ptr oldint9_addr\noldInt9_Addr dw 0, 0 cmp cs:NoFlag, 0\njz newINT9_proc\nmov cs:NoFlag, 0\niret\nnewINT9_proc:\ncmp cs:Flag, '!' ; busy ?\njnz @@0\niret\n@@0:\nmov cs:Flag, '!' ; set busy flag\npush ax ; cmp hot key\npush bx\npush es\nmov ax,40h\nmov es,ax\n\ncmp cs:AuxHotKey, 0\njz @@_1\nmov bx, es:[1ah]\ncmp bx, es:[1ch]\njz @@10\npush bx\nmov bl, es:[bx+1]\ncmp bl, cs:AuxHotKey\npop bx\njnz @@10\n@@_1:\nmov ah,es:[17h] ; test CTRL SHIFT ALT\nmov al,cs:HotKey\npush ax\nand ax,0f0fh\ncmp al,ah\npop ax\njnz @@10 cmp cs:Kbd102, True\njnz @@1\nshr al, 1\nshr al, 1\nshr al, 1\nshr al, 1\npush ax\nmov ah, es:[18h]\nand ax, 303h\ncmp al, ah\npop ax\njnz @@10\nmov ah, es:[96h]\nshr ax, 1\nshr ax, 1\nand ax, 303h\ncmp al, ah\njnz @@10 cmp cs:AuxHotKey, 0\njz @@_3\ninc bx\ninc bx\ncmp bx, 3eh\njb @@_2\nmov bx, 1eh\n@@_2:\nmov es:[1ah], bx\n@@_3:\ncall IsWinDos\nor ax, ax\njz @@1\ncall Beep\n@@10:\nsti\npop es\npop bx\npop ax\nmov cs:Flag, ' ' ; no busy\niret\n@@1: ; OK\npop es\npop bx\npop ax\n\nKeepSelf:\ncall RemoveTSR\npush es\nmov es,cs:WorkSeg\nmov dx,es:tsrLength\nmov di,dx\nmov al,0h ; Aug 24, 1993\nmov cx,100h\nrep stosb\npop es\nint 27h\n\nNoKeepSelf:\nmov ax,0e07h\nint 10h\nmov cs:clsStr, 47h ; Color (White in Red)\ncall RemoveTSR\ndec cs:Copies\ncall RestoreSelfIntVec\npush es\ncmp cs:PrevDataSeg, 0\njz @@1\nmov es, cs:PrevDataSeg\nmov es:NextDataSeg, -1\n@@1: pop es\nmov ax, 4c00h\nint 21h\n\n; ---------------------------------------------------------------------------\n\nIsWinDOS:\nmov ax, 1600h\nint 2fh\ncmp al, 01h\njz @@9 cmp al, 0ffh\njz @@9 ; Windows/386 Version 2.X\ncmp al, 00h\njz @@1 cmp al, 80h\njnz @@9 ; Windows 3 in enhanced mode\n; Version number in AL/AH\n@@1:\nmov ax, 4680h\nint 2fh\ncmp al, 80h\njnz @@9\nxor ax, ax\njmp @@10\n@@9: mov ax, 1\n@@10: ret\n\n; -----------------------------------------------------------------------\nRestoreSelfIntVec:\ncmp Copies, '0'\njz @@0\nret\n@@0:\ncli\npush cs\npop ds\nxor ax, ax\nmov es, ax\nmov si, offset oldInt9_Addr\nmov di, 94\nmovsw\nmovsw\nmov si, offset oldInt2F_Addr\nmov di, 2Fh4\nmovsw\nmovsw\nmov si, offset oldInt1C_Addr\nmov di, 1Ch4\nmovsw\nmovsw\nsti\nret\n\n; ------------- KERNEL PROGRAM ----------------------------------------------\nRemoveTSR:\npop ax\ncli ; Set stack\nmov sp, cs\nmov ss, sp\nmov sp, 100h\nsti\npush ax\n\ncmp cs:Power, True\njnz @@1\ncall Init8259\n@@1:\npush cs\npop ds\n@@_0:\nmov ax,ds:NextDataSeg\ncmp ax, -1\njz @@_1\nmov cs:PrevDataSeg, ds\nmov ds, ax\njmp @@_0\n@@_1: mov si,ds:DataBegin\nmov cs:WorkSeg, ds\nlodsw\ncmp ax, 'XX'\njz @@_2\ncall Beep\nret\n@@_2:\ncall RestoreEnvStr\ncall RestoreMCB ; restore current mcb\ncall CloseFiles\ncall RestorePort\ncall RestoreLEDs\ncall RestoreVecList ; Restore vectors list\ncall RestoreFloppyParam\ncmp cs:Power, True\njnz @@2\ncall RestoreCVTchain ; Restore cvt chain\ncall RestoreMemoryManager\n@@2:\ncall RestoreBiosData\ncall Enable8259\nmov ah, 1 int 16h\n\ncall RestoreClockSpeed\ncall CloseSpeaker\ncall ResetDisk\ncall UpdateTime\n\ncall ClosePRN\nmov bx,cs:WorkSeg\nmov ah,50h\nint 21h ; Set PSP segment\nmov ax,3 int 10h ; Set display mode\n\ncall InitPRN\ncall InitMouse\nmov al, cs:Copies\ncmp al, '1'\nja @@_sh1\nmov cs:ShowCopies, ''\njmp @@_sh2\n@@_sh1: mov cs:ShowCopies, al\n@@_sh2:\nmov si, offset clsStr\ncall ColorPrintStr\nmov cs:Flag, ' ' ; no busy\ncmp Copies, '1'\njnz @@_end\nmov cs:StopFlag, 0\n@@_end:\ncall ClearKB_buffer\nret\n\nBeep:\nmov ax,0e07h\nint 10h\nret\n\n; #########################################################################\n\nClearKB_Buffer:\npush es\npush bx\nmov bx, 0040h\nmov es, bx\ncli\nmov bx, es:[1ah]\nmov es:[1ch], bx\nsti\npop bx\npop es\nret\n\n\nInit8259:\n; cmp cs:Copies, '1'\n; jz @@1\n; ret\n@@1:\ncmp cs:MachineID, 0fch\nja @@pc_xt\n@@AT:\nmov bx,870h ;\nmov al,0 ;\nout 0F1h,al ;\njcxz $+2\njcxz $+2\nmov al,11h ; ICW1\nout 0A0h,al\njcxz $+2\njcxz $+2\nout 20h,al\njcxz $+2\njcxz $+2\nmov al,bl ; ICW2\nout 0A1h,al\njcxz $+2\njcxz $+2\nmov al,bh\nout 21h,al\njcxz $+2\njcxz $+2\nmov al,2 ; ICW3\nout 0A1h,al\njcxz $+2\njcxz $+2\nmov al,4\nout 21h,al\njcxz $+2\njcxz $+2\nmov al,1 ; ICW4\nout 0A1h,al\njcxz $+2\njcxz $+2\nout 21h,al\njcxz $+2\njcxz $+2\nmov al,0FFh ; OCW1\nout 0A1h,al\njcxz $+2\njcxz $+2\nout 21h,al\nret\n@@PC_XT:\nmov al,13h ; ICW1\nout 20h,al\njcxz $+2\njcxz $+2\nmov al,8 ; ICW2\nout 21h,al\njcxz $+2\njcxz $+2\nmov al,9 ; ICW4\nout 21h,al\njcxz $+2\njcxz $+2\nmov al,0FFh ; OCW1\nout 21h,al\nret\n\nEnable8259:\nmov ax, word ptr cs:old_8259\nout 021h,al\njcxz $+2\njcxz $+2\nmov al,ah\nout 0a1h,al ; DEC PC Bus Mouse\nret ; July 1994 by Mr. Lei\n\n; -------------------------------------------------------------------------\n\nRestoreBiosData:\nlodsw\ncmp ax, '--'\njz @@1\ncall Beep\nret\n@@1: push es\npush di\nmov di, 40h\nmov es, di\n\nmov di, 10h\nmovsw\nmov di, 0a8h ; [40h:a8h]\nmovsw\nmovsw\nmov di, 49h\nmov cx, 1dh\nrep movsb\n\nmov di, 0f0h ; User data\nmov cx, 8\nrep movsw\n\npop di\npop es\nret\n\n; -------------------------------------------------------------------------\n\nRestoreMCB:\npush ds\npush es\nlodsw ; 'MZ'\n@@0: lodsw\ncmp ax, 'MM'\njz @@1\nmov es,ax\nxor di,di\nmovsb\nmovsw\nmovsw\ninc ax\nmov bx, ds\ncmp ax, bx\njz @@10\nmov byte ptr es:[8], 0 ; Aug 24, 1993\n@@10: cmp byte ptr es:[0], 'Z'\njnz @@0\nmov byte ptr es:[10h], 0\njmp @@0\n@@1:\npop es\npop ds\nret\n\n; -------------------------------------------------------------------------\nCloseFiles:\nmov ax, 5 ; Begin handle\npush ds\npush si\nmov cx, 15 ; Max handle\nsub cx, ax\ninc cx\nmov bx, ax\n@@1: push bx\npush cx\nmov ah, 3eh\nint 21h\npop cx\npop bx\ninc bx\nloop @@1\npop si\npop ds\nret\n\n; -------------------------------------------------------------------------\nRestorePort:\nmov di, 40h ; restore port\nmov es, di\nxor di, di\nmov cx, 8\nrep movsw\nret\n\n; -------------------------------------------------------------------------\nRestoreLEDs:\nlodsb\nand al, 11110000b ; LED status\nmov ah, es:[17h]\nand ah, 00001111b\nor ah, al\nand ah, 0f0h ; Clear CTRL ALT SHIFT\nmov es:[17h], ah\nret\n\n; -------------------------------------------------------------------------\nRestoreEnvStr:\nlodsw\npush si\npush di\npush ds\npush es\nmov es, cs:DosEnv\nmov ds, ax\nxor si, si\nmov di, si\n@@0: lodsb\nor al, al\njnz @@1 cmp byte ptr ds:[si], 0\njz @@2\n@@1: stosb\njmp @@0\n@@2: stosb\nstosb\npop es\npop ds\npop di\npop si\nret\n\n; -----------------------------------------------------------------------\nRestoreVecList:\nxor ax,ax\nmov di,ax\nmov es,ax\nmov cx,100h\n@@0: lodsw\nxchg dx, ax\nlodsw\ncmp dx, 'EL'\njnz @@1 cmp al, 'I'\njnz @@1\nsub cl, ah\npush cx\nmov cl, ah\nmov ax, es:[di-4]\nmov dx, es:[di-2]\n@@a: stosw\nxchg ax, dx\nstosw\nxchg ax, dx\nloop @@a\npop cx\nor cx, cx\njz @@9\njmp @@0\n@@1:\nxchg ax, dx\nstosw\nxchg ax, dx\nstosw\nloop @@0\n@@9:\nret\n\n;----------------------------------------------------------------------------\nRestoreFloppyParam: ; Mr. Lei 2/10/1992\npush es\npush ax\nxor ax, ax\nmov es, ax\nmov byte ptr es:[525h], 2\npop ax\npop es\nret\n\n;---------------------------------------------------------------------------\nRestoreCVTchain:\nlodsw\ncmp ax, 'VC'\njz @@_0\ncall Beep\nret\n@@_0:\npush ax\npush cx\npush es\n\n; -----------------------------------------------------------------\nlodsw ; DPB\nmov di, ax\nlodsw\nmov es, ax\n@@1: lodsb\ninc di\nstosb\nadd di, cs:cvtOfs\nadd di, 10h\nmovsw\nmovsw\nles di, es:[di+2]\ncmp di, -1\njnz @@1\n\n; -----------------------------------------------------------------\nlodsw ; DCB\nmov di, ax\nlodsw\nmov es, ax\nxor ax, ax\ndec ax\nstosw\n\n; -----------------------------------------------------------------\nlodsw ; Device Driver Chain\nmov di, ax\nlodsw\nmov es, ax\nxor cx, cx\n@@9: push di\nmov cl, 5\nrep movsw\npop di\nles di, es:[di]\nmov ax, di\ninc ax\njnz @@9\npop es\npop cx\npop ax\nret\n\n; ----------------------------------------------------------------------------\nRestoreMemoryManager:\ntest cs:Status, XMSbit\njz @@1\ncall LoadXMSstatus\n@@1:\ntest cs:Status, EMSbit\njz @@2\ncall LoadEMSstatus\n@@2:\nret\n\n\nLoadEMSstatus:\nlodsw\ncmp ax, 'ME'\njz @@_0\ncall Beep\nret\n@@_0:\nlodsw\nmov cx, ax\nxor dx, dx\n@@_1: push ds\npush si\npush dx\npush cx\n\n@@0: cmp dx, ds:[si]\njz @@1\nadd si, 4\nloop @@0\n\npush cx\nmov cx, 5\n@@0: mov ah, 45h ; Deallocate Handle and Memory\nint 67h\nor ah, ah\njz @@1\nloop @@0\n@@1: pop cx\n\n@@1:\npop cx\npop dx\npop si\npop ds\ninc dx\ncmp dx, 100h\njb @@_1\nshl cx, 1\nshl cx, 1\nadd si, cx\nret\n\n\nLoadXMSstatus:\nlodsw\ncmp ax, 'MX'\njz @@_0\ncall Beep\nret\n@@_0:\nlodsw\nmov cx, ax\njcxz @@5\n@@1:\nlodsw\nmov dx, ax\n@@2: push dx\nmov ah, 0ah ; free\ncall dword ptr cs:xms_control\nor ax, ax\npop dx\njnz @@4 cmp bl, 0abh\njnz @@4\npush dx\nmov ah, 0dh ; unlock\ncall dword ptr cs:xms_control\nor ax, ax\npop dx\njmp @@2\n@@4: loop @@1\n@@5: ret\nendp\n\n; -----------------------------------------------------------------------\nCloseSpeaker:\nin al, 61h\nand al, 0fch\nout 61h, al\nret\n\n; -----------------------------------------------------------------------\nRestoreClockSpeed:\nmov al, 00110110b\nout 43h, al\nxor ax, ax\nout 40h, al\nout 40h, al\nret\n\n; -----------------------------------------------------------------------\nResetDisk:\nxor ax, ax\nxor dx, dx\nint 13h ; Restore A\ninc dx\nint 13h ; Restore B\nmov dl, 80h\nint 13h ; Restore C\nret\n\n\n\n; --------------------------------------------------------------------------\nClosePRN:\nmov ah, 51h ; Get PSP seg\nint 21h\nmov es, bx\nmov ax, es:[16h] ; Prev PSP seg\ncmp ax, bx\njnz @@9\nmov ax, 3e00h ; COMMAND\nmov bx, 4 int 21h\n@@9:\nret\n\nInitPRN:\nmov ax, 3e00h\nmov bx, 4 ; PRN\nint 21h\nmov ax, 3d01h\nmov dx, offset PRNname\npush cs\npop ds\nint 21h\nret\nPRNname db 'PRN',0\n\nInitMouse: ; 2/16/1993 by Mr. Lei\npush es\nxor ax, ax\nmov es, ax\ncmp word ptr es:[33h4+2], 0\njz @@0 cmp word ptr es:[33h4], 0\njz @@0\nmov ax, 21h\nint 33h ; Hook Mouse Interrupt\n@@0: pop es\nret\n\n; ------------- CMOS CLOCK set to System -----------------------------------\nUpdateTime:\ncall GetRealTime\nmov ah, 2dh\nint 21h\nret\n\nGetRealTime:\nmov ah,2 int 1Ah\nmov al,ch\ncall bcdxchg\nmov ch,al\nmov al,cl\ncall bcdxchg\nmov cl,al\nmov al,dh\ncall bcdxchg\nmov dh,al\nmov dl,0\nret\n\nBCDxchg:\npush ax\npush cx\nmov cl,4\nshr al,cl\npop cx\nmov bl,0Ah\nmul bl\npop bx\nand bl,0Fh\nadd al,bl\nret\n\n; -----------------------------------------------------------------------\n; Display string\nColorPrintStr:\nlodsb\nmov bh, al ; color\nxor cx, cx\nmov dx, 014fh\nmov ax, 0600h\nint 10h\n\nmov ah, 02 ; GotoXY (0, 0)\nxor dx, dx\nmov bh, 0 int 10h\nPrintStr:\npush cs\npop ds\nxor bx, bx\n@@1: lodsb\ncmp al, '$'\njz @@2\nor al, al\njz @@2\nmov ah, 0eh\nint 10h\njmp short @@1\n@@2: mov al, cs:clsStrcolor\nmov cs:clsStr, al\nret\n\n; -----------------------------------------------------------------------\nSelf dw 0\nclsStrcolor db 17h\nclsStr db 17h ; Color (White in Blue)\ndb ' RAMinit Version 2.12 (c) 1989-1994 by KingSoft Ltd. Mr. Leijun'\ndb 0dh,0ah\ndb ' ['\nShowCopies db ''\ndb '] Activate...',0ah,0dh,'$'\n\nendTSR equ $\nmcbList equ offset endTSR + 2 + 2\nvecList equ mcbList + 710 + 2 + 10h + 1 + 400h\ndevLink equ vecList + 4 + 5  26 + 4 + 10  30h + 4\nxmsList equ devLink + 2 + MaxHandles  2\nemsList equ xmsList + 4 + 1024\ncrtMode equ emsList + 2 + 1Dh + 4 + 10h\ntsrLen equ crtMode + 1\n;\n; DOS Environment Reserved by RI\n; --------------------------------------------------\n; Flag 'XX' 2 bytes\n; Environment Segment 1 word\n; Free MCBs <=710 bytes\n; MCB segment 1 word\n; MCB 5 bytes\n; End flag 'MM' 1 word\n; COM LPT ports 10h bytes\n; LEDs status 1 bytes\n; Packed vectors list <=400h bytes\n; Flag 'CV' 2 bytes\n; CVT First DPB pointer 4 bytes\n; DPBs data <=526 bytes\n; First DCB pointer 4 bytes\n; Pointer to NUL 4 bytes\n; All device driver datas <=30h10 bytes\n; Flag 'XM' 2 bytes\n; XMS free handle counter 2 bytes\n; EMS free handle list <=100h4 bytes\n; Flag 'EM' 2 bytes\n; EMS free handle counter 2 bytes\n; EMS free handle list <=1024 bytes\n; EMS handle 1 word\n; Number of pages 1 word\n; Flag '--' 1 word\n; Equipment List 1 word\n; CRT 40:49h-66h 1dh bytes\n; 40:A8h 1 dword\n; BIOS User Data Area 40:F0--FF 10h bytes\n; **\n;\nmain: jmp main0\n\nPrint Macro Str\nLea dx, Str\ncall DisplayStr\nendm\n\nInstMsg db 'RAMinit Version 2.12 '\ndb 'Copyright (c) 1989-1994 by KingSoft Ltd. ',0dh,0ah,'$'\nMsg0 db 'Already installed !',0dh,0ah,0ah\ndb 'For Help, type RI /?. ',0dh,0ah,'$'\nMsg_0 db 0ah,'Residents a new RAMinit copy [y/n] ? $'\nMsg_2 db 'OK, RI No.'\nMsg_RI db '2'\ndb ' residents successful !', 0dh,0ah,'$'\nMsg1 db 'Activate with: $'\nKeyMsg db 'Right_Shift$'\ndb 'Left_Shift$ '\nKMsg1 db 'Left_Ctrl$ '\ndb 'Left_Alt$ '\ndb 'Right_Ctrl$ '\ndb 'Right_Alt$ '\nKMsg2 db 'Ctrl$ '\ndb 'Alt$ '\ndb 'Ctrl$ '\ndb 'Alt$ '\nPlusMsg db ' + $'\ncrlf db 0dh,0ah,'$'\n\nHelpMsg db 'Programmed by Mr. Leijun Dec 1992', 0dh,0ah,0ah\ndb 'Usage: RI [options]',0dh,0ah,0ah\ndb '/H,/? Display this screen',0dh,0ah\ndb '/CLS Removes all TSR programs after current RI',0dh,0ah\ndb '/RET Removes TSR programs include current RI',0dh,0ah\ndb '/NEW Residents a new data copy of current environment',0dh,0ah\ndb '/ALL Removes all RI copies and all other tsr programs',0dh,0ah\ndb '/Sxyy.. Define Hotkey x=AuxHotkey yy..=shift status',0dh,0ah\ndb ' x=auxiliary hotkey (default is X) ',0dh,0ah\ndb ' x equ 1 means need AuxHotkey',0dh,0ah\ndb ' yy..=shift status [CAScas]',0dh,0ah\ndb ' C: Left Ctrl A: Left Alt S: Left Shift',0dh,0ah\ndb ' c: Right Ctrl a: Right Alt s: Right Shift',0dh,0ah,0ah\ndb 'Example: RI /S1c means Hotkey is Right_Ctrl+X',0dh,0ah\ndb ' RI /S0Cc means HotKey is Left_Ctrl+Right_Ctrl',0dh,0ah\ndb ' RI /CLS equals simply press hotkey',0dh,0ah\ndb ' RI /RET Removes all TSRs after current RI and this RI',0dh,0ah\ndb 0ah\ndb 'Contact me for RAMinit problems: (01)2561155 Call 1997',0dh,0ah\ndb '$'\nErrMsg db 'ERROR: Invalid options !',0dh,0ah,0ah,'$'\nWinErr db 7, 'Sorry, I cannot work in Windows DOS environment.',0dh,0ah,'$'\nSetMsg db 7, 'Defines new Hotkey successful !',0dh,0ah,0ah,'$'\ntsrOK db False\n\nMain0:\ncld\nPrint instMsg\ncall IsWinDos\nor ax, ax\njz @@1\nPrint WinErr\nmov ax, 4c00h\nint 21h\n@@1:\ncall HotKeyValid\nmov cs:Status, 0\ncall EMS_test\ncall CmpDosVer\ncall CmpSideKick\ncall GetMachineID\ncall ModifyHotKeyPrompt\n\nmov ax, 0c0d7h\nint 2fh\nmov es, ax\ncmp word ptr es:[101h], 'IE' ; 'LEI'\njnz @@0\nmov cs:Self, ax\n@@0:\ncall CmdLine\ncall PrintHotKeyPrompt\n\ncmp cs:tsrOK, true\njz @@2\ncall tsrReplyOK\n@@2: cmp cs:tsrOK, true\njnz @@_2\ncall PrintCopies\n@@_2:\nmov word ptr cs:[100h], 'EL'\nmov byte ptr cs:[102h], 'I'\n\npush cs\npop es\npush cs\npop ds\nstd\nmov si, offset eof\nmov cx, eof - offset Here\nmov di, tsrLen\nadd di, cx\ninc cx\nrep movsb\ncld\nmov bx, tsrLen\njmp bx\n\nHere:\nmov ax,cs\nmov es,ax\nmov di,offset endTSR\nmov cs:DataBegin, di\nmov cs:NextDataSeg, -1\nmov ax, 'XX'\nstosw\nin al, 0a1h\nmov ah, al\nin al, 21h\npush ax\nmov word ptr cs:old_8259, ax\nxor ax, ax\nout 21h,al ; CLI\ncall SaveOthers\ncall SetSelfInt\ncall BackupVecList\ncmp cs:Power, true\njnz @@20\ncall BackupCVTchain\ncall BackupMemoryManager\n@@20:\ncall BackupBiosData\n\nsti\nmov cs:Flag, ' ' ; no busy\nmov cs:StopFlag, 0 ;\n\nmov cs:tsrLength, di\ncall SetDosEnvSeg\ncmp cs:Self, 0\njz @@29\npush cs\npop ds\npush cs\npop es\ncld\nmov cx, cs:tsrLength\nmov si, cs:DataBegin\nsub cx, si\nmov di, 120h\nmov cs:DataBegin, di\nrep movsb\nmov cs:tsrLength, di\n@@29:\npop ax\nout 21h, al ; STI\nmov al, ah\nout 0a1h, al\nmov dx, cs:tsrLength\ninc dx\nint 27h\n\n; ----------------------------------------------------------------------------\nSetDosEnvSeg:\npush ds\npush es\nmov ax, cs\n@@10: mov es, ax\nmov ax, es:[16h] ; Get father process psp segment\nor ax, ax\njz @@11\nmov bx, es\ncmp ax, bx\njnz @@10\n@@11:\nmov es, word ptr es:[2ch] ; Get father process env segment\nmov cs:DosEnv, es\npop es\npop ds\nret\n\n; ----------------------------------------------------------------------------\n\nSaveOthers:\nmov ax, cs:[2ch] ; Env Seg\nstosw\ncall backupMCB ; Current MCB\nmov ax, 40h ; COM LPT Port\nmov ds, ax\nmov si, 0h\nmov cx, 8\nrep movsw\n\nmov si, 17h ; LED status\nlodsb\nstosb\n; call OpenLEDs\nret\n\n; --------------------------------------------------------------------------\nbackupMCB:\nmov ax, 'ZM'\nstosw\npush ds\npush es\nmov ah, 52h\nint 21h ; Get MCB chain head\nmov ax, es:[bx-2]\npop es\n@@0: mov ds, ax\ncmp byte ptr ds:[0], 'Z' ; End ?\njz @@20 cmp byte ptr ds:[0], 'M' ; Memory control block\njnz @@30 cmp word ptr ds:[3], 0 ; Nul mcb\njz @@10 cmp word ptr ds:[1], 0 ; Free MCB\njnz @@10\ncall SaveFreeMCB\n@@10: inc ax\nadd ax, ds:[3]\njmp @@0\n@@20:\ncall SaveFreeMCB\ncmp ax, 0a000h\ninc ax\njnb @@30\nmov ax, 9fffh ; MS-DOS UMB\njmp @@0\n\n@@30:\ncmp ax, 0c000h ; 386MAX\nja @@90\nmov ax, 0c020h\njmp @@0\n\n@@90: ; Error ?\npop ds\nmov ax, 'MM' ; Set MCB flag\nstosw\nret\n\nSaveFreeMCB:\nstosw\nxor si,si\nmovsb\nmovsw\nmovsw\nret\n;\n; push ax\n; stosw\n; xor si,si\n; movsb\n; movsw\n; movsw\n; pop ax\n; cmp ax, 09fffh\n; jnb @@3\n; push ax\n; push ds\n; mov ds,ax\n; cmp byte ptr ds:[0], 'M'\n; pop ds\n; pop ax\n; jnz @@4\n; mov ax, 09fffh ; MS-DOS UMB\n; jmp @@0\n; @@4: cmp ax, 0c000h\n; ja @@3\n; mov ax, 0c020h ; 386MAX\n; jmp @@0\n;\n; --------------------------------------------------------------------------\n\nOpenLEDs: push ax ; Open all LEDs\nor al, 070h\nmov ds:[17h], al\nmov ah, 1 int 16h\nmov cx, 4 ; Delay\n@@20: push cx\nxor cx, cx\n@@21: loop @@21\npop cx\nloop @@20\npop ax\nmov ds:[17h], al\nmov ah, 1 int 16h\nret\n\n; --------------------------------------------------------------------------\nSetSelfInt:\npush es\npush di\n\ncmp cs:self, 0\njnz @@1\npush cs\npop ds\nmov ax,3509h\nint 21h\nmov word ptr cs:oldInt9_addr,bx\nmov word ptr cs:oldInt9_addr[2],es\nmov dx,offset NewInt9\nmov ax,2509h\nint 21h\n\nmov ax,352Fh\nint 21h\nmov word ptr cs:oldInt2F_addr,bx\nmov word ptr cs:oldInt2F_addr[2],es\nmov dx,offset newInt2F\nmov ax,252Fh\nint 21h\n\nmov ax,351Ch\nint 21h\nmov word ptr cs:oldInt1C_addr,bx\nmov word ptr cs:oldInt1C_addr[2],es\nmov dx,offset newInt1C\nmov ax,251ch\nint 21h\ncli\njmp @@2\n@@1:\nmov es, cs:Self\ninc es:Copies\n@@_0: cmp es:NextDataSeg, -1\njz @@_1\nmov es, es:NextDataSeg\njmp @@_0\n@@_1: mov es:NextDataSeg, cs\n@@2:\npop di\npop es\nret\n\n; -----------------------------------------------------------------------\nSaveCounter:\nmov word ptr es:[di], 'EL'\nmov byte ptr es:[di+2], 'I'\nmov byte ptr es:[di+3], bl\nxor bx, bx\nadd di, 4\nret\n\n; -----------------------------------------------------------------------\nDisplayStr: push cs\npop ds\nmov ah, 9 int 21h\nret\n\n; -----------------------------------------------------------------------\nCmdLine:\npush cs\npop ds\nxor ax, ax\nmov si, 80h\nlodsb\nor al, al\njnz @@1\nret\n@@1:\nmov cx, ax\ndec ax\npush ax\npush si\n@@0: lodsb\ncmp al, ' '\njz @@0 cmp al, '/'\njnz @@2\nlodsb\ncmp al, 'S'\njz @@_2\ncmp al, 's'\njnz @@2\n@@_2:\ncall SetHotKey\nPrint SetMsg\nmov ax, 4c00h\nint 21h\n@@2:\npop si\npop ax\npush ax\npush si\n@@_3: lodsb\ncmp al, 'A'\njb @@3 cmp al, 'Z'\nja @@3\nadd byte ptr ds:[si-1],20h ; DownCase\n@@3: loop @@_3\npop si\npop cx\n\nadd si, cx\nlodsb\ncmp al, 's' ; CLS\njnz @@5 cmp word ptr ds:[si-3], 'lc'\njnz @@5 cmp cs:Self, 0\njz @Err\nmov ax, 0c0d7h+1 int 2fh\n\n@@5: cmp al, 'h' ; HELP\njz @help\ncmp al, '?'\njz @help\ncmp al, 't' ; RET\njnz @@6 cmp word ptr ds:[si-3], 'er'\njnz @@6\n@@7:\ncmp cs:Self, 0\njz @Err\nmov ax, 0c0d7h+2 int 2fh\n@@6: cmp al, 'w' ; NEW\njnz @@8 cmp word ptr ds:[si-3], 'en'\njnz @@8\nmov cs:tsrOK, true\nret\n@@8:\ncmp al, 'l' ; ALL\njnz @@9 cmp word ptr ds:[si-3], 'la'\njnz @@9\nmov ax, 0c0d7h+3 int 2fh\n@@9:\ncmp al, ' '\njnz @Err\nret\n\n@Err:\nPrint ErrMsg\n@help:\nPrint HelpMsg\nmov ax, 4c00h\nint 21h\n\n;---------------------------------------------------------------------------\ntsrReplyOK:\ncmp cs:Self, 0\njz @@1\nPrint Msg0\n\npush es\nmov ax, cs:Self\n@@_10: mov es, ax\nmov ax, es:NextDataSeg\ncmp ax, -1\njnz @@_10\nmov ax, es\n\n@@_0: push ax\ndec ax\nmov es, ax\nmov bx, es:[3]\npop ax\n\nadd ax, bx\ninc ax\nmov es, ax\ncmp word ptr es:[0], 'OC'\njz @@_0\n\nmov bx, cs\ncmp ax, bx\npop es\njz @@2\nPrint Msg_0\nmov ah, 1 int 21h\n\npush ax\nPrint crlf\npop ax\n\ncmp al, 'y'\njz @@3 cmp al, 'Y'\njz @@3\n@@2: ; Print Msg_1\nmov ax, 4c01h\nint 21h\n@@3:\n@@1: mov cs:tsrOK, true\nret\n\nPrintCopies:\ncmp cs:Self, 0\njz @@1\npush es ; Added -by- Mr. Lei\nmov es, cs:Self ; Aug 24, 1993\nmov al, es:Copies\ninc al ; Total RI copies\npush ax ; Set es = current mcb\nmov ax, cs\ndec ax\nmov es, ax\npop ax\nmov cx, 5 ; Search end of file name\nmov bx, 8\n@@10: inc bx\ncmp byte ptr es:[bx], 20h\njz @@20 cmp byte ptr es:[bx], 0ffh\njz @@20 cmp byte ptr es:[bx], 00h\njz @@20\nloop @@10\n@@20: ; Set current RI no\nmov byte ptr es:[bx], ':' ; RI:2\nmov byte ptr es:[bx+1], al\ncmp bx, 8+7\njnb @@30\nmov byte ptr es:[bx+2], 0\n@@30:\npop es\n\nmov cs:Msg_RI, al\nPrint Msg_2\n@@1: ret\n\n;---------------------------------------------------------------------------\n; Backup Interrupt Vector List\n;\nBackupVecList:\npush ds\npush cs\npop es\nxor si,si ; Vectors\nmov ds,si\nmovsw\nmovsw\nxor bx, bx\nmov cx,00ffh\n@@0: lodsw\nxchg dx, ax\nlodsw\ncmp ax, es:[di-2]\njnz @@1 cmp dx, es:[di-4]\njz @@2\n@@1: or bx, bx\njz @@3\ncall SaveCounter\n@@3: xchg dx, ax\nstosw\nxchg dx, ax\nstosw\nloop @@0\njmp @@4\n@@2: inc bx\nloop @@0\ncall SaveCounter\n@@4:\npop ds\nret\n;\n;-----------------------------------------------------------------------------\nBackupCVTchain:\nmov ax, 'VC'\nstosw\npush ax\npush bx\npush cx\npush ds\npush es\nmov ah, 52h\nint 21h ; ES:BX -- DOS table as described below\n\n; --------------------------------------------------------------------\npush es ; DPB chains\npush bx\nlds si, es:[bx]\npush cs\npop es\nmov ax, si\nstosw\nmov ax, ds\nstosw\nmov bx, cs:cvtOfs\nxor cx, cx\n@@1: mov al, ds:[si+1]\nstosb\nmov ax, ds:[si+bx+12h]\nstosw\nmov ax, ds:[si+bx+14h]\nstosw\ninc cx\nlds si, ds:[si+bx+18h]\ncmp si, -1\njnz @@1\n; mov ax, 5\n; mul cl\n; add ax, 4\n; add cs:tsrLength, ax\npop bx\npop es\n\n; --------------------------------------------------------------------\npush es ; DCB file control blocks\npush bx\nles bx, es:[bx+4]\n@@11: cmp word ptr es:[bx], -1\njz @@10\nles bx, es:[bx]\njmp @@11\n@@10:\nmov ax, es\nxchg ax, bx\npush cs\npop es\nstosw\nxchg ax, bx\nstosw\npop bx\npop es\n; add cs:tsrLength, 4\n\n; ---------------------------------------------------------------------\npush es ; Device Driver Chains\npop ds\nadd bx, 22h\nmov si, bx ; NUL\n\npop es\nmov ax, si\nstosw\nmov ax, ds\nstosw\nxor cx, cx\nxor bx, bx\n@@9: push si\nmov cl, 5\nrep movsw\ninc bx\npop si\nlds si, ds:[si]\nmov ax, si\ninc ax\njnz @@9\n\npop ds\npop cx\npop bx\npop ax\nret\n\n; ----------------------------------------------------------------------------\n\nBackupBiosData:\nmov ax, '--'\nstosw\npush ds\npush si\nmov si, 40h\nmov ds, si\nmov si, 10h\nmovsw\nmov si, 0a8h\nmovsw\nmovsw\nmov si, 49h\nmov cx, 1dh\nrep movsb\n\nmov si, 0f0h\nmov cx, 8\nrep movsw\npop si\npop ds\nret\n\n; ---------------------------------------------------------------------------\n\nBackupMemoryManager:\npush cs\npop es\npush ds\npush es\ncall SaveXMSstatus\ncall SaveEMSstatus\npop es\npop ds\nret\n\n;---------------------------------------------------------------------\n\nSaveEMSstatus:\ntest cs:status, EMSbit\njnz @@1\nret\n@@1:\nmov ax, 'ME'\nstosw\ninc di\ninc di\npush di\nmov ah, 4dh\nint 67h\npop di\nmov es:[di-2], bx\nshl bx, 1\nshl bx, 1\nadd di, bx\nret\n; -------------------------------------------------------------------\n\nSaveXMSstatus:\ncall XMS_test\ntest cs:status, XMSbit\njnz @@1\nret\n@@1:\nmov ax, 'MX'\nstosw\n\nmov dx, 1\ncall XMS_alloc\njnz @@_1\nxor cx, cx ; XMS alloc failure\nstosw\nret\n@@_1:\npush dx\nsub dx, MaxHandles  10\n@@2:\npush dx\ncall XMS_Lock\npop dx\njnz @@3 cmp bl, 0a2h\njnz @@4\nadd dx, 10\njmp @@2\n@@3: push dx\ncall XMS_unlock\npop dx\n@@4:\nmov cs:handle_begin, dx\npop dx\npush dx\ncall XMS_bstat\nxor cx, cx\nmov cl, bl\ninc cx\npop dx\ncall XMS_Free\nmov dx, cs:Handle_begin\n\npush cx\npush cs\npop es\nmov ax, cx\nstosw\n@@5: push dx\ncall XMS_Lock\npop dx\njnz @@6 cmp bl, 0a2h ; Handle invalid\njz @@7\n@@6: call XMS_unlock\nadd dx, 10\njmp @@5\n@@7: mov ax, dx\nstosw\nadd dx, 10\nloop @@5\npop cx\nret\n; ------------------------------------------------------------------\n\nXMS_test:\npush es\nmov ax, 4300h\nint 2fh\ncmp al, 80h\njnz @@9\nmov ax, 4310h\nint 2fh\nmov cs:XMS_control, bx\nmov cs:XMS_control[2], es\nor cs:Status, XMSbit\n@@9:\npop es\nret\n\nXMS_stat:\nmov ah, 0\ncall dword ptr cs:xms_control\nmov hma_exist, dl\nret\nhma_exist db 0\n\nXMS_alloc:\nmov ah, 9\ncall dword ptr cs:xms_control\nor ax, ax\nret\n\nXMS_lock:\nmov ah, 0ch\ncall dword ptr cs:xms_control\nor ax, ax\nret\n\nXMS_unlock:\nmov ah, 0dh\ncall dword ptr cs:xms_control\nor ax, ax\nret\nXMS_bstat:\nmov ah, 0eh\ncall dword ptr cs:xms_control\nor ax, ax\nret\n\nXMS_free:\nmov ah, 0ah\ncall dword ptr cs:xms_control\nor ax, ax\nret\n\n; ----------------------------------------------------------------------------\nEMS_test:\npush cs\npop ds\nmov dx, offset EMMname\nmov ax, 3d00h\nint 21h\njc @@2\nmov bx, ax\nmov ah, 3eh\nint 21h\nor cs:Status, EMSbit\n@@2:\nret\nEMMname db 'EMMXXXX0',0\n\n; -----------------------------------------------------------------------------\n\nSetHotKey:\nxor bx, bx\nlodsb\npush ax\n\n@@1: lodsb\ncmp al, 0dh\njz @@9 cmp al, 'C'\njnz @@2\nor bl, LeftCtrl\njmp @@1\n@@2:\ncmp al, 'c'\njnz @@3\nor bl, RightCtrl\njmp @@1\n@@3:\ncmp al, 'A'\njnz @@4\nor bl, LeftAlt\njmp @@1\n@@4:\ncmp al, 'a'\njnz @@5\nor bl, RightAlt\njmp @@1\n@@5:\ncmp al, 'S'\njnz @@6\nor bl, LeftShift\njmp @@1\n@@6:\ncmp al, 's'\njnz @@7\nor bl, RightShift\njmp @@1\n@@7: pop ax\njmp @Err\n@@9:\nmov cs:HotKey, bl\npop ax\nmov cs:AuxHotKey, 2dh ; 'X' scan key\ncmp al, '1'\njz @@29\nmov cs:AuxHotKey, 0\n@@29:\ncmp cs:Self, 0\njz @@30\npush es\nmov es, cs:Self\nmov es:HotKey, bl\nmov bl, cs:AuxHotKey\nmov es:AuxHotKey, bl\npop es\n@@30:\ncall GetRunFileName\nmov ax, 3d02h\nint 21h\njc @@10\npush cs\npop ds\nmov bx, ax\nmov cx, 4\nmov dx, 100h\nmov ah, 40h\nint 21h\njc @@10\nmov ax, 4200h\nxor cx, cx\nmov dx, 17h\nint 21h\njc @@10\nmov cx, 1\nmov dx, offset AuxHotKey\nmov ah, 40h\nint 21h\njc @@10\nmov ah, 3eh\nint 21h\n@@10:\nret\n\n\n; -----------------------------------------------------------------------\nGetRunFileName:\n; Return:\n; DS:DX Pointer of this run file name ASCIIZ string\npush ax\npush bx\npush cx\npush si\npush di\npush es\n\npush cs\npop es\nmov ax, es:[2ch]\nmov es, ax\nxor di, di\nmov cx, 1000h\nxor al, al\n@@1: repnz scasb\ncmp es:[di], al\nloopnz @@1\nmov dx, di\nadd dx, 3\npush es\npop ds\n\npop es\npop di\npop si\npop cx\npop bx\npop ax\nret\n\n; ---------------------------------------------------------------------------\nGetMachineID:\npush es\nmov KBD102,True\nmov ax,40h\nmov es,ax\ntest byte ptr es:[96h], 00010000b\njnz @@1\nmov Kbd102,False\n@@1:\nxor ax,ax\ndec ax\nmov es,ax\nmov al,es:[0eh]\nmov cs:MachineID, al\npop es\nret\n\n; ---------------------------------------------------------------------------\nModifyHotKeyPrompt:\ncmp cs:Kbd102, True\njz @@9\npush cs\npop es\npush cs\npop ds\nmov cx, 124\nmov si, offset KMsg2\nmov di, offset KMsg1\nrep movsb\n@@9: cmp cs:MachineID, 0fch\njna @@10\nmov cs:clsStrcolor, 70h ; Mono\nmov cs:clsStr, 70h\n@@10:\nret\n\n; ---------------------------------------------------------------------------\nPrintHotKeyPrompt:\nPrint Msg1\nmov al, cs:HotKey\nmov ah, al\nshr al, 1\nshr al, 1\nand ax, 33ch\nor al, ah\nmov dx, offset KeyMsg\n@@40:\nor ax, ax ; Mr. Lei 4/25/1993\njz @@_42\nshr al, 1\npush ax\njnc @@41\n\npush ax\ncall ColorDisplayStr\n; mov ah, 9\n; int 21h\npop ax\n\nor al, al\njz @@42\n\npush dx\nmov dx, offset PlusMsg\ncall ColorDisplayStr\n; Print PlusMsg\npop dx\n\n@@41: add dx, 12\npop ax\njmp @@40\n@@42: pop ax\n@@_42: cmp cs:AuxHotKey, 0\njz @@43 cmp cs:HotKey, 0 ; Mr. Lei\njz @@_43\nmov dx, offset PlusMsg\ncall ColorDisplayStr\n; Print PlusMsg\n@@_43: mov dx, offset AuxHotKeyName\ncall ColorDisplayStr\n; Print AuxHotKeyName\n@@43:\nPrint crlf\nret\n\nColorDisplayStr:\npush bx\npush cx\npush dx\npush si\nmov bl, 0fh\nmov si, dx\nxor bh, bh\nmov cx, 1\n@@1: lodsb\ncmp al, '$'\njz @@2\nor al, al\njz @@2\npush cx\nmov ah, 09h\nint 10h\nmov ah, 3 int 10h\ninc dl\nmov ah, 2 int 10h\npop cx\njmp short @@1\n@@2:\npop si\npop dx\npop cx\npop bx\nret\n\n; ---------------------------------------------------------------------------\nCmpSideKick:\nxor ax, ax\nmov es, ax\nles bx, es:[20h]\ncmp word ptr es:[bx-4], 4b53h\njnz @@1 cmp word ptr es:[bx-2], 4942h\njz @@2\n@@1: mov es, ax\nles bx, es:[94h]\ncmp word ptr es:[bx-2], 4b53h\njz @@2\nret\n@@2: or cs:Status, SKbit\nret\n\n; ---------------------------------------------------------------------------\nCmpDosVer: mov ah, 30h\nint 21h\ncmp al, 3\njb @@1 cmp al, 3\njna @@2\nmov cs:cvtOfs, 1\nret\n@@2: mov cs:cvtOfs, 0\nret\n@@1: Print DosVerErr\nmov ax, 4cffh\nint 21h\n\nDosVerErr db 'Sorry, DOS version too lower !',0dh,0ah,'$'\n\nHotKeyValid:\ncmp cs:HotKey, 0\njnz @@_1\ncmp cs:AuxHotKey, 0\njnz @@_1\nPrint HotKeyErr\nmov ax, 4cfeh\nint 21h\n@@_1: ret\n\nHotKeyErr db 'Sorry, please setup hotkey again. ',0dh,0ah,'$'\n\neof:\nends\nend Start\n\n; ------------- The End ! ---------------------------------------------------\n```\n"
  },
  {
    "id": 34385274,
    "title": "记录一个生产环境惨案",
    "description": "生产环境偶现一个 BUG，几率非常低。但是自动化测试从来没有失败过，测试环境中也重现不了，当然，生产环境上也很难出现，但是一旦出现，几乎没有办法排查，因为一旦这个 BUG 发生，关联的现象是相关日志也没有打印出来。分析日志没有打印出来，也提供了相关线索。通过查看日志打印逻辑，看到有使用 ​JS...",
    "custom_description": null,
    "updated_at": "2021-04-08T10:53:49.000Z",
    "created_at": "2021-04-08T10:53:49.000Z",
    "slug": "grzk22",
    "word_count": 549,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1617878536208-ae4dd834-141f-4cef-8b21-742a47a5d0f1.png",
    "body": "生产环境偶现一个 BUG，几率非常低。但是自动化测试从来没有失败过，测试环境中也重现不了，当然，生产环境上也很难出现，但是一旦出现，几乎没有办法排查，因为一旦这个 BUG 发生，关联的现象是相关日志也没有打印出来。<br />\n\n<a name=\"GJT3w\"></a>\n## 分析\n\n<br />日志没有打印出来，也提供了相关线索。通过查看日志打印逻辑，看到有使用 `JSON.stringify` ，于是猜想是不是被打印的对象中存在循环引用，导致 `JSON.stringify` 崩溃。但是看了下被序列化的对象，只是一个发 HTTP 请求的 `options` ，而且详细查看 `options` 的赋值操作，只是一个 Plain Old JavaScript Object，按理说不会造成 `JSON.stringify` 崩溃才对。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617878536208-ae4dd834-141f-4cef-8b21-742a47a5d0f1.png#align=left&display=inline&height=556&margin=%5Bobject%20Object%5D&name=image.png&originHeight=556&originWidth=1316&size=299180&status=done&style=none&width=1316)<br />\n<br />这个 HTTP 请求使用了一个公共库，难道是这个公共库修改了 `options` ？非常不愿意这样设想，但还是去查看了这个公共库的源码，一看果然，它给 `options` 增加了一个 `agent` 属性：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617878049070-c797a443-7afc-455b-88d4-3b1109860b57.png#align=left&display=inline&height=652&margin=%5Bobject%20Object%5D&name=image.png&originHeight=652&originWidth=2510&size=139830&status=done&style=none&width=2510)\n<a name=\"9Pf9Y\"></a>\n### 为什么只是偶现？\n没有进一步花时间调研，只是根据现象，可以断定在某些网络环境下，这个 `httpAgent` 或者 `httpsAgent` ，才会出现循环引用。而且，如果由于并不是所有该公共库的使用者，都会 `JSON.stringify(options)` ，所以，之前一直没有人发现和上报这个问题。<br />\n\n<a name=\"HvEDj\"></a>\n## 修复\n在向这个公共库传入 `options` 前，拷贝一个副本，并在后续打印日志时，确保使用那个未受污染的副本。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617879050086-627f04b6-cb10-4f5b-a5b5-91c162e9cb3e.png#align=left&display=inline&height=512&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1024&originWidth=2218&size=282288&status=done&style=none&width=1109)<br />\n\n<a name=\"Moo3h\"></a>\n## 教训\n\n- **不要修改入参！**尤其是 API 的提供者，只能读取上游传来的参数，而不能修改入参。否则就会造成副作用，而且很难被发现。\n- **不要滥用 `JSON.stringify` **，大多数日志目的的变量打印，可以用 `util.inspect` 代替。\n"
  },
  {
    "id": 33777562,
    "title": "使用 OIDC 在一个 Keycloak 中集成另一个 Keycloak 用户认证",
    "description": "这是一篇价值 7 元的文章，有人已经付费，免费分享给你！周末有人在知乎上通过付费咨询频道问我，如何在一个 Keycloak 中集成另一个 Keycloak 用户认证。由于目前知乎付费咨询只支持手机端，因此我当时的回答比较简略的。今天再用电脑把实现步骤一步一步写下来，争取让小白也能够顺利集成，因...",
    "custom_description": null,
    "updated_at": "2021-03-30T01:42:43.000Z",
    "created_at": "2021-03-29T12:56:37.000Z",
    "slug": "olenk1",
    "word_count": 4718,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1617022548905-6994bae0-6682-473e-93c1-2022d6e991d9.png",
    "body": "> 这是一篇价值 7 元的文章，有人已经付费，免费分享给你！\n> ![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617022548905-6994bae0-6682-473e-93c1-2022d6e991d9.png#align=left&display=inline&height=1122&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2244&originWidth=1080&size=749757&status=done&style=none&width=540)\n\n\n<br />周末有人在知乎上通过[付费咨询频道](https://www.zhihu.com/consult/conversation/1358907868830470144/question)问我，如何在一个 Keycloak 中集成另一个 Keycloak 用户认证。由于目前知乎付费咨询只支持手机端，因此我当时的回答比较简略的。今天再用电脑把实现步骤一步一步写下来，争取让小白也能够顺利集成，因此文章会略显啰嗦，高手请选择性地跳跃阅读或者直接忽略。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616994682876-43c371de-5e90-426c-bbcf-31fe07238ed2.png#align=left&display=inline&height=1122&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2244&originWidth=1080&size=477275&status=done&style=none&width=540)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617068555108-7bb84ba2-5ce5-48c0-bfcd-0d3bc4ac6f8a.png#align=left&display=inline&height=1122&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2244&originWidth=1080&size=1087024&status=done&style=none&width=540)<br />\n\n<a name=\"kMshr\"></a>\n## 问题重述\n\n\n> 我看了你关于《[基于 keycloak 的关注公众号即登录功能的设计与实现](https://zhuanlan.zhihu.com/p/349504145)》的文章，有点问题想和你沟通下。\n> 我现在有2个系统，a和b。它们都接入了keycloak，是2个realm。数据库也是隔离的。现在想要实现a系统通过b系统的账号登录。我想用类似微信登录的方式，把b系统当成微信。不知道这样是否合适，以及具体的实现感觉有点困难。\n\n<br />\n<a name=\"qu96G\"></a>\n## 最终实现\n\n\n完全可行，不用一行代码。\n\n<a name=\"PBWXz\"></a>\n## 在线演示\n\n<br />在《[基于 keycloak 的关注公众号即登录功能的设计与实现](https://zhuanlan.zhihu.com/p/349504145)》里已经搭建了一个 Keycloak 站点：https://keycloak.jiwai.win。在这名同学的问题里，即是系统 b。\n\n为了演示这名同学的系统 a，我搭建了另一个 Keycloak 站点：[https://lemur-2.cloud-iam.com/](https://lemur-2.cloud-iam.com/)。你可以点击[这里](https://lemur-2.cloud-iam.com/auth/realms/uniheart/protocol/openid-connect/auth?client_id=security-admin-console&redirect_uri=https%3A%2F%2Flemur-2.cloud-iam.com%2Fauth%2Fadmin%2Funiheart%2Fconsole%2F%23%2Fforbidden&state=3c79a33d-1849-4715-a5ab-ffdd449ffe2f&response_mode=fragment&response_type=code&scope=openid&nonce=d70ad94e-3b8d-45a4-9d95-fec3a956c3d6&code_challenge=5xGNw7hdadcP8DYRhVJOzEZJ3xVgIAyuWSeUH4JbBUE&code_challenge_method=S256)，然后选择使用系统 b 登录，就可以看到效果：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616995827736-655bebc5-be8a-40f2-9e9c-b744505978c9.png#align=left&display=inline&height=769&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1538&originWidth=1630&size=423561&status=done&style=none&width=815)<br />显然，Keycloak a 是一个刚部署好的 Keycloak，默认只支持用户名密码登录。但是为了使用 Keycloak b 登录，所以又增加了一个登录方式：UniHeart At Jiwai Win，这就是 https://keycloak.jiwai.win。选择这个登录方式，页面跳转到了 Keycloak a 的登录界面（如果看过前面的《[基于 keycloak 的关注公众号即登录功能的设计与实现](https://zhuanlan.zhihu.com/p/349504145)》，对这个界面很熟悉了吧）。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616996125963-96e683c0-0c1e-4b4a-84f0-588353391798.png#align=left&display=inline&height=745&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1490&originWidth=2066&size=223144&status=done&style=none&width=1033)<br />使用 Keycloak b 的任何登录方式（正好这个 Keycloak b 支持关注微信公众号即登录功能，但这个不是必须的），成功登录后，都会回到 Keycloak a，并且是已经登录状态：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616996372763-c30e5da5-828f-4f82-994a-c38a697c7404.png#align=left&display=inline&height=527&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1054&originWidth=1792&size=128991&status=done&style=none&width=896)<br />虽然页面显示用户没有权限查看该页面，但是说明登录已经成功。关于如何给该用户配置相关权限，可以自行探索。<br />如果已管理员账号登录 Keycloak a，在用户管理界面可以看到已经多了一个 Keycloak b 中的账号：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616996493374-edfd6ba2-ed07-4faa-b98c-b6385c184566.png#align=left&display=inline&height=668&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1336&originWidth=3236&size=322119&status=done&style=none&width=1618)\n<a name=\"ElirL\"></a>\n## 问题分析\n这名同学希望将两个不同的 Keycloak realm 用户打通，可以使用 Keycloak realm b 登录 Keycloak realm a。或者说，使用 Keycloak b 登录 Keycloak a，这是等价的。为了说明问题，我们不如建立两个 2 个 Keycloak 实例，不仅 realm 不同，整个 Keycloak 实例都不同（数据库也是独立的）。<br />\n<br />另外，这名同学看了之前的《[基于 keycloak 的关注公众号即登录功能的设计与实现](https://zhuanlan.zhihu.com/p/349504145)》一文，可能受到微信登录的影响。其实他这里想表达的和微信登录没有任何关系。\n\n<a name=\"XrgEP\"></a>\n## 基础知识回顾\n\n<br />正如前面所说，整个实现过程不需要一行代码，而且配置步骤也非常简单。但是在实施过程中，为什么会感到困难呢？很可能是需要补充一些基础知识。这里在详细列出实现步骤前，对相关知识做一个简单回顾，从而在阅读详细步骤时，不仅知其然，还能知其所以然。<br />\n\n<a name=\"lv7Ob\"></a>\n### 单点登录\n\n<br />Keycloak 是一个优秀的开源的单点登录工具。想使用系统 B的用户直接登录系统 A，而不用再次去系统 A 里注册，这也是典型的单点登录场景。单点登录有多种协议：<br />\n\n<a name=\"Eo5GO\"></a>\n### 单点登录认证协议\n\n<br />最知名的单点登录认证协议主要是 OpenId Connect 和 SAML。下面就来看看认证服务器和被保护的应用是怎么和这些协议打交道的。<br />\n\n<a name=\"5e6Ga\"></a>\n### OpenId Connect\n\n<br />OpenId Connect 通常简称为 OIDC，它是在 OAuth 2.0 的基础上扩展而成的认证协议。OAuth 2.0 只是一个构建认证协议的框架，并且很不完整，但是 OIDC 确实一个羽翼丰满的认证与授权协议。OIDC 严重使用 Json Web Token（JWT）标准。这些标准用紧凑和对网络友好的方式定义了 JSON 格式的唯一标记以及对数据进行数字化签名和加密的方法。<br />\n<br />OIDC 在 Keycloak 中的使用场景分为两种类型。第一种是应用请求 Keycloak 服务器来认证用户。当成功登录后，应用会收到一个名称为 `access_token` 的唯一身份标志符。这个唯一身份标志符包含了诸如用户名、电子邮箱、以及其他个人资料等等信息。 `access_token` 会被 realm 进行数字签名，并且包含用户的可访问信息（比如用户-角色映射），从而应用可以使用它来决定该用户被允许访问应用中的哪些资源（上面的在线演示中显示的已登录用户没有权限页面，就是因为拿到的 `access_token` 中没有相关的可访问信息）。<br />\n<br />第二种使用场景类型是客户端想获取远端服务的访问权限。在这个场景下，客户端请求 Keycloak 来获取一个访问令牌来代表用户调用远端服务。Keycloak 认证该用户后询问用户是否同意为该客户端授予访问权限。一旦用户同意授权，客户端就会收到访问令牌。这个访问令牌是由 realm 数字化签名过的。该客户端随后就可以使用这个访问令牌向远端服务发起 REST 调用了。这个 REST 服务抽取出访问令牌，验证令牌的签名，然后基于令牌中的可访问信息决定是否保护这个调用请求。<br />\n\n<a name=\"5csSS\"></a>\n### OIDC 认证流程\n\n<br />OIDC 有多种不同的方式为客户端或者应用提供用户认证并接收身份标记和访问令牌。你要使用那种方式很大程度上取决于应用或者客户端请求访问权限的类型。所有这些认证流程都在 OIDC 和 OAuth 2.0 的规格文档中详细描述了，所以这里只是稍稍提及一些必要内容。<br />\n\n<a name=\"2S8mC\"></a>\n#### 授权码流程\n\n<br />这是一个基于浏览器的协议，也是在验证和授权基于浏览器的应用时所推荐使用的。它严重依赖浏览器重定向来获取身份标记与访问令牌。总结如下：<br />\n\n1. 使用浏览器访问应用。这个应用会提醒用户当前还未登录，所以它指示浏览器重定向到 Keycloak 来认证。该应用会以查询参数的形式在浏览器重定向时向 Keycloak 传递一个回调 URL（即演示截图中的 redirect_uri），Keycloak 在完成认证后会使用到它。\n1. Keycloak 认证用户，并创建一次性、非常短时间有效的临时码。Keycloak 通过前面提供的回调 URL 重定向回到应用，同时将临时码作为查询参数附加到回调 URL 上。\n1. 应用抽取临时码，并且在后端通过不同于前端的网络渠道向 Keycloak 发起 REST 调用，使用临时码交换身份标记、访问令牌以及刷新令牌。一旦这个临时码在获取令牌中被使用过了，它就不能再次被使用了。这防止了潜在的重放攻击。\n\n\n<br />非常重要的一点是访问令牌通常有效期很短，一般在分钟级别过期。而刷新令牌由登录协议传送，允许应用在访问令牌过期后去获取一个新的访问令牌。这样一个刷新协议在受损系统中非常重要。如果访问令牌有效期很短，那么整个系统仅仅在被盗用的令牌剩余的有效期内是处于被攻击状态的。如果管理员吊销了访问权限，那么接下来的令牌刷新请求会失败。这样更加安全并且可伸缩性更好。<br />\n<br />该流程另一个重要的方面是所谓的开放客户端还是保密客户端的概念。保密的客户端在使用临时码交换令牌时需要提供客户端密钥。开放客户端则不需要。只要严格使用 HTTPS 并且客户端的重定向 URI 被严格注册，那么采用开放客户端完全没有问题。由于无法使用安全的方式传输客户端密钥，所以 HTML5/JavaScript 客户端不得不天然就属于开放客户端。再次强调，这仅仅在严格使用 HTTPS 并严格注册重定向 URI 时是可以的。<br />\n\n<a name=\"zBUCs\"></a>\n#### 隐式流程\n\n<br />这也是一个基于浏览器的协议，很类似授权码流程，只是请求量更少，也不需要刷新令牌。该流程不被推荐，因为存在访问令牌泄漏的可能性。比如由于令牌通过重定向 URI （详见下）传输，所以可能通过浏览器历史记录泄漏。并且，由于该流程没有为客户端提供刷新令牌的服务，所以访问令牌不得不设置一个更长的时间，不然当令牌失效后用户需要再次认证。Keycloak 不推荐这种流程但是仍然支持这种流程，因为它存在于 OIDC 和 OAuth 2.0 的规格文档中。总结如下：<br />\n\n1. 使用浏览器访问应用。应用提示用户当前还未登录，所以它指示浏览器重定向到 Keycloak 去认证。应用将回调 URL （一个重定向 URI）作为查询参数传递给 Keycloak，在认证完成后会被其使用。\n1. Keycloak 认证用户并且创建身份标记和访问令牌。Keycloak 使用之前提供的回调 URL 重定向回到应用并使用查询参数的方式额外添加身份标记和访问令牌在回调 URL zhong。\n1. 应用从回调 URL 中抽取身份标记和访问令牌。\n\n\n\n<a name=\"f0QOa\"></a>\n#### 资源拥有者密码凭据授权（直接访问授权）\n\n<br />这在 Keycloak 管理员控制台中指直接访问授权。当 REST 客户端希望代表用户获取令牌时使用该流程。这是一个 HTTP POST 请求，该请求中包含了用户的安全凭据和客户端 id，以及客户端的密钥（如果是保密客户端的话）。该用户的安全凭据随请求中的表单参数发送。这个 HTTP 响应中包含的身份标记、访问权限，以及刷新令牌。<br />\n\n<a name=\"s0IVA\"></a>\n#### 客户端凭据授权\n\n<br />这也是由 REST 客户端使用的，但不是代表一个外部用户去获取令牌，而是基于和客户端相关的元数据与服务账号的权限来创建一个令牌。<br />\n\n<a name=\"PwRyK\"></a>\n### Keycloak 服务器的 OIDC URI 端点\n\n<br />这一小节非常简单，但是对本文来说，却非常非常重要。因为在配置时，是直接要用到相关的端点的。<br />\n<br />Keycloak 会公布一系列的 OIDC 端点。当你使用客户端适配器与认证服务器进行 OIDC 沟通时，这些 URL 非常有用。这些全部都是相对 URL，且其根 URL 是使用 HTTP(S) 协议的，并且会在其 hostname 的基础上添加 /auth 路径。比如，典型的根 URL 是： https://keycloak.jiwai.win/auth，或者 http://localhost:8080/auth。<br />\n\n<a name=\"uMhfI\"></a>\n#### /realms/{realm-name}/protocol/openid-connect/auth\n在授权码流程中这个 URL 端点用来获取临时码，在隐式流程、直接授权或者客户端授权中，这个 URL 端点用来获取令牌。<br />\n\n<a name=\"o78hm\"></a>\n#### /realms/{realm-name}/protocol/openid-connect/token\n这个 URL 端点用来在授权码流程中将临时码转换成令牌。<br />\n\n<a name=\"fJOH9\"></a>\n#### /realms/{realm-name}/protocol/openid-connect/logout\n这是用来执行退出登录操作的 URL 端点。<br />\n\n<a name=\"xcJaM\"></a>\n#### /realms/{realm-name}/protocol/openid-connect/userinfo\n这个 URL 端点是用来提供用户信息服务的，其详细描述参见 OIDC 规格说明。<br />\n\n<a name=\"Vdser\"></a>\n#### /realms/{realm-name}/protocol/openid-connect/revoke\n这个 URL 端点用来做 OAuth 2.0 中的令牌吊销，其详细描述见 [RFC7009](https://tools.ietf.org/html/rfc7009)。<br />\n\n<a name=\"EFk1l\"></a>\n### SAML\nSAML 2.0 类似 OIDC，但是产生得更早并且更加成熟。由于本文使用 OIDC 解决这名知乎用户的问题，因此不对 SAML 做详细介绍。<br />\n\n<a name=\"gsa5V\"></a>\n### OpenID Connect 和 SAML 的对比\n\n<br />选择 OpenID Connect 还是 SAML？并不推荐简单的使用新的协议（OIDC）而不是用更老的但是更成熟的协议（SAML）这种一刀切的决策思路。<br />\n<br />但是 Keycloak 在大多数情况下都推荐使用 OIDC，这也是本文解决知乎网友问题时的做法。<br />\n<br />SAML 要比 OIDC 更加啰嗦一些。<br />\n<br />除了交换数据更加啰嗦之外，如果你仔细对比规格说明文档，你会发现 OIDC 是围绕 Web 相关的工作而设计的，但是 SAML 却是在 Web 的基础上增加了新的设施。比如，相对 SAML 来说，OIDC 在客户端的实现更加容易，因此 OIDC 更加适合 HTML5/JavaScript 应用。由于令牌是 JSON 格式的，他们更容易被 JavaScript 所消费。当然，OIDC 还有其他好特性使得在 Web 应用中实现安全更加容易。比如规格文档中提到的，使用 iframe 技巧，就很容易探测用户是否还处于登录状态。<br />\n<br />当然 SAML 也还是有其用武之地的。随着 OIDC 的规格文档的演进，你会发现它实现的越来越多的特性，早在几年前 SAML 就已经有了。人们一般使用 SAML 的原因是已有系统已经使用了 SAML 加固，以及 SAML 更加成熟。<br />\n\n<a name=\"frE9I\"></a>\n## 集成步骤\n\n<br />好了，说了这么多，是为了在后续实现步骤中，不迷失方向。实现步骤本身特别简单，关键是需要了解这些基础知识，否则就会觉得莫名其妙。<br />\n\n<a name=\"vG1u4\"></a>\n### 准备工作：搭建两个 Keycloak 系统\n\n- **Keycloak b**，我们将用它来登录其他系统，包括 Keycloak a。处于免费的考虑，可以使用 Heroku 平台。但是由于 Heroku 平台的限制，不得不对 Keycloak 做小的改造。改造后的 Keycloak 我放在了 Github 上：[https://github.com/Jeff-Tian/keycloak-heroku](https://github.com/Jeff-Tian/keycloak-heroku)，你可以点击 ReadMe 中的按钮一键部署到 Heroku 上。比如我部署好的 Keycloak b 是：https://keycloak.jiwai.win 。\n- **Keycloak a**，你同样可以使用 Heroku 再部署一个实例。也可以利用 [https://www.cloud-iam.com/](https://www.cloud-iam.com/) 提供的免费托管 Keycloak，它的限制是只能有 100 个用户。比如我部署好的 Keycloak a 是 [https://lemur-2.cloud-iam.com/](https://lemur-2.cloud-iam.com/)。\n\n\n\n<a name=\"s7frN\"></a>\n### 在 Keycloak b 中注册一个客户端 Keycloak a\n这很简单，如下图所示。关键配置已用红色框圈起来。\n\n用 Keycloak b 的管理员账号密码登录 Keycloak b，在相应的 Realm 中点击新建一个客户端，首先需要起个名字，比如命名为 UniHeart-Cloud-IAM。<br />\n<br />然后需要在客户端协议中选择“openid-connect”。所以说基础知识很重要，不然会在众多选项里迷失方向。<br />\n<br />随后在访问类型中，选择保密（如前面的基础知识里讲的，如果能够保证严格的 HTTPS 实施以及重定向 URI 的严格匹配，那么选择开放也是可以的）。<br />\n<br />最后，在重定向 URI 里配置好 Keycloak a 的重定向 URI（我填的是我在 Cloud IAM 中新部署的实例：https://lemur-2.cloud-iam.com/*），如果是选择开发的访问类型，那么这里的重定向 URI 必须一字不差。但是我这里选择了保密的访问类型，所以这里使用了通配符，保持灵活性。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617021266558-9dc9736a-3198-43ad-881b-47cf68383593.png#align=left&display=inline&height=929&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1858&originWidth=2360&size=340566&status=done&style=none&width=1180)<br />保存好后，切换到安全凭据面板，复制客户端密钥，后续步骤需要用到：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617021645842-86d215bf-5eb8-47a2-8ea3-3d1a8fa34dcb.png#align=left&display=inline&height=497&margin=%5Bobject%20Object%5D&name=image.png&originHeight=994&originWidth=2050&size=295950&status=done&style=none&width=1025)<br />注意在客户端认证中选择第二项：客户端 Id 和密钥的方式，然后复制密钥。\n<a name=\"PZEKc\"></a>\n### \n<a name=\"1by2F\"></a>\n### 在 Keycloak a 中添加 Keycloak b 为一个身份认证服务（idp）\n完成 Keycloak b 中的配置工作后，现在回到 Keycloak a，即新部署的 Cloud IAM 实例，使用 Keycloak a 的管理员账号密码登录，然后点击添加一个身份认证服务，选择 Keycloak openid connect 方式：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617021990702-8c3283b4-ce41-44bd-bf81-5e98b072dc8a.png#align=left&display=inline&height=528&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1056&originWidth=1758&size=439063&status=done&style=none&width=879)<br />首先为这个身份认证服务起个名字，比如 UniHeart At Jiwai Win<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617022010876-754deb05-f7cf-475f-89c7-1938fc4d46a9.png#align=left&display=inline&height=398&margin=%5Bobject%20Object%5D&name=image.png&originHeight=796&originWidth=2010&size=146715&status=done&style=none&width=1005)<br />然后的重点就是配置 OpenID Connect 了，基础知识又派上用场。这里最重要的是把 Keycloak b 服务器的 OIDC URI 端点中的\n\n- /realms/{realm-name}/protocol/openid-connect/auth 以及\n- /realms/{realm-name}/protocol/openid-connect/token \n- /realms/{realm-name}/protocol/openid-connect/userinfo 三个端点配置进去：\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617022164077-2fccf7a5-d8da-451b-b0bc-3ed26beac2b4.png#align=left&display=inline&height=982&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1964&originWidth=1942&size=255993&status=done&style=none&width=971)<br />注意在客户端认证项里选择以 POST 方式发送客户端密钥，并将 UniHeart-Cloud-IAM 填写在客户端 ID 中，同时将上一步复制好的密钥粘贴进入客户端密钥一栏。<br />\n\n<a name=\"siLvb\"></a>\n### 完成\n保存好就完成了。这时候点击右上角，退出当前管理员用户，就进入到了登录页面。你可以看到除了使用用户名密码登录方式之外，已经多了一个登录选项，这就是使用 Keycloak b 登录：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617022349248-b98ba6de-3870-4b3e-b455-b631a6d2d253.png#align=left&display=inline&height=260&margin=%5Bobject%20Object%5D&name=image.png&originHeight=520&originWidth=1608&size=114583&status=done&style=none&width=804)<br />[https://lemur-2.cloud-iam.com/auth/admin/uniheart/console/#/realms/uniheart/identity-provider-settings/provider/keycloak-oidc/uniheart-jiwai-win](https://lemur-2.cloud-iam.com/auth/admin/uniheart/console/#/realms/uniheart/identity-provider-settings/provider/keycloak-oidc/uniheart-jiwai-win)，这个链接，就是使用 Keycloak b 登录 Keycloak a 的完整链接。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1617022405326-b48ecaa4-9cda-4e45-bf81-ffd738b483ee.png#align=left&display=inline&height=713&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1426&originWidth=1468&size=291986&status=done&style=none&width=734)\n"
  },
  {
    "id": 33498483,
    "title": "10 年前老博客以 JAM Stack 方式满血复活！",
    "description": "我是从 2009 年开始写博客的，当时出于对技术的无知和对 .NET 的痴迷，采用了 BlogEngine.NET 作为博客站，并且部署到了国外的托管虚拟主机。后来穷得越来越支付不起虚拟主机的月租费，最终在 2014 年将其迁移到了 Azure 的免费托管平台：https://be-net.a...",
    "custom_description": null,
    "updated_at": "2021-03-25T10:58:54.000Z",
    "created_at": "2021-03-25T07:59:46.000Z",
    "slug": "hqz5vc",
    "word_count": 4077,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1616653088932-4ec7e8f4-1816-4a0a-97a7-80399ea2ec36.png?x-oss-process=image%2Fresize%2Cw_1500",
    "body": "我是从 2009 年开始写博客的，当时出于对技术的无知和对 .NET 的痴迷，采用了 BlogEngine.NET 作为博客站，并且部署到了国外的托管虚拟主机。后来穷得越来越支付不起虚拟主机的月租费，最终在 2014 年将其迁移到了 Azure 的免费托管平台：[https://be-net.azurewebsites.net/](https://be-net.azurewebsites.net/)，似乎不错，然而它在中国的访问速度并不理想，于是放弃了维护，不再在该平台上更新博文。<br />\n<br />不是不再写博文，只是换到其他免费平台上了。当然想过将自己的 BlogEngine.NET 迁移到其他平台，但是很不顺利，于是将其归档，准备等自己技术更加成熟后再重启它。<br />\n<br />直到今天，觉得自己的技术已经足够成熟，开始着手重启它，过程可以说是相当顺利和高效，最后的效果是 10 年前的自己想像不到的：[https://jeff-tian.jiwai.win/](https://jeff-tian.jiwai.win/) 。<br />\n\n- 免费\n- 全静态\n- 有强大的 CDN 支持\n- https\n- 和 git 无缝集成\n\n\n\n<a name=\"0Gn5S\"></a>\n## 总结\n\n<br />10 年前的基于 SQLite 数据库和 .NET 服务端的单站点动态博客系统，被改造成了 JAMStack 技术栈的全静态拥有 CDN 和 https 支持的单页应用。<br />\n\n<a name=\"TLYW7\"></a>\n## JAMStack\nJAMStack 是一种让网站更快、更安全、并且更易于伸缩的架构。它构建在开发者热爱的众多工具链和工作流基础之上，使得生产力最大化。<br />\n<br />其核心原则是预渲染和解耦，从而让站点和应用的发布拥有前所未有的信心和弹性。<br />\n<br />JAM 最早可能是 JavaScript、API 和 Markup 的缩写，即使用标记语言写好站点视图，数据和交互通过 JavaScript 和 API 技术进行增强。但是现在成为了一个架构范式。<br />\n\n<a name=\"4bOsP\"></a>\n### 特性\n<a name=\"a4sDW\"></a>\n#### 预渲染\n在 JAMStack 中，整个前端都是在构建过程中预生成为高度优化过的静态页面和资源。这个预渲染的过程使得站点可以直接从 CDN 加载，节省了成本、减少了复杂度和风险，不再依赖关键的基础设施和动态服务器。<br />\n<br />因为有很多流行的工具用来生成站点，像 Gatsby，Hugo，Jekyll，Eleventy，NextJs 等等，很多网页开发者已经熟悉了所需要的这些工具，所有转变成更有生产力的 JAMStack 开发者是很容易的。\n<a name=\"vfn75\"></a>\n#### 利用 JavaScript 增强\n通过标记语言和直接从 CDN 加载的 JAMStack 站点中的其他用户接口资源，这些站点可以很快并且安全的发布。在这个基础上，JAMStack 站点可以使用 JavaScript 和 API 和后端服务沟通，从而允许增强和个性化用户体验。\n<a name=\"n1lLE\"></a>\n#### 利用服务更进一步增强\n丰富的 API 生态成为了 JAMStack 站点的显著赋能者。由于拥有利用域名专家的能力，这些专家可以通过 API 来提供产品和服务，从而团队可以构建出更加复杂的应用，相比自己实现这样的能力需要承担更多的风险和额外的负担。现在我们可以将诸如身份认证、支付、内容管理、数据服务、搜索以及更多的事情外包出去了。<br />\n<br />JAMStack 站点可以在构建时利用这些服务，并且在运行时直接通过 JavaScript 在浏览器里直接利用这些服务。清晰解耦的这些服务带来了更大的可移植性和灵活性，同时还显著降低了风险。<br />\n\n<a name=\"OohZ3\"></a>\n### 好处\n采用 JAMStack 架构的站点和项目工作流拥有各种好处，其中的关键是：\n<a name=\"EY1Aq\"></a>\n#### 安全\nJAMStack 从托管基础设施中移除了变动的部分和系统，从而只需要更少的服务器和系统，减少了攻击面。<br />页面和资源都是预生成的文件，从而支持只读托管，这更进一步减少了可能的攻击向量。同时支持由提供商提供动态的工具和服务，这些专业提供商有专门的团队来对其专业的产品做安全加固，并且提供高标准的服务。<br />\n\n<a name=\"q3dHW\"></a>\n#### 可扩展\n流行的处理高流量负载的架构是通过额外添加缓存热门视图和资源的逻辑来实现的，而在 JAMStack 架构中，这是<br />默认提供的：它不再需要额外的复杂逻辑和工作流来决定哪些资源何时需要缓存，因为整个站点是完全通过 CDN 来提供服务的。\n\n采用 JAMStack 的站点，所有的一切都被缓存在内容分发网络中。拥有更简单的部署，天然内置的冗余，以及难以置信的高负载能力等特性。\n\n<a name=\"5iEXm\"></a>\n#### 高性能\n页面加载速度对用户的体验和交互影响非常大。 JAMStack 站点不再需要服务器在请求时生成页面视图，而是在构建时提前生成页面。<br />\n<br />因为所有的页面已经在离用户最近的 CDN 节点中可获取，所以没有昂贵和复杂的基础设施，也能达到极高的性能。<br />\n\n<a name=\"r96D2\"></a>\n#### 可维护\n托管复杂性降低后，维护性任务也减少了。一个预生成的站点，无论直接从单主机还是直接从 CDN 加载都不再需要专家团队来护航。<br />\n<br />这些维护工作都在构建时完成了，所以现在是一个生成好的站点，它非常稳定并且可以无服务器托管，从而不存在打补丁、升级或者运维的工作。<br />\n\n<a name=\"FjxFt\"></a>\n#### 可移植\nJAMStack 站点是预生成的。这意味着你可以使用各种托管服务来托管它们，并且可以在你喜欢的托管服务中自由转移。任何简单的静态托管方案就足够了。<br />\n<br />基础设施绑定，再见。<br />\n\n<a name=\"XBzif\"></a>\n#### 开发体验\nJAMStack 站点可以使用各种工具构建。它们不依赖特定技术或者奇怪的小众框架。相反，它们构建在被广泛使用的工具之上并且遵守被广泛使用的约定。这样的结果就是，寻找具有激情和天赋的开发者就没那么困难了。<br />\n<br />效率和效益相得益彰。<br />\n\n<a name=\"CYuaB\"></a>\n### 最佳实践\n如果你坚持使用一点点最佳实践，那么在构建 JAMStack 项目时，你就可以真的从这个技术栈里得到最大的收益。<br />\n\n<a name=\"yipmU\"></a>\n#### 将整个站点部署在 CDN\n因为 JAMStack 项目不依赖服务端代码，所以可以分布式部署而不是存活在单台服务器上。直接将整站托管在 CDN  解锁了无可匹敌的速度和性能。你的应用推到边缘的东西越多，用户体验就越好。\n<a name=\"wwTRL\"></a>\n#### 现代化的构建工具链\n充分利用现代化的构建工具。浏览器的世界变化太快就像一片难以适应的丛林，但是你仍然希望不必等到明天的浏览器问世而在今天就用上明天的网页标准。那么目前这意味着你要使用 Babel、PostCSS、Webpack 以及相关的工具。\n<a name=\"aast2\"></a>\n#### 自动化构建\n因为 JAMStack 标记是预生成的，所以改变内容后只有在下一次构建才可能发不到生产环境。自动化这个过程将节省你很多精力。你可以利用 webhooks，或者使用一个包含自动化服务的发布平台。\n<a name=\"I8qtw\"></a>\n#### 原子化部署\n由于 JAMStack 项目增长得非常之大，新的改变可能需要重新部署成百上千的文件。一个一个的文件上传方式会导致在这个过程结束前系统处于一个不一致的状态。你可以利用让你实现“原子化部署”的系统来避免这个情况的发生，这种平台只在所有改变的文件全部更新后才会发布到生产环境。\n<a name=\"wf1Cd\"></a>\n#### 即时缓存失效方案\n当构建-部署的循环变成一个常规行为后，你需要确保当一个部署上线后，它就真的上线了。通过确保你的 CDN 能够处理即时缓存清空来打消你的任何疑虑。\n<a name=\"FFfMA\"></a>\n#### 将所有东西都放在 Git 里\n在 JAMStack 项目中，任何人都能够通过 git 克隆，然后使用标准流程安装需要的依赖（比如 npm install）之后在本地运行整个项目。不需要数据库克隆，不需要复杂的安装。这减少了贡献者的难题，也简化了 staging 和 testing 工作流。<br />\n\n<a name=\"RlmFi\"></a>\n## 复活过程\n\n<br />在了解到了 JAMStack 架构后，我感觉自己的技术储备准备好了。其实博客文章一旦写好，就应该是一份静态文件，毕竟没有什么太多的动态信息。静态文件的好处是没有服务器端性能损耗，并且可以缓存到 CDN 的终端节点。所以完全没有必要去使用 .NET 之类的服务器端程序。整个复活过程如下：<br />\n\n<a name=\"sYP15\"></a>\n### 静态站点生成工具的选择\n这样的工具非常多，我最终选择了 Stackbit。通过创建一个 Stackbit 站点，就能看到项目目录结构，这个项目其实是一个典型的 Gatsby JS 项目加上一个 Stackbit 工具链。博客文章主要在 src/pages/posts 目录下，并且每篇博客都是一个如下结构的 markdown 文件：\n```markdown\n---\nstackbit_url_path: posts/url\ntitle: 标题\ndate: '时间'\nexcerpt: >-\n  摘要...\nthumb_img_path: >-\n  头图URL\ncomments_count: 评论数\npositive_reactions_count: 点赞数\ntags:\n  - 标签1\n  - 标签2\ncanonical_url: >-\n  原文链接\ntemplate: post\n---\n正文部分\n```\n因此在后续就需要将数据导出成上面的结构\n<a name=\"hKdmI\"></a>\n### 数据导出\n之前的 BlogEngine.NET，我使用了 SQLite 作为数据库，现在需要将里面的结构化数据导出成为一个 JSON 文件。\n<a name=\"pzcFx\"></a>\n#### 工具\n以前用过 SQLite Browser、DBeaver 等等桌面软件，这些 GUI 工具都支持 SQLite。但是今天隆重推荐使用 Metabase，自从我使用了它，就爱不释手，再也不想用以前的那些桌面软件了。它是一个 Web 应用，启动非常简单：<br />先去官网下载一个 jar 包文件 metabase.jar。然后在命令行输入： `java -jar metabase.jar` 。这样就在本定环境启动了 metabase，打开浏览器，输入 http://localhost:3000 即可打开 metabase，输入 SQLite 文件路径，就进入到主页面。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616653088932-4ec7e8f4-1816-4a0a-97a7-80399ea2ec36.png#align=left&display=inline&height=370&margin=%5Bobject%20Object%5D&name=image.png&originHeight=740&originWidth=1612&size=80133&status=done&style=none&width=806)<br />点击打开 BlogEngine.NET，可以看到表结构，对于迁移博文来说，比较关注 Be Posts 和 Be Post Tag：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616653259820-a2102261-366e-4244-8f42-4023376acd85.png#align=left&display=inline&height=877&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1754&originWidth=1860&size=304082&status=done&style=none&width=930)<br />你可以很方便地浏览一下自己发布博文的频率情况，只需要点击进入 Be Posts 然后选择 Date Created 字段并且点击分布：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616653416214-98ea0e96-5ffe-4b9e-9c63-782c603388ca.png#align=left&display=inline&height=392&margin=%5Bobject%20Object%5D&name=image.png&originHeight=784&originWidth=1372&size=104958&status=done&style=none&width=686)<br />就能立即得到曲线图：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616653470226-a0d98a4d-a902-4576-a721-037e24aa3319.png#align=left&display=inline&height=794&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1588&originWidth=2000&size=186843&status=done&style=none&width=1000)\n<a name=\"pftEL\"></a>\n#### SQL 查询\n我们需要将数据导出成在前面分析过的数据结构，最终的 SQL 查询如下：\n```sql\nSELECT PostId, 'src/pages/posts/' ||  (case when ltrim(Slug) <> '' then Slug else PostId end) || '.md' as filePath, 'posts/' || (case when ltrim(Slug) <> '' then Slug else PostId end)  as urlPath, '---\n' || \n    'stackbit_url_path: >-\n' || '  posts/'  || (case when ltrim(Slug) <> '' then Slug else PostId end) ||\n    '\ntitle: ''' || replace(Title, '''', '\"') || '''\n' ||\n    'date: ''' || DateCreated || '''\n' ||\n    'excerpt: >-\n  ' ||\n    replace(Description, '\n', '\n  ') || '\n' ||\n    'comments_count: 0\n' ||\n    'positive_reactions_count: 0\n' ||\n    'tags: \n  - ' ||\n    ifNull((select tags from (select PostId, GROUP_CONCAT(tag, '\n  - ') as tags\nFROM (select distinct PostId, tag from be_PostTag) as be_PostTag\nwhere be_PostTag.PostId = POST.PostId group by be_PostTag.PostId)), '') || '\n' ||\n    'canonical_url: https://be-net.azurewebsites.net/post/' || strftime('%Y', DateCreated) || '/' || strftime('%m', DateCreated) || '/' || strftime('%d', DateCreated) || '/' || (case when ltrim(Slug) <> '' then Slug else PostId end) || '\n' ||\n    'template: post\n' ||\n    '---\n' || PostContent AS data\nFROM\n(\nSELECT \"be_Posts\".\"PostRowID\" AS \"PostRowID\", \"be_Posts\".\"BlogID\" AS \"BlogID\", \"be_Posts\".\"PostID\" AS \"PostID\", \"be_Posts\".\"Title\" AS \"Title\", \"be_Posts\".\"Description\" AS \"Description\", \"be_Posts\".\"PostContent\" AS \"PostContent\", \"be_Posts\".\"DateCreated\" AS \"DateCreated\", \"be_Posts\".\"DateModified\" AS \"DateModified\", \"be_Posts\".\"Author\" AS \"Author\", \"be_Posts\".\"IsPublished\" AS \"IsPublished\", \"be_Posts\".\"IsCommentEnabled\" AS \"IsCommentEnabled\", \"be_Posts\".\"Raters\" AS \"Raters\", \"be_Posts\".\"Rating\" AS \"Rating\", \"be_Posts\".\"Views\" AS \"Views\", \"be_Posts\".\"Slug\" AS \"Slug\", \"be_Posts\".\"IsDeleted\" AS \"IsDeleted\"\nFROM \"be_Posts\"\nWHERE \"be_Posts\".\"IsDeleted\" = 0 \nLIMIT 1048576\n) as POST\n```\n主要就是从 BePosts 和 BePostTag 两张表中，把数据组合成需要的样子。\n<a name=\"GtIoX\"></a>\n#### 标签聚合\n标签表结构如下：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616654311214-cf55ef49-be36-403f-a33f-5e8502b4ac87.png#align=left&display=inline&height=339&margin=%5Bobject%20Object%5D&name=image.png&originHeight=678&originWidth=1674&size=154921&status=done&style=none&width=837)<br />首先需要将同一个 PostId 的 Tag 聚合到一行，然后将他们用 “【回车符】  -  ” 分割串联。可以这样做：\n```sql\nifNull((select tags from (select PostId, GROUP_CONCAT(tag, '\n  - ') as tags\nFROM (select distinct PostId, tag from be_PostTag) as be_PostTag\nwhere be_PostTag.PostId = POST.PostId group by be_PostTag.PostId)), '')\n```\n以上考虑到了数据为空的情况，这样就组成了 markdown 文件中的 Tags 部分。\n<a name=\"JrAeg\"></a>\n#### URL 生成\n博文 URL 的生成，优先使用 Slug，当 Slug 为空时，回退到使用 PostId：\n```sql\n'posts/' || (case when ltrim(Slug) <> '' then Slug else PostId end)  as urlPath\n```\n<a name=\"TLwpw\"></a>\n#### 导出为 JSON\n除了以上两个比较特殊的 SQL 处理，其他的 SQL 都是平凡的。将他们运行，得到结果后，选择导出为 JSON 文件：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616655400934-6c85976a-8e81-454b-a49e-8b944e0fac59.png#align=left&display=inline&height=863&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1726&originWidth=1776&size=347844&status=done&style=none&width=888)<br />得到的 JSON 文件是这样的：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616655491959-c4b8f7d0-fb9e-4b24-80f9-419d003d2d15.png#align=left&display=inline&height=708&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1416&originWidth=3392&size=854775&status=done&style=none&width=1696)\n<a name=\"XcETK\"></a>\n### 静态文件生成\n如上所示，得到的 JSON 文件是一个数组，需要为其中每一个元素创建一个对应的文件。通过分析 Stackbit 官方的 stackbit-pull 库，可以发现我们只需要将其从远端服务拉取 JSON 响应的过程简化成直接从本地读取即可，剩下的创建文件的逻辑一模一样。所以，我对其稍加改造后，可以这样来运行：\n```shell\nnpx -p @jeff-tian/stackbit-pull stackbit-pull-json --json-file=/path/to/json\n```\n这时，项目的 src/pages/posts 目录下已经有了成百上千的文件。通过 `npm run develop` 本地运行起来，完美！\n```shell\n➜ npm run develop\n\n> @jeff-tian/space@0.0.1 develop /Users/tianjef/jeff-tian/unicms-copy-01\n> gatsby develop\n\nsuccess open and validate gatsby-configs - 0.088s\nYou can now view @jeff-tian/space in the browser.\n⠀\n  http://localhost:8000/\n⠀\nView GraphiQL, an in-browser IDE, to explore your site's data and schema\n⠀\n  http://localhost:8000/___graphql\n⠀\nNote that the development build is not optimized.\nTo create a production build, use gatsby build\n```\n打开 http://localhost:8000 <br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616657619347-2f2de750-55a7-4b64-8c8e-b231a1ab88a0.png#align=left&display=inline&height=964&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1928&originWidth=2720&size=3226428&status=done&style=none&width=1360)\n<a name=\"DKdC7\"></a>\n#### 图片 URL 替换\n其实没有那么完美，比如图片全部显示不了。原因是图片上传到 BlogEngine.NET 后，其 src 被设置成了一个需要动态处理的 URL：image.axd?picture=xxxx。通过 VSCode 或者 WebStorm 这样的 IDE 打开项目，使用正则表达式做一个替换，就可以解决问题。具体的正则表达式是这样的：\n```bash\n查找：(href|src)=\"[^\"]+?zizhujy\\.com\\/blog\\/image\\.axd\\?picture=([^\"]+?)\"\n\n替换成：$1=\"https://raw.githubusercontent.com/Jeff-Tian/blogeng\nine.net/master/Source/BlogEngine/BlogEngine.NET/App_Data/files/$2\"\n```\n以及：\n```bash\n查找: (href|src)=\"[^\"]+?zizhujy\\.com\\/BlogEngine\\/BlogEngine\\/BlogEngine.NET\\/image\\.axd\\?picture=([^\"]+?)\" \n\n替换成： $1=\"https://raw.githubusercontent.com/Jeff-Tian/blogengine.net/master/Source/BlogEngine/BlogEngine.NET/App_Data/files/$2\"\n```\n<a name=\"hpIEY\"></a>\n### 上传到 github\n将整个项目推到 github\n```shell\ngit commit -am \"sync blogengine.net\"\ngit push -u origin master\n```\n<a name=\"EjV9M\"></a>\n### netlify 自动部署\n使用 github 登录 netlify，同步 github 项目。当 GitHub 项目有新的推送时，netlify 会自动生成网站并且部署：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616657735012-7298e081-02fa-4a04-bea6-28b007b0d585.png#align=left&display=inline&height=695&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1390&originWidth=2654&size=298401&status=done&style=none&width=1327)<br />netlify 发布成功后，就可以访问生产站点了：[https://jeff-tian.jiwai.win](https://jeff-tian.jiwai.win) 。\n"
  },
  {
    "id": 33412660,
    "title": "如何评价需求提得好不好？",
    "description": "答案：评审的问题数量一页纸需求参考五步法教你几招发现需求的问题1. 是否描述完整了场景。场景的描述是否以用户为视角；如果改为以对象为视角，会不会有新发现。2. 条件完整性。是否采用了判定矩阵（基于笛卡尔积）列举了所有的可能性。（通常都会在这里栽跟头）3. 是否统一了术语。（通常都做不到）4. ...",
    "custom_description": null,
    "updated_at": "2021-03-23T08:19:23.000Z",
    "created_at": "2021-03-23T08:18:47.000Z",
    "slug": "vrrwbf",
    "word_count": 353,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1616487447549-4b8f02dc-215c-4d41-b383-dac741497d14.png?x-oss-process=image%2Fresize%2Cw_1500",
    "body": "答案：评审的问题数量<br />\n\n<a name=\"A0zyu\"></a>\n## 一页纸需求参考五步法\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616487447549-4b8f02dc-215c-4d41-b383-dac741497d14.png#align=left&display=inline&height=870&margin=%5Bobject%20Object%5D&name=image.png&originHeight=870&originWidth=1516&size=732534&status=done&style=none&width=1516)<br />\n\n<a name=\"89qro\"></a>\n## 教你几招发现需求的问题\n1. 是否描述完整了场景。场景的描述是否以用户为视角；如果改为以对象为视角，会不会有新发现。<br />2. 条件完整性。是否采用了判定矩阵（基于笛卡尔积）列举了所有的可能性。（通常都会在这里栽跟头）<br />3. 是否统一了术语。（通常都做不到）<br />4. 边界的定义。所有涉及到时间、费用、距离、容量等的地方都有上限，下限，是否考虑了计算机本身的时间、容量等的限制。<br />5. 异常条件。是否写了反面的情况，是否写了计算机不能工作的情况（比如磁盘容量满了）。<br />6. 是否容易阅读。长篇文字的，直接打回。肯定有问题。<br />7. 能否测试。比如说：随机算法怎么测试？<br />8. 是否考虑了并发。一般都没考虑。<br />9. 是否有逻辑错误，前后矛盾的地方。小的需求不容易出现这种问题，多个人写的，容易出现。\n\n10. 是否考虑了安全。通常都会被忽略。\n"
  },
  {
    "id": 33352510,
    "title": "在 eggjs 中集成 Keycloak 用户认证",
    "description": "Keycloak 是一个优秀的开源身份与访问管理系统，旨在为现代的应用程序和服务提供包含身份管理和访问管理功能。不少企业包含红帽公司，都将其作为其站点的单点登录工具，通过使用 Keycloak，只需要少量编码甚至不用编码，就能很容易地使应用程序和服务更安全。今天以 eggjs 为例子，展示只需...",
    "custom_description": null,
    "updated_at": "2021-03-22T10:28:41.000Z",
    "created_at": "2021-03-22T10:28:41.000Z",
    "slug": "evgbbz",
    "word_count": 768,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1616407284550-318d0e4f-ce1a-4bba-b1ac-a54a27718203.png?x-oss-process=image%2Fresize%2Cw_1500",
    "body": "> Keycloak 是一个优秀的开源身份与访问管理系统，旨在为现代的应用程序和服务提供包含身份管理和访问管理功能。不少企业包含红帽公司，都将其作为其站点的单点登录工具，通过使用 Keycloak，只需要少量编码甚至不用编码，就能很容易地使应用程序和服务更安全。\n\n<br />\n<br />今天以 eggjs 为例子，展示只需要少量代码，便可以利用 Keycloak 来保护你的 eggjs 服务。eggjs 是一个基于 NodeJs 的优秀企业级应用框架，不少企业使用它构建自己的服务（我曾经服务过的一个创业公司，基本上所有服务都是一个 eggjs 实例）。\n\n\n\n<a name=\"rXAzh\"></a>\n## 效果演示\n\n<br />请访问 [https://uniheart.pa-ca.me/keycloak/login](https://uniheart.pa-ca.me/keycloak/login) 体验。（**请忍受比较慢的响应速度，因为服务器端使用了免费的服务，并且部署在国外**）<br />\n<br />**打开 [https://uniheart.pa-ca.me/keycloak/login](https://uniheart.pa-ca.me/keycloak/login) 链接，会自动跳转到 Keycloak 登录页面：**<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616407284550-318d0e4f-ce1a-4bba-b1ac-a54a27718203.png#align=left&display=inline&height=635&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1270&originWidth=1840&size=162629&status=done&style=none&width=920)\n\n以上“微信”按钮，是按照《[基于 keycloak 的关注公众号即登录功能的设计与实现](https://zhuanlan.zhihu.com/p/349504145)》一文的介绍，实现的关注公众号即登录功能。推荐使用，因为更方便，但是仅对前 100 名用户有效，因为这是一个测试公众号，受此限制。\n\n\n<br />**无论是通过邮箱/密码的方式，还是关注公众号的方式，登录完成后，会跳转回 **[**https://uniheart.pa-ca.me/keycloak/login**](https://uniheart.pa-ca.me/keycloak/login)** 页面，目前这个页面只返回认证通过的 Keycloak 信息，比如：**<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616407601445-c9115200-bc00-45d0-b94c-3a97abfba8da.png#align=left&display=inline&height=937&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1874&originWidth=3074&size=986071&status=done&style=none&width=1537)<br />\n\n<a name=\"l89aI\"></a>\n## 将 Keycloak 集成到 eggjs 的步骤\n<a name=\"iIXoN\"></a>\n### 首先在 Keycloak 中新建一个 Realm\n只需要取个名字就好：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616408010616-a74120da-a9e3-439c-9c67-81d68fc6be01.png#align=left&display=inline&height=349&margin=%5Bobject%20Object%5D&name=image.png&originHeight=698&originWidth=2356&size=129902&status=done&style=none&width=1178)\n<a name=\"M5hFC\"></a>\n### 然后在这个 Realm 中创建一个客户端\n取一个名字，后面要用到。然后配置好你的 eggjs 服务所公开的终端节点（域名+路径），可以使用通配符。比如：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616407827840-05b8e780-76e8-4317-8a23-3dd48d23c6b4.png#align=left&display=inline&height=924&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1848&originWidth=2380&size=328345&status=done&style=none&width=1190)\n<a name=\"UzH7x\"></a>\n### 然后，在你的 eggjs 项目根目录下添加一个 `keycloak.json` 文件\n内容如下，注意相关字段要和 Keycloak 对应。realm 对应于刚刚创建的 Realm，resource 对应于刚刚创建的客户端名称。\n```json\n{\n    \"realm\": \"UniHeart\",\n    \"auth-server-url\": \"https://keycloak.jiwai.win/auth\",\n    \"ssl-required\": \"external\",\n    \"resource\": \"UniHeart-Client\"\n}\n\n```\n<a name=\"a5mcg\"></a>\n### 随后，添加 @jeff-tian/egg-keycloak 插件\n```shell\nnpm install --save @jeff-tian/egg-keycloak\n```\n<a name=\"aQE6s\"></a>\n### 在 config/plugin.ts 文件中，增加如下配置：\n```typescript\n...\n  keycloak: {\n    enable: true,\n    package: '@jeff-tian/egg-keycloak',\n  },\n...\n```\n<a name=\"4KvGd\"></a>\n### 最后，在你想要保护的路由前，增加 Keycloak 中间件：\n比如，在 /app/router/keycloak/index.ts 文件中，这样保护 /keycloak/login 路由（正如示例所做的）。**关键就在于添加的 `keycloak.protect()` 中间件。**\n```typescript\nimport { Application } from 'egg'\n\nexport default (app: Application) => {\n  const { router } = app\n\n  const subRouter = router.namespace('/keycloak')\n\n  subRouter.get(\n    'keycloak.login',\n    '/login',\n    app.keycloak.protect(),\n    async ctx => {\n      ctx.body = ctx.session['keycloak-token']\n    },\n  )\n}\n\n```\n<a name=\"MOP4Q\"></a>\n### 完成！\n"
  },
  {
    "id": 33145677,
    "title": "微服务架构、框架与平台",
    "description": "微服务架构微服务架构是一种架构风格，这种架构下的应用是由一系列的细粒度、互相连接的服务组成的，其发展如火如荼，甚至已经成为构建弹性可扩展应用的新标准。The Software House发布的2020年微服务状态报告显示微服务首先在扩张性和性能上表现不俗，其次在搭建新项目、可维护性和可调试性、...",
    "custom_description": null,
    "updated_at": "2021-03-18T12:38:37.000Z",
    "created_at": "2021-03-18T12:38:37.000Z",
    "slug": "erao9g",
    "word_count": 783,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1616067954989-3510742e-9ea8-4139-9aae-f5aa962621c3.png",
    "body": "<a name=\"rpdtP\"></a>\n## 微服务架构\n微服务架构是一种架构风格，这种架构下的应用是由一系列的细粒度、互相连接的服务组成的，其发展如火如荼，甚至已经成为构建弹性可扩展应用的新标准。The Software House发布的2020年微服务状态报告显示微服务首先在扩张性和性能上表现不俗，其次在搭建新项目、可维护性和可调试性、工作效率、团队协作上都得到高分。<br />\n\n<a name=\"jqoif\"></a>\n## 应用现状\n奥莱利技术咨询最近发布的关于云计算增长的技术雷达问卷调查报告显示, 52%以上的企业或组织正在使用微服务架构。其中使用年限超过3年的占比在28%以上。![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616067954989-3510742e-9ea8-4139-9aae-f5aa962621c3.png#align=left&display=inline&height=370&margin=%5Bobject%20Object%5D&name=image.png&originHeight=370&originWidth=836&size=35432&status=done&style=none&width=836)<br />\n\n<a name=\"GoLi2\"></a>\n## 开发语言分布\n微服务架构对编程语言没有要求，其解耦能力使得不同项目可以用不同的编程语言实现，只需要提供标准接口供互相调用即可。虽然如此，但调查显示，NodeJs占据了统治地位（本来很长的一段时间里，微服务都是和通常由Java或者.NET实现的企业级的大型解决方案相关联的），占比65%，远超出第二名Java和第三名.NET；而其中的26%将NodeJs作为其微服务里唯一的技术栈。可以看出NodeJs不仅变得越来越流行，还和微服务结合得相当好。而当前“微服务加Serverless”模型正在成为云计算的新趋势，在各个云厂商提供的Serverless服务中，NodeJs都是绝对的一等公民。<br />![Picture1.jpg](https://cdn.nlark.com/yuque/0/2021/jpeg/221736/1616068112909-a4c2533d-3b3e-44f8-b2a8-bc78ac8031c8.jpeg#align=left&display=inline&height=925&margin=%5Bobject%20Object%5D&name=Picture1.jpg&originHeight=925&originWidth=1274&size=94012&status=done&style=none&width=1274)\n<a name=\"kLjMG\"></a>\n## 趋势\n主流的微服务开源框架有阿里的 Dubbo 和 Netflix 的 Spring Cloud，而 Google 的 Kubernetes 则是平台级的微服务框架。虽然微服务架构本身对语言没有要求，而且 NodeJs 被广泛使用，但是主流的微服务开发框架比如 Dubbo 和 Spring Cloud 还是只支持 Java。尽管如此， Kubernetes 的出现使得其他语言也能应用在微服务架构中。比如以上报告显示出的 NodeJs 的极高使用占比，很可能就是因为使用 NodeJs 的公司同时也使用了 Kubernetes。正好我本身服务过的两家公司，一家是小型创业公司，一家是全球知名跨国企业，都是使用了 Kubernetes 和 NodeJs 技术栈。可以预见到 Kubernetes 是一个长期趋势。<br />\n\n<a name=\"LtDtE\"></a>\n## Dubbo、Spring Cloud 和 Kubernetes 对比\n个人只用过 Kubernetes，对 Dubbo 和 Spring Cloud 一窍不通，这里贴上几张架构师杨波在极客时间的视频课上分享的对比图，相信看了之后小白也能秒懂：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616070738717-9bb0b1b9-9728-428e-b071-96f77c689bb6.png#align=left&display=inline&height=1027&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2054&originWidth=3274&size=2798275&status=done&style=none&width=1637)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616070751873-e9601ceb-c238-49e1-b845-66d78f97dfec.png#align=left&display=inline&height=1027&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2054&originWidth=3274&size=2372963&status=done&style=none&width=1637)<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1616070752867-631656a7-5cb8-42b0-8ad3-065704f29ca1.png#align=left&display=inline&height=1027&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2054&originWidth=3274&size=2097267&status=done&style=none&width=1637)<br />\n\n<a name=\"1T0Fm\"></a>\n## 参考文献\n\n- [MAGOULAS R, SWOYER S. Cloud Adoption in 2020[EB/OL]. 2020.https://www.oreilly.com/radar/cloud-adoption-in-2020/.]()\n- [HOUSE T S. State of Microservices 2020[EB/OL]. 2020.https://tsh.io/state-of-microservices/.]()\n- 杨波. Dubbo、SpringCloud和Kubernetes该如何选型？[EB/OL]. 2020. [http://gk.link/a/107fZ](http://gk.link/a/107fZ) .\n\n\n\n"
  },
  {
    "id": 33013354,
    "title": "缓存重定向方案设计",
    "description": "缓存重定向这个名字，是我的杜撰，指的是一个不带缓存的接口，通过重定向，跳转到一个缓存接口来为客户端提供服务。本质上这个不带缓存的接口，只实现缓存键的计算，从而引导客户端拿到缓存的结果。一个实际应用查询离我最近功能需求：下拉列表展示商店，并将这些商店按照离手机当前地理位置的距离从近到远排序。接口...",
    "custom_description": null,
    "updated_at": "2021-03-17T05:39:17.000Z",
    "created_at": "2021-03-17T05:39:17.000Z",
    "slug": "bzr09l",
    "word_count": 1238,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1615952980703-30ca44f2-f070-4b02-b1d5-73569a8680e0.png",
    "body": "> 缓存重定向这个名字，是我的杜撰，指的是一个不带缓存的接口，通过重定向，跳转到一个缓存接口来为客户端提供服务。本质上这个不带缓存的接口，只实现缓存键的计算，从而引导客户端拿到缓存的结果。\n\n\n\n<a name=\"lz5tJ\"></a>\n## 一个实际应用\n查询离我最近功能需求：下拉列表展示商店，并将这些商店按照离手机当前地理位置的距离从近到远排序。<br />\n\n<a name=\"N0xDE\"></a>\n## 接口设计\n终端节点：GET /locations<br />参数：query string，包含 经度、纬度<br />\n\n<a name=\"9yP97\"></a>\n## 查询的后端实现\n简单起见，可以认为最终从数据库查询时的 SQL 大致长这样：\n```sql\nSELECT * \nFROM location_table\nWHERE coordinates IS NOT NULL and \n\tcoordinates ST_CONTAINS(ST_GeomFromText(:wkxString)\n```\n其中 wksString 参数使用了 `wks` 库将传入的经纬度进行地理位置编码。<br />\n\n<a name=\"wXvx6\"></a>\n## 挑战点\n如果每次请求过来都从数据库查询，在请求量超过一定数量时，数据库会扛不住。<br />\n\n<a name=\"zTvdi\"></a>\n## 分析\n由于商店数据更新特别低频，所以对于同样的请求，返回结果在长时间内都是一样的，显然可以做缓存。这样的话，只需要在返回头里指定对于同样的查询参数，给一个比较长的缓存时间就好了。<br />但是，再进一步优化，如果有两个人相隔很近，手机传过来的请求里的经纬度，只有小数点后几位的差别，那么结果也是一样的，但是由于请求参数不是严格一致，因此不能击中缓存从而查询链条又会走到数据库。如果要将经纬度相近的查询请求，对应到同一个缓存键，那么，可以让客户端再传参时对经纬度数字做一个四舍五入，从而击中同一个缓存键。如果客户端不受控，那么这个四舍五入的逻辑，需要放到服务器端来做。<br />比如第一期预计只有少量用户，因此以上接口和对应的客户端也已上线。上线后吸引了大量用户，在用户量剧增的情况下，眼看着服务器在短期内就快要扛不住了，需要将现有版本进行迭代升级，就可以采用缓存重定向方案，从而不需要改动客户端。<br />\n\n<a name=\"Q63E6\"></a>\n## 缓存重定向方案\n经过以上分析后，得出的结论是 GET /locations 终端节点，其返回结果不设置缓存。它只负责四舍五入的逻辑，将请求重定向至 GET /locations/cached 终端节点，将同一个位置附近范围的请求，都能对应到同样的查询参数，从而实现一片区域内，只有第一个人搜索时会查询到数据，后续请求的结果都从缓存获取。<br />\n\n<a name=\"C6tvY\"></a>\n### 架构图大致如下\n![arch.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1615952980703-30ca44f2-f070-4b02-b1d5-73569a8680e0.png#align=left&display=inline&height=112&margin=%5Bobject%20Object%5D&name=arch.png&originHeight=112&originWidth=642&size=26592&status=done&style=none&width=642)\n<a name=\"g9qfs\"></a>\n### 请求响应的时序图如下\n![](https://cdn.nlark.com/yuque/__puml/f25a4909eca27e771f1634796ec90388.svg#lake_card_v2=eyJjb2RlIjoiQHN0YXJ0dW1sXG5cbmF1dG9udW1iZXJcblxuYWN0b3IgXCLnlKjmiLdcIiBhcyBVc2VyXG5wYXJ0aWNpcGFudCBcIuWuouaIt-err1wiIGFzIEJyb3dzZXJcbnBhcnRpY2lwYW50IFwiQ0ROXCIgYXMgY2RuXG5wYXJ0aWNpcGFudCBcIuacjeWKoeerr1wiIGFzIFNlcnZlciAjb3JhbmdlXG5wYXJ0aWNpcGFudCBcIuaVsOaNruW6k1wiIGFzIGRiXG5cbmFjdGl2YXRlIFVzZXJcblxuVXNlciAtPiBCcm93c2VyOiDngrnlh7vigJznprvmiJHmnIDov5HigJ3nmoTllYblupdcbmFjdGl2YXRlIEJyb3dzZXJcblxuQnJvd3NlciAtPiBjZG46IEdFVCAvbG9jYXRpb25zP2xhdD0xLjEyMzQ1JmxuZz0yLjU0MzIxXG5hY3RpdmF0ZSBjZG5cbmNkbiAtPiBjZG46IOayoeaciSAvbG9jYXRpb25zP2xhdD0xLjEyMzQ1JmxuZz0yLjU0MzIxIOeahOe8k-WtmFxuY2RuIC0-IFNlcnZlcjogR0VUIC9sb2NhdGlvbnM_bGF0PTEuMTIzNDUmbG5nPTIuNTQzMjFcbmRlYWN0aXZhdGUgY2RuXG5hY3RpdmF0ZSBTZXJ2ZXJcblNlcnZlciAtPiBCcm93c2VyOiBSZWRpcmVjdCAvbG9jYXRpb25zL2NhY2hlZD9sYXQ9MS4xJmxuZz0yLjVcbmRlYWN0aXZhdGUgU2VydmVyXG5cbkJyb3dzZXIgLT4gY2RuOiBHRVQgL2xvY2F0aW9ucy9jYWNoZWQ_bGF0PTEuMSZsbmc9Mi41XG5hY3RpdmF0ZSBjZG5cbmNkbiAtPiBjZG46IOayoeaciSAvbG9jYXRpb25zL2NhY2hlZD9sYXQ9MS4xJmxuZz0yLjUg55qE57yT5a2YXG5jZG4gLT4gU2VydmVyOiBHRVQgL2xvY2F0aW9ucy9jYWNoZWQ_bGF0PTEuMSZsbmc9Mi41XG5hY3RpdmF0ZSBTZXJ2ZXJcblNlcnZlciAtPiBkYjogU1FMIOafpeivolxuYWN0aXZhdGUgZGJcbmRiIC0-IFNlcnZlcjogW-WVhuW6lzEsIOWVhuW6lzIsIC4uLl1cbmRlYWN0aXZhdGUgZGJcblNlcnZlciAtPiBjZG46IFvllYblupcxLCDllYblupcyLCAuLi5dXG5ub3RlIGxlZnQgb2YgU2VydmVyOiDorr7nva7nvJPlrZjlpLRcbmRlYWN0aXZhdGUgU2VydmVyXG5cbmNkbiAtPiBCcm93c2VyOiBb5ZWG5bqXMSwg5ZWG5bqXMiwgLi4uXVxuZGVhY3RpdmF0ZSBjZG5cblxuQnJvd3NlciAtLT4gVXNlclxuZGVhY3RpdmF0ZSBCcm93c2VyXG5cblVzZXIgLT4gVXNlcjog6LWw5Yiw5Y-m5LiA5Liq5L2N572uXG5cblVzZXIgLT4gQnJvd3Nlcjog54K55Ye74oCc56a75oiR5pyA6L-R4oCd55qE5ZWG5bqXXG5hY3RpdmF0ZSBCcm93c2VyXG5Ccm93c2VyIC0-IGNkbjogR0VUIC9sb2NhdGlvbnM_bGF0PTEuMTIzNDYmbG5nPTIuNTQzMTlcbmFjdGl2YXRlIGNkblxuY2RuIC0-IGNkbjog5rKh5pyJIC9sb2NhdGlvbnM_bGF0PTEuMTIzNDYmbG5nPTIuNTQzMTkg55qE57yT5a2YXG5jZG4gLT4gU2VydmVyIDogR0VUIC9sb2NhdGlvbnM_bGF0PTEuMTIzNDYmbG5nPTIuNTQzMTlcbmRlYWN0aXZhdGUgY2RuXG5hY3RpdmF0ZSBTZXJ2ZXJcblxuU2VydmVyIC0-IEJyb3dzZXI6IFJlZGlyZWN0IC9sb2NhdGlvbnMvY2FjaGVkP2xhdD0xLjEmbG5nPTIuNVxuZGVhY3RpdmF0ZSBTZXJ2ZXJcbkJyb3dzZXIgLT4gY2RuOiBHRVQgL2xvY2F0aW9ucy9jYWNoZWQ_bGF0PTEuMSZsbmc9Mi41XG5hY3RpdmF0ZSBjZG5cbmNkbiAtPiBjZG46IOWtmOWcqCAvbG9jYXRpb25zL2NhY2hlZD9sYXQ9MS4xJmxuZz0yLjUg55qE57yT5a2YXG5jZG4gLT4gQnJvd3NlcjogW-WVhuW6lzEsIOWVhuW6lzIsIC4uLl1cbmRlYWN0aXZhdGUgY2RuXG5cbkJyb3dzZXIgLT4gVXNlcjpcbm5vdGUgcmlnaHQgb2YgVXNlcjog5ou_5Yiw5ZCM5qC355qE57uT5p6cXG5kZWFjdGl2YXRlIEJyb3dzZXJcbmRlYWN0aXZhdGUgVXNlclxuXG5AZW5kdW1sIiwidHlwZSI6InB1bWwiLCJtYXJnaW4iOnRydWUsImlkIjoiUnAwN3kiLCJ1cmwiOiJodHRwczovL2Nkbi5ubGFyay5jb20veXVxdWUvX19wdW1sL2YyNWE0OTA5ZWNhMjdlNzcxZjE2MzQ3OTZlYzkwMzg4LnN2ZyIsImNhcmQiOiJkaWFncmFtIn0=)<a name=\"FALe9\"></a>\n## 注意事项\n\n- 排序逻辑需要客户端实现。这样的话，在一定的范围内的不同设备，虽然拿到的响应列表是一样的，但是排序可能会有所不同。\n- 在搜索时需要在配置的搜索半径基础上增加一个额外的距离。比如配置的搜索半径为 100 公里，那么实际搜索时需要在 110 公里范围内搜索。因为在对经纬度进行四舍五入时，使得中心点变成了如下图所示的黑色正方形。也就是说，在黑色正方形区域内移动，得到的结果都是一样的，这个黑色正方形的变长是 20 公里的话，就需要以输入的经纬度为圆心，在配置好的搜索半径 100 公里外额外增加 10 公里。这样可以保证当位置移动时不会漏掉某些边缘结果。![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1615958705843-6b91c9c4-b96b-4c33-a4f2-da09607bd6cb.png#align=left&display=inline&height=151&margin=%5Bobject%20Object%5D&name=image.png&originHeight=301&originWidth=324&size=94494&status=done&style=none&width=162)\n\n\n<br />\n\n<a name=\"TCkgZ\"></a>\n## 总结\n当需要对某些查询做缓存，但是又要应对缓存键（URL）变化时，可以通过将原始接口逻辑改造成只计算缓存键，然后重定向到可缓存接口的方式实现。这个可以缓存的接口，往往涉及到数据库操作，无法很好地横向扩展，因此可以通过 CDN 缓存的能力来解决效率问题。而原始接口则不设置缓存，由于它是纯计算，可以横向扩展，因此也没有必要缓存了。\n"
  },
  {
    "id": 32601310,
    "title": "循环 vs 递归（反转链表示例）",
    "description": "在昨天的文章中提到，循环是一个正向线性思维，但是递归确实一种一种为始的反向思维。多数人习惯与正向思维，因为反向思维实际上有点儿反本能的，但是往往反向思维却能很好地解决一些看上去复杂正向思维难以解决的问题，比如汉诺塔问题。今天以一个常见的算法面试题，来对比循环和递归在代码上的差别，以及为什么更推...",
    "custom_description": null,
    "updated_at": "2021-03-09T12:04:49.000Z",
    "created_at": "2021-03-09T12:04:49.000Z",
    "slug": "nry4dw",
    "word_count": 1644,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1615287608904-e816e6d1-6171-4e95-b935-f3b4ba903f32.png",
    "body": "在昨天的文章中提到，循环是一个正向线性思维，但是递归确实一种一种为始的反向思维。多数人习惯与正向思维，因为反向思维实际上有点儿反本能的，但是往往反向思维却能很好地解决一些看上去复杂正向思维难以解决的问题，比如汉诺塔问题。<br />\n<br />今天以一个常见的算法面试题，来对比循环和递归在代码上的差别，以及为什么更推荐递归的写法以简化代码。这个常见的算法面试题，就是反转链表（[https://leetcode-cn.com/problems/reverse-linked-list/](https://leetcode-cn.com/problems/reverse-linked-list/)）。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1615287608904-e816e6d1-6171-4e95-b935-f3b4ba903f32.png#align=left&display=inline&height=782&margin=%5Bobject%20Object%5D&name=image.png&originHeight=782&originWidth=1190&size=100470&status=done&style=none&width=1190)\n<a name=\"fzzvb\"></a>\n## 准备工作\n\n<br />为了方便起见，可以打开浏览器，F12 进入开发控制台，使用 JavaScript 来实现和验证。首先写一些帮助函数来方便自动化测试：\n```javascript\nfunction test(expect, sut, message) {\n  console.log(message)\n\n  let sutString = linkToArray(sut).join('->');\n  let actual = reverseLink(sut);\n  let left = linkToArray(expect).join('->');\n  let right = linkToArray(actual).join('->');\n  \n  if(left === right){\n    console.log('\\t\\t' + left + ' == revert(' + sutString + '): PASS');\n  } else {\n    console.error('\\t\\t' + left + ' == revert(' + sutString + '): FAIL');\n  }\n}\n\nfunction linkToArray(head){\n  const res = [];\n  let set = new Set();\n  \n  while(head) {\n    if(set.has(head)) {\n      res.push('loop!');\n      return res;\n    }\n    \n    res.push(head.val);    \n    set.add(head);\n    head = head.next;\n  }\n  \n  return res;\n}\n\n```\n\n<br />然后，将设计好的测试用例列出来：\n```javascript\n// 测试用例：\ntest(null, reverseLink(null), '测试 null')\n\nlet headA = {val: 1, next: null}\ntest(headA, (headA), '测试一个节点')\n\nheadA.next = {val: 2, next: null};\nlet reversed = {val: 2, next: {val: 1, next: null}}\ntest(reversed, (headA), '测试两个节点');\n\nheadA = {val: 1, next: {val: 2, next: {val: 3, next: null }}}\nreversed = {val: 3, next: {val: 2, next: {val: 1, next: null }}}\ntest(reversed, (headA), '测试三个节点');\n\nlet cycle = {val: 1, next: null}\ncycle.next = cycle;\n\ntest(cycle, (cycle), '测试指向自己的一个节点的循环链表');\nconsole.assert(linkToArray(cycle).join('->') === '1->loop!', 'cycle');\n\nlet next = {val: 2, next: null};\ncycle.next = next;\nnext.next = cycle;\n\ntest(next, (cycle), '测试两个互相指向的节点组成的循环链表');\nconsole.assert(linkToArray(cycle).join('->') === '1->2->loop!', 'cycle');\n\nnext = {val: 3, next:null};\ncycle = {val: 1, next: {val: 2, next: next}}\nnext.next = cycle;\n\ntest(next, (cycle), '测试由三个节点组成的循环链表');\n```\n<a name=\"5XMQq\"></a>\n## 循环实现\n\n<br />比较容易想到的方案就是从头开始循环，每次对前后节点的指针进行倒转。在实现过程中，会发现指针的倒转，需要特别注意。\n```javascript\n// 假设不存在重复节点\nfunction reverseLink(head) {\n  if(head === null) {\n    return head;\n  }\n    \n  let prev = head;\n  \n  let next = prev.next;\n  prev.next = null;\n  \n  while(prev && next) {\n    let temp = next.next;\n    next.next = prev;\n    prev = next;\n    next = temp;\n    \n    if(next === head) {\n      head.next = prev;\n      return prev;\n    }\n  }\n  \n  return prev;\n}\n```\n注意以上 while 循环体中，开头 4 行的顺序特别重要！顺序错误就会导致程序 BUG。将以上实现和测试用例在开发者控制面板中运行，测试全部通过：<br />\n\n<a name=\"eYKss\"></a>\n## 递归实现\n\n<br />递归实现的关键在于思考方式，你要设想一个小一点的问题，已经被解决了。在这里，可以设想除了头节点，从下一个节点开始到末尾的子链表已经被反转了，这时候，只需要将关注点放在如何将头节点放置到子链表的末尾，这样就实现了整个链表的反转：<br />\n\n```javascript\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    if(!head){\n        return null;\n    }\n    \n    if(head.next === null){\n        return head;\n    }\n    \n    const rev = reverseList(head.next);\n    head.next.next = head;\n    head.next = null;\n    \n    return rev;\n};\n```\n可以看出，除了一些边界检查和循环类似之外，主要逻辑简单了很多！将头节点放置在已经被反转的子链表之后，这个逻辑很自然，因此代码上没有需要特别注意的地方。这个实现和测试结果可以参见：[https://leetcode-cn.com/submissions/detail/43900191/](https://leetcode-cn.com/submissions/detail/43900191/)<br />\n<br />但是要注意的是，在循环实现中，支持了环链表（参见后面的测试用例）。如果要让递归实现也支持环链表，需要再做一些改进：<br />\n```javascript\nvar reverseList = function(head) {\n  return ((head, cycleStart) {\n    if(!head){\n        return null;\n    }\n    \n    if(head.next === null || head.next === head){\n        return head;\n    }\n  \n    if (head.next === cycleStart) {\n      return head;\n    }\n    \n    const rev = reverseList(head.next, cycleStart);\n    head.next.next = head;\n  \n  \tif(!cycleStart) {\n    \thead.next = null;\n    } else {\n      head.next = rev;\n    }\n    \n    return rev;\n  })(head, head);\n};\n```\n\n\n<a name=\"fjU7L\"></a>\n## 彩蛋\n\n<br />递归方式会导致一个问题，相同的操作会做很多次。有一个简单粗暴的改进方案，就是使用空间换时间，不需要改动实现代码，只要使用前面文章中介绍过的 memoized 将其包装起来即可。\n```javascript\n const reverseList = memoized(\n  (head) => {\n    return ((head, cycleStart) {\n      if(!head){\n          return null;\n      }\n\n      if(head.next === null || head.next === head){\n          return head;\n      }\n\n      if (head.next === cycleStart) {\n        return head;\n      }\n\n      const rev = reverseList(head.next, cycleStart);\n      head.next.next = head;\n\n      if(!cycleStart) {\n        head.next = null;\n      } else {\n        head.next = rev;\n      }\n\n      return rev;\n  \t})(head, head);\n  }\n);\n```\n完整的代码和测试见：[https://github.com/Jeff-Tian/JobInterviewTests/blob/dev/ByteDance/src/reverseList.ts](https://github.com/Jeff-Tian/JobInterviewTests/blob/dev/ByteDance/src/reverseList.ts)。<br />\n\n"
  },
  {
    "id": 32531058,
    "title": "以终为始：假设问题已经解决",
    "description": "最近有一些思考，发现都可以总结为：要解决一个问题，先假设问题已经得到解决。我恍然大悟，这是一种以终为始的态度，以前只是听到以终为始，现在对这个词有了自己的理解。我的多篇文章里，反复提到测试驱动开发，在写实现代码之前，先把测试写出来，这个潜台词就是说：假设这个功能已经实现了，那么下面这段代码将如...",
    "custom_description": null,
    "updated_at": "2021-03-08T11:19:37.000Z",
    "created_at": "2021-03-08T10:43:17.000Z",
    "slug": "gkw7ci",
    "word_count": 1168,
    "cover": null,
    "body": "最近有一些思考，发现都可以总结为：要解决一个问题，先假设问题已经得到解决。我恍然大悟，这是一种以终为始的态度，以前只是听到以终为始，现在对这个词有了自己的理解。<br />\n<br />我的多篇文章里，反复提到测试驱动开发，在写实现代码之前，先把测试写出来，这个潜台词就是说：假设这个功能已经实现了，那么下面这段代码将如何如何表现。<br />\n<br />在《[世界上有哪些代码量很少，但很牛逼很经典的算法案例？](https://www.zhihu.com/question/358255792/answer/978553119)》中，也是这个思路，假设已经找到了衡量字符串结构的方法，那么问题就只剩下对使用这个衡量方法得到的结果是否相同这个判断了，因此首先实现了 equalBy 方法。（等等，问什么不先写 equalBy 的测试用例，然后再写它的实现？这个我的确偷懒了，因为它实现太简单，而且我太有信心了，所以直接写了实现代码。但是后面的 structure 方法，就写了针对性的测试。）<br />\n<br />最近拿了个复旦大学的在职研究生学位，学了什么都忘了，但是清晰记得第一节课的场景。那是章忠志老师的《计算机复杂网络》。课上老师给我们介绍汉诺塔问题（看似简单，但是实际上很多复杂的问题都可以归类到汉诺塔问题），我想了很久，找不到办法，最后老师给了提示：假设规模小一点的问题已经解决，那么只需要再往前走一步就能解决整个问题了。当然，整个问题解决后，需要再回溯到起点，但这只是多米诺骨牌，只是步骤多而已，但是每一步都变得简单了，递归而已。这个解决办法太优美了，让我记忆深刻。<br />\n<br />几年前刷力扣上的算法题时，做过一个反转链表的题目，当时特别关注细节，记得在两个节点之间反转指针时，需要特别小心，写好了反转指针细节，只要一个循环，从头节点开始，直到最后，就完事了。虽然实现过程是使用测试驱动开发，代码级别上实现了以终为始，但是解决这个问题的思维模式，属于明显的**前向线性思维**。<br />\n<br />在有了**以终为始**这个感悟后，我又想起这个问题，问自己，如果不用循环，可以怎么解决呢？于是就假设头节点之后的短一点的链表已经被反转了，那么问题就只剩下将头节点如何接上这个已经被反转的子链表上了，显然这非常简单。使用这种办法，我再一次实现了反转链表。实现结果非常理想，代码显著缩短，可读性明显提升。更重要的是，避开了那个要小心操作指针交换的步骤（容易让阅读代码的人费解），很让人满意。<br />\n<br />除了写代码，这个思考方式也能应用到别的地方。比如，感受到职业危机怎么办，这时候不如想一下，假设自己没有职业危机，那么自己是什么状态？那么问题就只剩下把状态调整到位了。对面试的职位没有把握，就可以假设已经通过面试了，那么有什么经验分享给现在的自己，以及会想到那些通过面试的，甚至面试官在哪里，他们会想问什么问题，期待什么样的候选者等等。**当然，这里面还有换位思考，但是设想自己已经通过了面试，能给自己很多启发。**\n\n**总结：**<br />\n<br />今天纯粹分享一点感悟文字，明天分享反转链表的详细案例和代码。总的来说，以终为始的思考方式，让问题的解决变得简单而优雅。\n"
  },
  {
    "id": 32352741,
    "title": "我是如何从焦油坑里爬出来的",
    "description": "《人月神话》里说过，软件工程，没有银弹。软件的复杂性是不会凭空消失的，但是任由复杂性野蛮生长，就会不知不觉陷入复杂性焦油坑，越挣扎陷得越深。尽管复杂性不会消失，但是仍然是可以管理好的。我见过很多团队不遵守好的实践，最后被折磨得焦头烂额的反例；也在不同团队中，通过应用以下好的实践和心法成功避开焦...",
    "custom_description": null,
    "updated_at": "2021-03-04T14:57:07.000Z",
    "created_at": "2021-03-04T14:57:07.000Z",
    "slug": "cksgeh",
    "word_count": 883,
    "cover": null,
    "body": "《人月神话》里说过，软件工程，没有银弹。软件的复杂性是不会凭空消失的，但是任由复杂性野蛮生长，就会不知不觉陷入复杂性焦油坑，越挣扎陷得越深。<br />\n<br />尽管复杂性不会消失，但是仍然是可以管理好的。我见过很多团队不遵守好的实践，最后被折磨得焦头烂额的反例；也在不同团队中，通过应用以下好的实践和心法成功避开焦油坑甚至力挽狂澜，一次次验证了好的过程一定会产生好的结果这个事实。<br />\n\n<a name=\"6geus\"></a>\n## 工程实践：测试驱动开发\n\n<br />不要再找借口说这个有多难，你以为你写完代码扔给测试，靠祈祷就能不出问题吗？你得使用测试驱动开发，证明不会出问题，才会有信心拍胸脯说不会有问题。<br />\n<br />测试过程应该不断提前，直到提到开发行为的前面，以终为始。不这样做，开始很轻松，甚至很随意，不主动用测试驱动开发，就会在后面被各种 BUG 驱动，各种被动。<br />\n<br />我最近几年，如果是创建新项目，一定会先将测试框架和 CI/CD 流水线搭好；如果看到已有项目缺少这些，也一定会先补上。事实证明，磨刀不误砍柴功。<br />\n\n<a name=\"7gxih\"></a>\n## 心法：结构化思考\n\n<br />这其实是小学数学时就学到的方法，分类讨论时要做到不重叠、不遗漏。非常浅显的道理，不知道为什么会被麦肯锡包装成所谓的 MECE 法则。<br />\n<br />在某个团队见过一段冗长的代码，各种 if/else 嵌套，里面的条件就没有做到 MECE，重叠的还好，居然有遗漏的分支！这些被遗漏的逻辑分支就没有机会 callback，这就是当时收到用户投诉是不是页面会卡死没有反应的原因（点了按钮，ajax 请求一直挂起得不到响应）。<br />\n<br />当时我拉了测试一起，画了个矩阵列举所有可能的逻辑组合，理清后针对每一种逻辑分支写了自动化测试用例，跑下来就能重现卡死的 BUG。将 if/else 确实的逻辑分支不上，就修复了。当然，后来进一步重构，消除重叠路径，精简代码，最后使用策略模式，消除 if/else，这都得益于有 MECE 的测试用例跑着，让我可以放心重构代码。当然重构后的代码并没有彻底消除复杂性，但是可读性提升了，良好的代码组织结构而不再是一大坨。由于更有序，使得复杂性没有野蛮生长。<br />\n\n<a name=\"ooe4I\"></a>\n## 总结\n\n<br />其实，没有什么威力强大的银弹，但是却有简单又行之有效的方法。TDD 的开发循环很简单，只需要每次都使用即可。结构化思考小学生都会，由于总被忽视，以至于被麦肯锡包装卖钱去了。<br />\n<br />记住**大道至简**，记住**慢就是快**。\n"
  },
  {
    "id": 32291776,
    "title": "译诗一首",
    "description": "似乎是突然间，所有企业都开始大搞特搞“数字化转型”。这个似乎是 10 年前的提法，慢慢地消失后突然间又火了起来。对于个人，我也想把自己以前的一些零星的散落着的东西收集起来，存在云上，也美名其曰“数字化”。昨天翻到自己翻译的一首家喻户晓的 4 行诗，今天又翻到一首自己 2017 年 9 月 1 ...",
    "custom_description": null,
    "updated_at": "2021-03-03T15:30:24.000Z",
    "created_at": "2021-03-03T15:30:24.000Z",
    "slug": "ituq7g",
    "word_count": 462,
    "cover": null,
    "body": "似乎是突然间，所有企业都开始大搞特搞“数字化转型”。这个似乎是 10 年前的提法，慢慢地消失后突然间又火了起来。<br />\n<br />对于个人，我也想把自己以前的一些零星的散落着的东西收集起来，存在云上，也美名其曰“数字化”。<br />\n<br />昨天翻到自己翻译的一首家喻户晓的 4 行诗，今天又翻到一首自己 2017 年 9 月 1 日翻译的一首诗：<br />\n<br />**停车静观林前雪**<br />—— 罗伯特·弗罗斯特<br />\n<br />我知道这是谁家林子，<br />主人就住在我们村子。<br />他却不知我在此停了下来，<br />欣赏着林前雪景悠哉游哉。<br />\n<br />然而马驹感到不安，<br />这儿离农舍太远。<br />前有树林挡路，后面冰湖一片，<br />况且又是一年中最黑的夜晚。<br />\n<br />于是它摇了摇脖上的铃铛，<br />像是在询问主人什么情况。<br />万籁俱寂里除了摇铃响，<br />只剩下清风吹得雪飘扬。<br />\n<br />树林可爱、深邃又幽暗，<br />可我有些承诺要去实现。<br />在安睡前还有长长的路要赶，<br />在安睡前还有长长的路要赶。\n\n附原诗：<br />\n<br />**Stopping by Woods on a Snowy Evening**\n\nRobert Frost<br />\n<br />Whose woods these are I think I know.<br />His house is in the village though;<br />He will not see me stopping here<br />To watch his woods fill up with snow.<br />\n<br />My little horse must think it queer<br />To stop without a farmhouse near<br />Between the woods and frozen lake<br />The darkest evening of the year.<br />\n<br />He gives his harness bells a shake<br />To ask if there is some mistake.<br />The only other sound's the sweep<br />Of easy wind and downy flake.<br />\n<br />The woods are lovely, dark and deep.<br />But I have promises to keep,<br />And miles to go before I sleep,<br />And miles to go before I sleep.\n"
  },
  {
    "id": 32216774,
    "title": "译诗一首",
    "description": "在翻看自己几年前的一些东西时，竟然发现了一首自己翻译的小诗一首，没想到自己曾经也是一个有才之人，同时开始反思为什么现在的我只知道工作？沙里见人间，花中天堂显。手心握无限，刹那成永远。—— 威廉·布莱克《天真的预言》原文如下：To see a world in a grain of sand A...",
    "custom_description": null,
    "updated_at": "2021-03-02T11:38:27.000Z",
    "created_at": "2021-03-02T11:38:27.000Z",
    "slug": "awbz4r",
    "word_count": 286,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1614685062641-69aec33d-e945-481e-b5e3-84874ab19111.png",
    "body": "在翻看自己几年前的一些东西时，竟然发现了一首自己翻译的小诗一首，没想到自己曾经也是一个有才之人，同时开始反思为什么现在的我只知道工作？<br />\n<br />沙里见人间，<br />花中天堂显。<br />手心握无限，<br />刹那成永远。<br />\n<br />—— 威廉·布莱克《天真的预言》<br />\n<br />原文如下：<br />\n<br />To see a world in a grain of sand <br />And a heaven in a wild flower,<br />Hold infinity in the palm of your hand <br />And eternity in an hour.<br />\n<br />—— Auguries of Innocence by William Blake<br />\n<br />这 4 行诗是《Auguries of Innocence》的开头四行，我特别喜欢，尤其是最后一句，让我感觉美妙和震撼。但是看了很多中文翻译版，给我的感觉都平淡了，于是斗胆自己翻译一个版本，读完自己翻译的版本后竟然觉得有些原版的味道了（可能是自我陶醉吧）。<br />\n<br />今天把它公开出来，希望能够强行在众多的翻译中再增加一个版本。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1614685062641-69aec33d-e945-481e-b5e3-84874ab19111.png#align=left&display=inline&height=810&margin=%5Bobject%20Object%5D&name=image.png&originHeight=810&originWidth=1440&size=2514128&status=done&style=none&width=1440)\n"
  },
  {
    "id": 32125227,
    "title": "使用 -c 和 xargs 简化多个命令行操作",
    "description": "背景Redis Cluster 没有开放公网访问，不能从开发机直接连接，只能从集群内部连接。开发要操作这个 Redis Cluster，就需要先登陆集群内部某个中转机，在使用命令行访问。比如，要删除匹配的键，一般这样操作：kubectl exec -it jump-machine -- sh ...",
    "custom_description": null,
    "updated_at": "2021-03-01T07:16:21.000Z",
    "created_at": "2021-03-01T07:16:21.000Z",
    "slug": "nkilct",
    "word_count": 286,
    "cover": null,
    "body": "<a name=\"4uqLJ\"></a>\n## 背景\n\n<br />Redis Cluster 没有开放公网访问，不能从开发机直接连接，只能从集群内部连接。开发要操作这个 Redis Cluster，就需要先登陆集群内部某个中转机，在使用命令行访问。<br />\n<br />比如，要删除匹配的键，一般这样操作：\n```shell\nkubectl exec -it jump-machine -- sh\n成功进入中转机\n\nredis-cli -c -h redis-cluster-host --scan --pattern \"*key*\"\n\nthe-key-pattern-1\nthe-key-pattern-2\n...\n\n查出键后，再进行删除\n\nredis-cli -c -h redis-cluster-host DEL \"the-key-pattern-1\"\n(1)\n\nredis-cli -c -h redis-cluster-host DEL \"the-key-pattern-2\"\n(1)\n\nredis-cli -c -h redis-cluster-host DEL \"the-key-pattern-3\"\n(1)\n```\n\n\n<a name=\"qyOu8\"></a>\n## 简化\n\n<br />如果能够一行命令完成上面所有的操作，那么将非常省心，节约时间和方便自动化。通过利用 `xargs` 可以完成简化：\n```shell\nkubectl exec -it jump-machine -- sh -c 'redis-cli -c -h redis-cluster-host --scan --pattern \"*key*\" | xargs -i redis-cli -c -h redis-cluster-host DEL {}'\n```\n\n\n<a name=\"LIYsU\"></a>\n## 注意点\n\n\n1. 将需要在中转机上执行的命令使用单引号括起来，这很重要\n1. 最后的 `{}` 也很重要，否则会遇到这样的错误： `(error) CROSSSLOT Keys in request don't hash to the same slot` \n"
  },
  {
    "id": 32043620,
    "title": "闭包的妙用 —— memoize",
    "description": "闭包回顾在《闭包是个什么球》中介绍说闭包是一个特殊的高阶函数，它会返回另一个函数，而这个被返回的函数，又引用了其上层函数中的变量。那么，这种特殊的或者说奇怪的函数有什么用呢？我在另一篇《闭包有什么用》一文里罗列了一些。今天再次回到闭包这个话题，使用一个例子来具体说明其用处，这个例子就是 mem...",
    "custom_description": null,
    "updated_at": "2021-02-27T08:33:11.000Z",
    "created_at": "2021-02-27T08:33:11.000Z",
    "slug": "gnu74o",
    "word_count": 1794,
    "cover": null,
    "body": "<a name=\"JPWgH\"></a>\n## 闭包回顾\n\n<br />在《闭包是个什么球》中介绍说闭包是一个特殊的高阶函数，它会返回另一个函数，而这个被返回的函数，又引用了其上层函数中的变量。那么，这种特殊的或者说奇怪的函数有什么用呢？我在另一篇《闭包有什么用》一文里罗列了一些。今天再次回到闭包这个话题，使用一个例子来具体说明其用处，这个例子就是 memoize。<br />\n\n<a name=\"ZocNI\"></a>\n## memoize\n\n<br />memoize，是一个常见的函数，很多库比如 lodash 或者 rambda 中都有，可供你拿来就用。它用空间换时间，让耗时的操作只会执行一次，从而加快程序的运行速度。<br />\n<br />它的实现，就用到了闭包。我们试着来实现一个 naive memoize 吧！首先明确一下需求：<br />\n<br />对于某个函数 fn，只要它一旦被 memoize 过，那么，对于同样的参数，它将立即给出结果而不需要再次计算。<br />\n<br />动手写代码实现 memoize 前，先想想怎么验证它是否被实现了呢？（这是一个测试驱动开发的好习惯）<br />\n<br />思路是在某个函数中增加一个计数器，一旦调用一次，就增加 1。所以对于同样的参数调用，期待这个计数器只会被增加一次。不如就用加法函数来验证吧：\n```typescript\n it('memoize sum', () => {\n    let count = 0;\n\n    const sum = (x1: number, x2: number) => {\n      count++;\n\n      return x1 + x2;\n    };\n\n    const memoizedSum = memoize(sum);\n\n    expect(count).toBe(0);\n    expect(memoizedSum(1, 1)).toEqual(2);\n    expect(count).toBe(1);\n    expect(memoizedSum(1, 1)).toEqual(2);\n    expect(count).toBe(1);\n    expect(memoizedSum(1, 2)).toEqual(3);\n    expect(count).toBe(2);\n });\n```\n跑一下，发现 memoize 含没有被定义，我们来写个实现：\n```typescript\nexport const memoize = (fn: Function) => {\n  const cache: Record<string, any> = {};\n\n  return (...args: any) => {\n    const key = JSON.stringify(args);\n    if (!cache[key]) {\n      cache[key] = fn(...args);\n    }\n\n    return cache[key];\n  };\n};\n```\n再次运行测试，通过了！仔细看一下这个幼稚的实现，简直是闭包定义（返回一个引用了上层函数也就是外部作用域里的变量的函数的高阶函数）的完美体现。首先，memoize 接受一个函数作为参数；其次，它并不执行那个参数，而是返回另外一个函数，这个被返回的函数体才会去调用原本传入的函数，因此将原函数的执行延迟了。最后，返回的函数体中引用了上层函数里定义的 cache 变量。<br />\n\n<a name=\"XVpuO\"></a>\n## 总结\n\n<br />到这里，一个幼稚的 memoize 就实现了，用法和 lodash 里的 memoize 类似。<br />\n\n<a name=\"EVZic\"></a>\n## 避坑指南\n\n<br />我曾经在使用 lodash 的 memoize 时，希望用最小的改动，将一个耗时操作封装一下，成为一个只会将同样的事情做一次的操作，于是写了这样的代码：\n```diff\nexport timeConsumingFn = () {\n...\n}\n\nexport main() {\n  ...\n-\ttimeConsumingFn()\n+ _.memoize(timeConsumingFn)()\n  ...\n}\n```\n结果发现，还是每次执行都很耗时，感觉被 lodash 的 memoize 骗了。后来仔细一想，原来时自己的使用姿势不正确，因为上面的写法中，虽然对原耗时操作进行了 memoize 封装，但是每次调用都是重新封装一次，于是被封装后的函数，对它来说，每次都是第一次执行，所以导致了原来的目标没有实现。还记得在 memoize 函数体中有一个 cache 吗？以上写法导致每次都是新建一个 cache，每次的 cache 里存了一个操作结果后，就没有继续利用了。就是说，以上写法不仅没能让原本的操作加快速度，反而增加了很多内存占用。<br />\n\n<a name=\"EjnHJ\"></a>\n## 正确的写法\n\n<br />应该将 memoize 封装后的函数使用新的函数名保存，并保证每次执行使用第一次封装后的新函数（关键在于封装只需要而且只能进行一次）。\n```diff\nexport timeConsumingFn = () {\n...\n}\n\n+ memoizedTimeConsumingFn = _.memoize(timeConsumingFn)\n\nexport main() {\n  ...\n-\ttimeConsumingFn()\n+ memoizedTimeConsumingFn()\n  ...\n}\n```\n成功实现加快程序运行速度的目标！<br />\n\n<a name=\"rDUNH\"></a>\n## 将避坑指南写进测试里\n\n<br />以上介绍了 lodash 的 memoize 避坑指南，那么我们写的幼稚的 memoize 有同样的坑吗？当然有，那么写一个测试用例，以示警告：<br />\n\n```typescript\nit(\"doesn't memoize if you use it like this: \", () => {\n  let count = 0;\n  const sum = (x1: number, x2: number) => {\n    count++;\n\n    return x1 + x2;\n  };\n\n  expect(count).toBe(0);\n  expect(memoize(sum)(1, 1)).toEqual(2);\n  expect(count).toBe(1);\n  expect(memoize(sum)(1, 1)).toEqual(2);\n  expect(count).toBe(2);\n});\n\n```\n<a name=\"ksdYS\"></a>\n## 忘掉避坑指南\n\n<br />虽然有办法避坑，但是那个坑实在太容易掉进去了呀！毕竟 memoize 这个名字听上去就是只要用一下它就将原函数记住了呀，还非要一个额外的变量存储那个被记住的函数？<br />\n<br />所以我们现在将幼稚的 memoize 再增强一下吧，这个增强版，我们希望即使直接用，不用新的变量，也能达到同样的效果。不如把这个增强的 memoize 函数叫做 memoized 吧，我们希望达到的效果，也写成测试用例，只需要把那个预警测试用例稍改一下：\n```typescript\nit('does memoize if you use memoized instead', () => {\n  let count = 0;\n  const sum = (x1: number, x2: number) => {\n    count++;\n\n    return x1 + x2;\n  };\n\n  expect(count).toBe(0);\n  expect(memoized(sum)(1, 1)).toEqual(2);\n  expect(count).toBe(1);\n  expect(memoized(sum)(1, 1)).toEqual(2);\n  expect(count).toBe(1);\n});\n```\n看上去非常完美，怎么实现这个 memoized 呢？我有一个很直接简单粗暴的想法，可能也是一个疯狂的想法：**为什么不用 memoize 将它自己封装一下呢**？毕竟 memoize 是一个函数，而 memoize 的参数可以是任何函数。于是我写下了如下的实现代码：\n```typescript\nexport const memoized = memoize(memoize);\n```\n有点不敢相信，但是运行一下测试，通过！<br />\n<br />使用 memoized，再也不用记住那个避坑指南了，减少了很多认知负担。从此这个程序员过上了幸福的编码生活。<br />\n<br />\n\n"
  },
  {
    "id": 31933521,
    "title": "Who am I",
    "description": "I am currently working as a backend engineer, but I have also the frontend experience including web, mini program and native apps. Before my early ...",
    "custom_description": null,
    "updated_at": "2021-02-25T04:42:22.000Z",
    "created_at": "2021-02-25T04:42:22.000Z",
    "slug": "kdbefa",
    "word_count": 118,
    "cover": null,
    "body": "I am currently working as a backend engineer, but I have also the frontend experience including web, mini program and native apps. Before my early programming careers I had been a test engineer, so I have multiple perspective to the system from backend to frontend and through testing all along. I can programming with multiple language, but focused on NodeJs in recent 6 years.<br />\n<br />I've been working for 14 years, with the initial 4 years on non-programming and 10 years on programming. I've been developer lead that managed 2 frontends and 2 backends in my team. Although I've never lead a big team, but I have been a virtual lead horizontally that need to collabarote with other teams. <br />\n<br />\n\n"
  },
  {
    "id": 31838303,
    "title": "架构模式",
    "description": "架构模式，也叫架构风格，它是一个通用的、可重用的解决方案，用于在给定上下文中的软件体系结构中经常出现的问题。架构模式与软件设计模式类似，但具有更广泛的范围。一个架构模式常常可以分解成很多个设计模式的联合使用。MVC模式就属于架构模式，流行的微服务架构，其定义上也是说它是一种将应用构建为一组服务...",
    "custom_description": null,
    "updated_at": "2021-02-23T12:10:47.000Z",
    "created_at": "2021-02-23T12:10:47.000Z",
    "slug": "ttf7ny",
    "word_count": 151,
    "cover": null,
    "body": "架构模式，也叫架构风格，它是一个通用的、可重用的解决方案，用于在给定上下文中的软件体系结构中经常出现的问题。架构模式与软件设计模式类似，但具有更广泛的范围。一个架构模式常常可以分解成很多个[设计模式](https://baike.baidu.com/item/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1212549)的联合使用。[MVC模式](https://baike.baidu.com/item/MVC%E6%A8%A1%E5%BC%8F)就属于架构[模式](https://baike.baidu.com/item/%E6%A8%A1%E5%BC%8F/700029)，流行的**微服务架构**，其定义上也是说它是一种将应用构建为一组服务的**架构风格**。<br />\n<br />\n\n"
  },
  {
    "id": 31835429,
    "title": "架构模式",
    "description": "",
    "custom_description": null,
    "updated_at": "2021-02-23T10:48:55.000Z",
    "created_at": "2021-02-23T10:48:55.000Z",
    "slug": "nxc3tc",
    "word_count": 0,
    "cover": null,
    "body": "\n"
  },
  {
    "id": 31835410,
    "title": "最近一年的成长",
    "description": "一年前，作为开发组长，由于要花更多时间协调资源，对接产品经理，项目管理等等，所以写代码的时间相对较少。最近一年作为后端开发工程师，多数时间在写代码上，总体来说，最近一年的工作是相当不容易的，面临特别多的挑战，但是回想起来，在工作上得到新的技术成长不多，不过好的是有机会应用很多好的技术实践。克服...",
    "custom_description": null,
    "updated_at": "2021-02-25T03:03:38.000Z",
    "created_at": "2021-02-23T10:47:29.000Z",
    "slug": "yu7tea",
    "word_count": 970,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1614083483101-486d0af3-7998-46d5-b4f2-5bb6be9823f1.png?x-oss-process=image%2Fresize%2Cw_1500",
    "body": "一年前，作为开发组长，由于要花更多时间协调资源，对接产品经理，项目管理等等，所以写代码的时间相对较少。最近一年作为后端开发工程师，多数时间在写代码上，总体来说，最近一年的工作是相当不容易的，面临特别多的挑战，但是回想起来，在工作上得到新的技术成长不多，不过好的是有机会应用很多好的技术实践。<br />\n\n<a name=\"V3S2m\"></a>\n## 克服的挑战\n\n- **沟通障碍**：团队中的信息鸿沟特别大，因此如何从仅有的信息或者线索中按图索骥，侦探一样地工作就特别重要。心得是多使用搜索功能，然后得益于自己是开发身份，去多看代码，看所有能看到的代码，这样才能像拼图一样理解一些事情。像《Hidden Figures》中的主人公一样，在很多信息被保密不能查看的情况下，多方面数据计算验证，以及使用一些像将纸透过灯光去看等等获取信息。另外 Bing 有个 Work Search，要多用。![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1614083483101-486d0af3-7998-46d5-b4f2-5bb6be9823f1.png#align=left&display=inline&height=378&margin=%5Bobject%20Object%5D&name=image.png&originHeight=756&originWidth=1706&size=138148&status=done&style=none&width=853)\n- **权限级别低，但是有权限的人并不会帮你**：一方面，高层希望你快，但是另一方面，很多事情需要 DevOps 的协助，因为相关系统你没有权限因此处处受到制肘。这时候，只能开动脑筋想各种 Work around。比如 Jenkins 流水线，破败不堪，但是你没有权限去修复，去 DevOps 群里反映问题，不仅得不到帮助，还会收到各种抱怨，似乎光是看到你的信息，就已经浪费了他们的时间了，只能自己找各种办法，比如通过重放面板改代码调整。当然另一方面，你要积极地申请权限，不断申请，有时候有些权限会开放给你。\n- **工具链一坨屎**：一方面，约会，找各个团队聊，尽量形象化说明问题。比如比喻现在我们在原始社会，不求一步迈进青铜时代，只求做点改进，进入石器时代，就是一个很大的进步了。另一方面，在自己能够做得地方，自己主动花时间改进，然后分享给整个 Global 团队，增加自己的影响力和可见度，对以后寻求别人的协助也有帮助。\n\n\n\n<a name=\"qWNet\"></a>\n## 好的工程实践\n\n\n- **TDD**：好在写代码的时间比较多，而且有代码审核流程。因此，自己使用 TDD，提交高质量代码，还是很受到代码评审者的尊重的。总的来说，这一年给团队里项目中的测试覆盖度增加做了很大贡献。\n- **通用代码下沉**：通用代码下沉到库，给 Global 团队做展示，反响不错。\n- **主导一些大功能的开发**：主动发起需要前后端以及 DevOps 协作的大故事，自己承担后端的同时，提前为前端解决各种障碍。\n- **Design For Failure**: 由于是做原生 APP，不像网站应用那么方便回滚和更新，所以在有大的功能上线时，需要考虑到线上出问题后的回滚方案（ab_test）。以及由于促销的流量可能会暴增至平时的 10 倍，需要考虑到服务降级的熔断措施（基于 Redis 实现了 Defcon mode）。\n"
  },
  {
    "id": 31786378,
    "title": "大型外企和国内互联网小厂的文化对比",
    "description": "我曾经在几家外企工作过，后来头脑发热加入了国内的互联网创业公司，尽管我非常努力，经常通宵达旦地工作，但是公司并没有变得更好，于是后来还是回到大型外企继续搬砖。我并没有进入过国内的互联网大厂，因此拿国内小厂和国外大厂做对比不一定公平，但只是想分享个人经验而已，绝对没有崇洋媚外的意思。第一个不同点...",
    "custom_description": null,
    "updated_at": "2021-02-23T11:33:09.000Z",
    "created_at": "2021-02-23T11:33:09.000Z",
    "slug": "knmp7u",
    "word_count": 1632,
    "cover": null,
    "body": "我曾经在几家外企工作过，后来头脑发热加入了国内的互联网创业公司，尽管我非常努力，经常通宵达旦地工作，但是公司并没有变得更好，于是后来还是回到大型外企继续搬砖。<br />\n<br />我并没有进入过国内的互联网大厂，因此拿国内小厂和国外大厂做对比不一定公平，但只是想分享个人经验而已，绝对没有崇洋媚外的意思。<br />\n<br />第一个不同点很多人都会说，外企管理相对扁平，这个没错，但是管理层的意志还是要坚决被执行的，这一点本质上没有区别。只是在国内小厂，开会时主要是管理层说话，一般没人敢质疑什么，曾经有个胆子大的设计师稍微表现出抱怨，CTO 就厉色呵斥。但是在外企，你可以畅所欲言，甚至会上当面质疑 CEO 都行，CEO 都会礼貌回应，但是会后，你不执行那是混不下去的。<br />\n<br />第二个就是，即使我在国内小厂工作特别努力，但是在管理层看来，似乎还不够，永远都不够，就有这种感觉。每天下班前发日报，每周日前发周报，渐渐地变成了日报需要精确到几点到几点干了啥，花了多长时间，完成了百分之多少。渐渐变成 996 成为了一个制度，总之你今天尽最大努力所达到的高度，在明天就是一个最低标准。而在外企，下班时间一到，甚至到之前，有人就走了。如果你下班后还在，如果上级看到，一般都会催促你 Go Home。甚至办公室的灯光会到点自动熄灭，窗帘自动升起提醒你下班。当然你可以手动再去打开电灯，自愿加班也不会被强行驱逐。周报日报是没有的，但是自己对项目还是要有责任心的，否则出了问题，根因分析会议会让你难堪。<br />\n<br />第三个区别就是国内小厂一般会有考勤，而且会越来越严格。迟到罚款，按照旷工处理等等，这个很不人性化。大卡时间哪怕差了一秒，或者有时候没迟到，但是忘记打卡，损失是很严重的。但是外企一般没有考勤要求，所以迟到早退的人很普遍，但是只要你把事情做好，是没有任何问题的。但是外企并不是没有考勤管理，只是比较隐蔽，如果上级觉得不喜欢你，或者是你真的没有把事情做好，那么上级可能找 HR 拉你的每天的门禁出入记录，以此推算你的上班时间。我见过有人被上级直接无责任开除，原因是 HR 拉了他 6 个月的工作日门禁出入记录，没有一天满 8 小时的（这员工的表现的确过分了）。<br />\n\n<a name=\"w1fJe\"></a>\n## 在未来赋能型组织才能更好地生存\n\n<br />当然，外企就一定好吗？那要看怎么定义这个好。我认为企业和生物一样，是在不断演变的，那么好不好，就看它能不能在变化的世界里生存下来，也就是说要适应变化，要顺应趋势。那么未来的企业要怎样才能活得更好呢？又一个很有启发的观点，要从**管理型组织转变成赋能型组织**。从这点上讲，国内小厂和多数大型外企都得加油。<br />\n<br />本文的目的在于增加对外企的介绍，以增加熟悉国内小厂的同学们对于大型外企的认识。所以在最后，附上一段某外企的自我介绍。<br />\n<br />**在我们这里工作很有趣**\n\n**一起玩耍**：我们为自己的公平、信任和相互尊重的文化感到自豪，在这里人们总是感觉到可以自由表达自我。每个人的独特素质形成了特殊的团队环境，发掘出每个人最好的一面。我们非常关心员工的健康，并且帮助员工找到自己的工作/生活的平衡。我们致力于构建一个让每个人都享受工作的环境。<br />\n<br />**跨年龄段的想象力**：疯狂的点子不只是小孩子的特权，我们鼓励你在工作中玩耍 —— 实验、创造性思维、并且将你的想象付诸实践。我们还在每一年找出一天，让我们所有国家和地区的员工都停下手头的工作去全身心地玩耍。这是非常有启发的一天，不仅好玩，还能让我们记住我们为什么要从事目前的事业。<br />\n<br />**价值观导向**：想象力、创造力、趣味、学习、关心他人、质量。无论你在哪个国家和地区，都能从我们的玩耍中发现这 6 个价值观。它们从最开始的地方指引我们所做的事业并打造了我们的工作方式，加固了我们所坚持的精神 —— “只有做好才是足够好的”。如果你的个性与此相似，那么你在这里将会茁壮成长。<br />\n\n<a name=\"xz8xM\"></a>\n## 不要在没有价值观的企业上浪费时间\n\n<br />可以看出这家外企特别注重价值观，这是一个相对好的和值得你继续考察的企业，虽然宣称的价值观和公司的实际情况可能有差距，但是如果一个企业都没有和不向外宣传其价值观，那就不值得你进一步考察，因为这样的企业会没有底线（血的教训）。\n"
  },
  {
    "id": 31755059,
    "title": "使用 k6 快速测出一个 api 的大致吞吐量",
    "description": "吞吐量如果一个网页应用每秒钟接收到 50 个请求，但是它实际上每秒钟只能处理 30 个，那么另外的 20 个请求就只能在一个队列中等待。在性能测试结果中，吞吐量的表现经常使用 TPS 来表示。测试策略可以使用负载测试找到应用的 TPS，其策略是使用一系列的事务组合（平常的和密集的），来看看有多...",
    "custom_description": null,
    "updated_at": "2021-02-22T09:51:47.000Z",
    "created_at": "2021-02-22T09:11:47.000Z",
    "slug": "idlkas",
    "word_count": 1736,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1613985077778-1eae68e3-c0f0-469b-92f7-65d592c76a2b.png",
    "body": "<a name=\"ktjYy\"></a>\n## 吞吐量\n\n<br />如果一个网页应用每秒钟接收到 50 个请求，但是它实际上每秒钟只能处理 30 个，那么另外的 20 个请求就只能在一个队列中等待。在性能测试结果中，吞吐量的表现经常使用 TPS 来表示。<br />\n\n<a name=\"apOvo\"></a>\n## 测试策略\n\n<br />可以使用负载测试找到应用的 TPS，其策略是使用一系列的事务组合（平常的和密集的），来看看有多少事务在可接受的时间框架内成功通过。<br />\n\n<a name=\"0yeGJ\"></a>\n## 工具\n\n<br />工具上，可以采用高端专业的工具比如 Visual Studio Team System 中的负载测试功能，当然也可以自己写代码来模拟负载。自己写代码衡量请求的响应时间虽然很容易，但是来模拟负载，就需要太多的工作了。Visual Studio Team System 可以让你挑选一系列的事务组合、模拟网络延时，它还将用户的思考时间也考虑进去了、甚至还有测试迭代等等功能，所以采用这个高大上的工具来做负载测试是非常适合的。<br />\n<br />但是，除非是 .NET 技术栈，很少有人会去安装 Visual Studio，且不说安装麻烦，等待时间长，操作上需要太多鼠标点击，各种图形界面操作，非常令人反感。<br />\n<br />可能有人会说，有图形界面操作，多么令人感动啊，怎么会令人反感？是的，图形界面显得更友好，但是太多步骤太多动画就不方便快速做一些实验。所以今天特别介绍使用另一个工具：k6，来做同样的事情。相比 Visual Studio，它轻量化，使用简单。但是它没有图形界面，需要写点代码，这可能极度符合另一拨人（包括我）的口味。<br />\n\n<a name=\"mXTZy\"></a>\n## k6\n\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613985077778-1eae68e3-c0f0-469b-92f7-65d592c76a2b.png#align=left&display=inline&height=317&margin=%5Bobject%20Object%5D&name=image.png&originHeight=317&originWidth=284&size=91624&status=done&style=none&width=284)<br />k6 是以开发者为中心，自由开源的负载测试工具，使得性能测试更有效率的同时还让使用者感到极度舒适。其特性有：\n\n- 命令行工具和对开发者友好的开放接口\n- 支持 JavaScript ES2015/ES6 脚本\n- 对自动化友好，支持自定义检查和定义阀值\n\n\n\n<a name=\"uAJXl\"></a>\n## k6 不是什么\n\n<br />虽然 k6 是一个高性能负载测试工具，可以使用 JavaScript 编写测试脚本，但是为了实现这些特性，不得不在架构设计上做一些取舍：\n\n- 并不在浏览器里运行<br />由于跳过了浏览器，k6 对系统资源的消耗大幅度降低，让工具自身显著高效。尽管如此，仍然可以使用 k6 来做网站的负载测试，甚至可以从录制好的用户会话中创建出测试。\n- 并不在 NodeJs 环境里运行<br />JavaScript 在整体上并不适合高性能场景。为达到最高的性能，这个工具采用 Go 语言编写，嵌入了 JavaScript 运行时从而让测试脚本的编写变得容易。如果你要加载 npm 模块或者使用 NodeJs API 的库，你可以使用 webpack 打包 npm 模块然后在测试中加载它们。\n\n\n\n<a name=\"QyQOs\"></a>\n## k6 的负载测试宣言\n\n\n- 简单的测试胜过没有测试\n- 负载测试应该面向目标\n- 负载测试应该由开发者执行（有启发！颠覆三观吗？）\n- 对开发者的体验特别重要\n- 只在预生产环境做负载测试\n\n\n\n<a name=\"GtAtH\"></a>\n## k6 的安装\n\n<br />详见官方文档，如果是 mac，推荐如下方式：\n```shell\nbrew install k6\n```\n\n\n<a name=\"ItO8z\"></a>\n## 快速测试一个 API 的吞吐量能力\n\n<br />首先，确保是非生产环境。其次，找一个终端节点，这里拿一个只返回 OK 的健康检查接口为例。<br />\n<br />然后，写一个 JavaScript 脚本，命名为 k6.js，如下所示：\n```javascript\nimport http from 'k6/http';\nimport { sleep } from 'k6';\n \nexport let options = {\n    stages: [\n        { duration: '2m', target: 100 }, // 低于正常的负载场景\n        { duration: '5m', target: 100 },\n        { duration: '2m', target: 200 }, // 正常负载场景\n        { duration: '5m', target: 200 },\n        { duration: '2m', target: 300 }, // 临界点附近\n        { duration: '5m', target: 300 },\n        { duration: '2m', target: 400 }, // 超出临界点\n        { duration: '5m', target: 400 },\n        { duration: '10m', target: 0 }, // 缩小规模，恢复阶段\n    ],\n};\n \nexport default function () {\n    const BASE_URL = 'http://localhost:3000'; // 确保不要用生产环境 URL\n \n    let responses = http.batch([\n        [\n            'GET',\n            `${BASE_URL}/v2/health`,\n            null,\n            { tags: { name: 'Health Check' } },\n        ],\n    ]);\n \n    sleep(1);\n}\n```\n然后从命令行运行 k6：\n```shell\nk6 run k6.js\n```\n比如会得到这样的结果：\n```shell\nrunning (38m00.7s), 000/400 VUs, 514826 complete and 0 interrupted iterations\ndefault ✓ [======================================] 000/400 VUs  38m0s\n \n    data_received..............: 256 MB 112 kB/s\n    data_sent..................: 44 MB  19 kB/s\n    http_req_blocked...........: avg=9.88µs  min=0s med=3µs    max=2.29s    p(90)=5µs    p(95)=7µs\n    http_req_connecting........: avg=261ns   min=0s med=0s     max=1.09ms   p(90)=0s     p(95)=0s\n    http_req_duration..........: avg=2.12ms  min=0s med=1.18ms max=267.25ms p(90)=4.31ms p(95)=5.85ms\n    http_req_receiving.........: avg=28.12µs min=0s med=29µs   max=2.66ms   p(90)=46µs   p(95)=55µs\n    http_req_sending...........: avg=12µs    min=0s med=12µs   max=2.57ms   p(90)=20µs   p(95)=25µs\n    http_req_tls_handshaking...: avg=0s      min=0s med=0s     max=0s       p(90)=0s     p(95)=0s\n    http_req_waiting...........: avg=2.08ms  min=0s med=1.12ms max=267.2ms  p(90)=4.25ms p(95)=5.8ms\n    http_reqs..................: 514826 225.72893/s\n    iteration_duration.........: avg=1s      min=1s med=1s     max=3.3s     p(90)=1s     p(95)=1s\n    iterations.................: 514826 225.72893/s\n    vus........................: 1      min=1   max=400\n    vus_max....................: 400    min=400 max=400\n```\n从上面的报告中可以得到一个大概的结论：TPS 约等于 226，即每秒钟可以处理大约 226 个请求。<br />\n\n<a name=\"VHxuU\"></a>\n## 总结\n\n<br />本文介绍了一种区别于 Visual Studio Team System 以及 JMeter 这种基于图形界面的负载测试工具，并详细展示了一个最基本的使用步骤。可见真的是非常简单，对开发者友好，特别适合自动化。另外，特别喜欢 k6 的负载测试宣言，首先喜欢它的对开发者友好特性，其次被它的负载测试应该由开发者执行这一条震撼到了。希望对你有启发，欢迎留言分享你是怎么做负载测试的。\n"
  },
  {
    "id": 31702501,
    "title": "使用 Mocha 和 Chai 测试驱动开发 AWS Lambda API",
    "description": "缘起前几天学习了 AWS Lambda，非常棒。首先，未来的开发者都会是云原生的，就是说，他们所有的开发工作都会在云上进行，而 AWS Lambda 是云计算中的翘楚；其次，对于开发者和开源作者来说，由于不以盈利为目的，因此免费的基础设施和产品对他们的可持续输出非常重要，而 AWS Lambd...",
    "custom_description": null,
    "updated_at": "2021-02-21T08:58:59.000Z",
    "created_at": "2021-02-21T08:58:59.000Z",
    "slug": "gghbmx",
    "word_count": 2568,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1613891220686-90971052-8b10-4927-b4d1-172a5f4b6f00.png?x-oss-process=image%2Fresize%2Cw_1500",
    "body": "<a name=\"2YOxW\"></a>\n## 缘起\n\n<br />前几天学习了 AWS Lambda，非常棒。首先，未来的开发者都会是云原生的，就是说，他们所有的开发工作都会在云上进行，而 AWS Lambda 是云计算中的翘楚；其次，对于开发者和开源作者来说，由于不以盈利为目的，因此免费的基础设施和产品对他们的可持续输出非常重要，而 AWS Lambda 的免费额度远远超出大多数开发者的起步需求。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613891220686-90971052-8b10-4927-b4d1-172a5f4b6f00.png#align=left&display=inline&height=706&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1412&originWidth=2050&size=201141&status=done&style=none&width=1025)<br />以上是我学完了 AWS 基础课后的证书，这个课程的主讲人是一名解决方案架构师，讲得相当好，让你对 AWS Lambda 会有一个基本和全面的认识。<br />\n<br />但是，对实际的开发工作可能没有太大帮助。你根据课程和 AWS Lambda 控制台的指引，可以很快搭建一个 Hello World 出来，但这只能算是 Playground，如果要真正进行工程实践，还需要本文这样的指南。AWS Lambda 支持的语言非常多，本文将对使用 NodeJs 进行 AWS Lambda 工程实战给出一个详尽的指导。除了 NodeJs，你可能还想有 C# 的 AWS Lambda 工程实战指南，Go 的 AWS Lambda 工程指南等等，如果哪天我学会了它们，再来分享。<br />\n<br />一个现代化的实战工程，应该是方便测试的、可以持续自动化部署的。测试驱动开发是一个不错的开发实践，本文分享如何将它应用在 AWS Lambda 开发上。<br />\n<br />首先，你需要学习一下 AWS Lambda 课程，链接在这里：[https://www.aws.training/Details/eLearning?id=59558](https://www.aws.training/Details/eLearning?id=59558)<br />\n\n<a name=\"NjcYy\"></a>\n## 工具链\n\n<br />开发语言采用 TypeScript，测试框架采用 Mocha，断言库采用 Chai。jest 非常优秀，但是运行速度比 Mocha 慢太多，因此这里没有采用。但是 jest 的使用者众多，必须得提一下，而且从 Mocha 切换到 jest 并不需要做太多修改。<br />\n<br />Mocha 是一个在 NodeJs 上运行的 JavaScript 测试框架。Mocha 支持异步运行测试、测试覆盖报告，并且允许使用任何断言库。Chai 是一个 NodeJs 的 TDD/BDD 断言库，能够和任何 JavaScript 测试框架配合工作。<br />\n<br />Mocha 使用钩子来组织其测试结构，具体地说有这些钩子：\n\n- describe(): 用来将测试分成一个一个的测试组并描述当前测试分组\n- it(): 用来描述测试用例\n- before(): 在第一个 it() 或者 describe() 之前运行\n- beforeEach(): 在每一个 it() 或者 describe() 之前运行\n- after(): 在所有 it() 或者 describe() 之后运行\n- afterEach(): 在每一个 it() 或者 describe() 之后运行\n\n\n\n<a name=\"FmeXI\"></a>\n## 测试驱动开发简介\n\n<br />简称 TDD，它有很多好处，比如由于测试先行，所有让我们专注在需求上，并且保证只会发布能够恰好通过所有测试的代码。<br />\n<br />TDD 的流程总体来说是一系列重复性的简单活动。首先，写一个注定失败的测试，因为这时还没有实现代码；然后，写能够通过测试的实现代码；一旦测试通过，就重构代码让它更简洁更易扩展。注意测试代码也是代码，所以测试代码本身也包括在重构的范围内。这个重复性的简单活动看起来是这样的： <br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613892537389-795c9813-61de-4ed7-8f94-e9b0a8cfbf93.png#align=left&display=inline&height=467&margin=%5Bobject%20Object%5D&name=image.png&originHeight=934&originWidth=1432&size=130428&status=done&style=none&width=716)<br />\n\n<a name=\"o30UI\"></a>\n## 示例需求\n\n<br />构建一个无服务器的 Lambda API，它接受一个电话号码作为输入，并且返回这个电话号码的国别 —— 中国大陆、美国、或者不是一个电话号码。<br />\n\n<a name=\"ZL8Ku\"></a>\n## 安装开发依赖\n\n<br />进入你的项目目录并且执行：\n```shell\nnpm install typescript -g\nnpm install chai mocha ts-node @types/chai @types/mocha --save-dev\n```\n\n\n<a name=\"ej9vu\"></a>\n## 写第一个测试\n\n<br />让我们以熟悉的 Hello World 开始。创建一个新文件，命名为 \"HelloWorldService.spec.ts\"（这个 \"sepc.ts\" 的后缀表明这是一个测试文件）。在这个 \"HelloWorldService.spec.ts\"  的顶部，加载 mocha 和 chai，然后就开始使用 Mocha 的钩子函数（describe 和 it）来定义一个简单的测试，这个测试期待 HelloWorldService 返回一个 “HelloWorld”字符串。<br />\n\n```typescript\nimport {expect} from 'chai'\nimport 'mocha'\nimport {HelloWorldService} from './HelloWorldService'\n\ndescribe('Hello World string function', () => {\n  it('should return Hello World', () => {\n    const result = HelloWorldService()\n    const expectedResult = 'Hello World'\n    expect(result).to.equal(expectedResult)\n  })\n})\n```\n\n<br />测试写好了，我们来运行它。为了方便起见，我们在 package.json 中创建一个 NPM 脚本，这个脚本调用 mocha，并将测试文件所在的目录作为参数传给它。由于我们的代码是使用 TypeScript 写的，所以还需要将 ts-node 注册进入 mocha 才行。一旦这个脚本创建好，我们就可以从命令行终端运行测试了（注意 .spec.ts 后缀，这是我们表明测试文件的约定）：\n```json\n...\n\"scripts\": {\n  ...\n  \"test\": \"mocha -r ts-node/register src/**/*.spec.ts\"\n  ...\n}\n...\n```\n尝试执行测试会报错，因为 HelloWorldService.ts 还不存在，让我做个快速修复，创建这个文件，并且写一行代码实现 HelloWorldService：\n```typescript\nexport const HelloWorldService = () => ''\n```\n再次在命令行输入 `npm test` 运行测试，得到：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613893743041-8d0eac9c-8cca-481a-a49c-dc399b1714b7.png#align=left&display=inline&height=318&margin=%5Bobject%20Object%5D&name=image.png&originHeight=636&originWidth=1492&size=73737&status=done&style=none&width=746)<br />测试能够运行，但是结果告诉我们 HelloWorldService 没有返回期待的结果，让我们修复它，改写 HelloWorldService.ts 文件：<br />\n\n```diff\n- export const HelloWorldService = () => ''\n+ export const HelloWorldService = () => 'Hello World'\n```\n再次运行测试，得到： \n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613893989945-5e5300b7-3f06-43b8-95db-6c8ee123d44a.png#align=left&display=inline&height=100&margin=%5Bobject%20Object%5D&name=image.png&originHeight=200&originWidth=1162&size=16023&status=done&style=none&width=581)<br />测试通过，由于代码很简单，还不需要重构，所以第一个 TDD 周期就完成了！<br />\n\n<a name=\"N7GNQ\"></a>\n## 测试电话号码服务算法\n\n<br />到目前位置，一个支持 TDD 和 TypeScript 的项目就搭建起来了，我们开始构建电话号码服务。为了简单起见，这个服务只用来判断一个电话号码是否是中国大陆电话号码。先写一个测试：\n```typescript\ndescribe('PhoneNumberService.determinePhoneNumberType_CN_MOBILE', () => {\n  it('should return CN_MOBILE', () => {\n    const expectedResult = PhoneNumberType.CN_MOBILE;\n    \n    const phoneNumbers = [\"+8617712345678\", \"17712345678\"]\n    \n    phoneNumbers.forEach(phoneNumber => {\n    \tconst result = PhoneNumberService.determinPhoneNumberType(phoneNumber)\n      \n      expect(result).to.equal(expectedResult)\n    })\n  })\n})\n```\n运行测试，失败。让我们来写第一个实现，能够通过这个测试用例：\n```typescript\nimport {PhoneNumberType} from './enums/PhoneNumberType'\nconst CN_Mobile_Phone_Number_Regex = /^(\\+86)1\\d{10}$/\n\nexport class PhoneNumberService {\n  public static determinerPhoneNumberType(phoneNumber: string): PhoneNumberType {\n    return this.isCNMobile(phoneNumber) ? PhoneNumberType.CN_MOBILE : PhoneNumberType.INVALID\n  }\n  \n  public static isCNMobile(phoneNumber: string): boolean {\n    return CN_Mobile_Phone_Number_Regex.test(phoneNumber)\n  }\n}\n```\n重新运行测试，通过！下一步是添加一个让测试失败的测试用例，然后改进代码让它通过。直到所有的测试用例都通过为止。这里略过不再赘述。<br />\n\n<a name=\"peYSf\"></a>\n## 添加 AWS Lambda 事件处理器\n\n<br />首先添加 aws-lambda 依赖，这是 AWS Lambda 为 NodeJs 开发的 SDK。\n```shell\nnpm install aws-lambda --save\n```\n然后新建一个文件，代码如下：\n```typescript\nimport {Context, APIGatewayProxyEvent} from 'aws-lambda'\nimport {PhoneNumberService} from '../services/PhoneNumberService';\n\nmodule.exports.handler = async (apiGatewayEvent: APIGatewayEvent, _context: Context) : Promise<any> => {\n  if (!requestBody) {\n    return new HttpResponse(HttpStatusCode.BAD_REQUEST);\n  }\n  \n  const res = PhoneNumberService.determinePhoneNumberType(requestBody.phoneNumber)\n  \n  return new HttpResponse(HttpStatusCode.OK, res)\n}\n```\n<a name=\"5GXRO\"></a>\n## 配置 AWS Lambda 并本地运行验证\n安装 AWS Lambda 提供的命令行工具 serverless：\n```shell\nnpm i -g serverless\n```\n配置：\n```shell\nserverless config credentials --provider aws --key YOUR_ACCESS_KEY --secret YOUR_SECRET_ACCESS_KEY\n```\n再在项目中创建一个 serverless.yml 文件：\n```yaml\nservice: phone-number-api\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n\nfunctions:\n  phonenumber:\n    handler: index.handler\n    name: serverless-phone-number\n```\n在 package.json 文件里添加一个脚本命令：\n```json\n{\n  ...\n  \"scripts\": {\n    ...\n    \"local\": \"tsc && serverless invoke local --function phonenumber --data '+8617712345678'\"\n    ...\n  }\n  ...\n}\n```\n执行 `npm run local` 验证。<br />\n\n<a name=\"evbWU\"></a>\n## 配置部署脚本\n在 package.json 中增加一个部署脚本：\n```json\n{\n  ...\n  \"scripts\": {\n    ...\n    \"deploy\": \"tsc && serverless deploy\"\n    ...\n  }\n  ...\n}\n```\n要将我们写好的 AWS Lambda 部署上线，只需要运行 `npm run deploy` 。Serverless 会帮我们处理所有事情，包括创建 CloudFormation Stack，上传构建制品到 S3，以及创建我们的 Lambda。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613896314613-1c39bb7e-1c34-431f-b31e-11075329afd0.png#align=left&display=inline&height=218&margin=%5Bobject%20Object%5D&name=image.png&originHeight=436&originWidth=1846&size=71142&status=done&style=none&width=923)<br />要持续开发 Lambda，只需要更改代码，确保测试通过。然后运行相同的 `npm run deploy` 脚本就能够将更新的改动部署上线。<br />\n\n<a name=\"JMVYh\"></a>\n## 验证部署后的服务\n\n<br />你可以用 Postman 发起一个 POST 请求到我们运行 ` npm run deploy` 后得到的分配好的终端节点：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613896559115-849bf2c4-2ace-4b08-8f54-05221565809a.png#align=left&display=inline&height=226&margin=%5Bobject%20Object%5D&name=image.png&originHeight=452&originWidth=1600&size=248355&status=done&style=none&width=800)<br />也可以配置一个命令行脚本到 package.json 文件中：\n```json\n{\n  ...\n  \"scripts\": {\n    ...\n    \"remote\": \"serverless invoke --function phonenumber --data '+8617712345678'\"\n    ...\n  }\n  ...\n}\n```\n之后使用 `npm run remote` 即可。<br />\n\n<a name=\"JIf6N\"></a>\n## 总结\n\n<br />本文快速回顾了 TDD 的步骤，并给了一个将其应用于 AWS Lambda 开发的快速示例。欢迎参考该示例创建 AWS Lambda 的 TypeScript TDD 的开发项目模版。<br />\n\n<a name=\"sbUwi\"></a>\n## 彩蛋\n\n<br />AWS Lambda 在中国最大的竞争对手，应该是阿里云的函数计算。参考本文，做一些适当的修改，就可以写一个阿里云函数计算的 TypeScript TDD 开发项目模版，其实作者已经写了一个，欢迎自由取用：[https://github.com/Jeff-Tian/ali-fc-typescript-skeleton](https://github.com/Jeff-Tian/ali-fc-typescript-skeleton)。<br />\n<br />作者使用这个开发模版写了一个上传文件转码服务，用来将用户上传的 office 文档，转码成图片格式，并且添加水印，然后再在前端展示，既可以展示自己的原创内容，又能一定程度上防止抄袭。由于阿里云函数计算的免费额度也很大，所以运行至今一年多下来，给公司节省了很多钱。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613897448584-49cd00e8-e0b8-42a5-9e66-908c49ad6670.png#align=left&display=inline&height=380&margin=%5Bobject%20Object%5D&name=image.png&originHeight=760&originWidth=1428&size=115035&status=done&style=none&width=714)<br />\n<br />因此鼓励你更多地使用函数计算，这是趋势。\n"
  },
  {
    "id": 31699815,
    "title": "我是谁？",
    "description": "自我认知和定位我是一名全栈开发者。尽管我目前的官方职位是资深后端开发工程师，但是我有前端工程实战经验，以前也做过测试工程师，拥有多元视角，对系统有整体的认识。尽管我最近 6 年专注在 NodeJs 技术栈，但是对其他多种语言都有涉猎。最近我做了什么除了线上事故排除，日常需求开发，我还主动发现问...",
    "custom_description": null,
    "updated_at": "2021-02-22T11:36:36.000Z",
    "created_at": "2021-02-21T06:25:44.000Z",
    "slug": "iysdhg",
    "word_count": 1118,
    "cover": null,
    "body": "<a name=\"sMGM5\"></a>\n## 自我认知和定位\n\n<br />我是一名全栈开发者。尽管我目前的官方职位是资深后端开发工程师，但是我有前端工程实战经验，以前也做过测试工程师，拥有多元视角，对系统有整体的认识。尽管我最近 6 年专注在 NodeJs 技术栈，但是对其他多种语言都有涉猎。<br />\n\n<a name=\"eULqy\"></a>\n## 最近我做了什么\n\n<br />除了线上事故排除，日常需求开发，我还主动发现问题并积极组织和推进：\n\n- E2E 自动化测试\n- CI/CD\n- 发现并发布公共库\n- 改进代码质量\n- 提高测试覆盖率\n\n\n<br />比如，我发现购物车存在 3 大问题，就通过公司内部文档清晰地列出存在的问题，并给出了改进的方案，不仅设计了后端接口，还找到了前端在开发过程中会碰到的问题以及相应的解决方案（比如如何信任开发环境的自签证书等）。在验证可行后，分别找到 Dev Lead、架构师线下沟通，达成一致后，邀请前端和测试同事一起开会详细讨论，并推进开发过程。<br />\n<br />又比如，我发现后端的文档化工具链的局限，就设法改进（增加对更多种数据类型的支持，优化文档返回速度等），并且通过远程视频会议分享给 Global 同事。<br />\n<br />又比如，针对日常开发的痛点，我组织前后端、测试同事以及 DevOps 同事，推进 CI/CD 流水线的优化。使用原始社会、石器时代、青铜时代的比喻，让非开发同事感受到 DevOps 流程优化的迫切。<br />\n<br />除了本职工作，我还对多个优秀的开源框架做过代码贡献，比如 eggjs、urllib、flot、Skulpt、算法可视化等等。<br />\n\n<a name=\"dNnXW\"></a>\n## 最有挑战性的项目是哪个\n\n<br />[https://zizhujy.js.org/zh-CN/FunctionGrapher.html](https://zizhujy.js.org/zh-CN/FunctionGrapher.html)<br />\n\n- JAM Stack\n- LaTex 表达式解析器\n- 隐函数（采用象限四分法）\n- 区间数学应用\n\n\n\n<a name=\"XzZpl\"></a>\n## 简历\n\n<br />2007 年毕业于苏州大学统计学专业，毕业后在一家 500 强外企做销售数据分析，接触到 VBA 编程不可自拔，后转行做开发，使用过多种语言如 C#、Java、Python、Go 等等，其中最多的还是在英孚教育青少儿实验室使用 ASP.NET 开发内部的 CRM 系统。从英孚教育离职后，专注于 NodeJs 开发至今。从 2007 年参加工作至 2021 年的 14 年间，按照专注点分类的话，经历大致是：VBA 4 年、C# 4 年，NodeJs 至今 6 年。<br />\n<br />概括的说，非程序员生涯是前 4 年，程序员生涯是后 10 年。管理上做过开发组长，团队中除了自己，另外有 2 名前端和 2 名后端，也就是说没有带过大团队，垂直领导力并不优秀，但是横向领导力还是有一点的，总是在推进跨部门间的协作。最成功的一个例子是以程序员的身份，影响了产品经理提需求的姿势。<br />\n<br />在工作之余，还拿到了复旦大学的软件工程硕士学位。<br />\n\n<a name=\"XiySC\"></a>\n## 我的价值\n\n<br />如果公司的技术团队失去了我，那么会损失以下几点：<br />\n\n- 少了一位有多元视角、熟悉全栈开发的程序员。可以预见到后面团队在开发新功能时缺少一个整体把控者，在普遍前后端分离开发的现状下，系统整合上会磕磕绊绊，项目风险增加。\n- 接上面一点，可以预见的是线上问题的排查和跟踪将更耗时，前后端分别甩锅，难以定位。\n- 少了一位崇尚测试驱动开发的程序员，测试覆盖度降低，代码质量下降。\n- 失去了一位对自动化和工具链有热情有经验的程序员，开发团队可能会停留在原始社会更长时间。\n- 开源影响力降低。\n"
  },
  {
    "id": 31632304,
    "title": "加密 Kubernetes 集群中的敏感信息",
    "description": "使用 Mozilla SOPS 来加密 Kubernetes 集群中的敏感信息Kubernetes 已经成为运行容器工作负载的事实标准，在很多大型企业的数字开放平台也处于中心地位。然而，和 Kubernetes 相关的工作非常有挑战性，这其中之一就是如何处理工作负载正常运行所需要的一些敏感信息...",
    "custom_description": null,
    "updated_at": "2021-02-19T12:08:40.000Z",
    "created_at": "2021-02-19T12:08:40.000Z",
    "slug": "zb1gdu",
    "word_count": 2017,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1613733491296-d518ca74-d468-4b35-a204-6c109063fafc.png",
    "body": "> 使用 Mozilla SOPS 来加密 Kubernetes 集群中的敏感信息\n\nKubernetes 已经成为运行容器工作负载的事实标准，在很多大型企业的数字开放平台也处于中心地位。然而，和 Kubernetes 相关的工作非常有挑战性，这其中之一就是如何处理工作负载正常运行所需要的一些敏感信息。这些敏感信息包括但不限于密码，API 密钥，令牌等等。<br />\n<br />任何不小心的敏感信息泄漏将对这种大型企业的声誉以及收入带来严重威胁，所以必须使用一种安全的方式来存储这些数据。关于这个问题有许多不同的解决方案，本文将分享如何使用 Mozilla SOPS 来存储敏感数据的方案，这个方案不需要太多的修改和适配。<br />\n\n\n---\n\n\n\n<a name=\"NDISA\"></a>\n## Kubernetes 中的敏感信息长什么样？\n\n\n对于 Kubernetes 的新手，可以快速看一下如下截图，了解敏感信息在 Kubernetes 中是怎样定义的：\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613733491296-d518ca74-d468-4b35-a204-6c109063fafc.png#align=left&display=inline&height=346&margin=%5Bobject%20Object%5D&name=image.png&originHeight=346&originWidth=424&size=34590&status=done&style=none&width=424)\n一个典型的 Kubernetes 集群中的敏感数据\n\n\n如上图所示，这是 Kubernetes 中敏感信息的默认类型，所有信息都以键值对的形式保存在一个 YAML 文件中， data 区域的值必须使用 base64 编码。这个文件一旦创建出来，你就可以使用以下命令将敏感数据部署到你的命名空间中：\n\n\n```shell\nkubectl apply -f mysecret.yml\n```\n\n\n现在我们知道敏感数据长什么样了，如果我们希望保持它们的安全，就需要回答两个问题：\n\n\n- 我要将这个 YAML 文件放置在哪里？以什么方式保存？\n- 当敏感信息被部署到命名空间中后，如何放置泄漏？\n\n\n\n\n---\n\n\n\n<a name=\"n0HHG\"></a>\n## 使用 Mozilla SOPS 存储敏感信息\n\n<br />Mozilla SOPS 是一个加密文件编辑器，支持 YAML、JSON、ENV、INI 以及二进制文件，也支持各种不同的加密提供商诸如 AWS KMS、GCP KMS、Azure Key Vault、Hashicorp Vault 以及 PGP。保存敏感数据可以有很多选项，但是对于 Kubernetes 来说，SOPS 尤其适合，主要有以下这些原因：<br />\n\n- **易于使用**：你只需要解密、编辑、然后加密即可，不需要学习新的工具，也不需要使用 Restful API 和第三方服务打交道而导致的学习曲线陡峭。\n- **可以将代码和敏感数据放在一起**：将敏感信息加密可以让你将它们随代码一起提交到版本管理系统（如 git）中，相比其他方案，这将大大简化持续集成/持续部署流程。\n- **跟踪变化特别简单**：和上一个优点相关：将敏感信息提交到版本管理系统中，跟踪变化就非常简单了。而且还可以看出是谁做了什么改变。\n- **不需要额外的基础设施支持**：其他方案比如 Hashicorp 就需要额外的工具链，甚至需要为其部署额外的存储设施（Consul、DynamoDB 等等）。这些额外的工具增加了架构中的复杂性，但是并没有为你的产品带来额外的价值。\n- **没有扩展问题**：再一次和前一个优点相关，由于不需要额外的基础设施，也就不需要为其做额外的运维和扩展工作，对某些大项目来说这些工作可能是很大的一个问题。\n\n\n<br />接下来让我们看一下如何使用它来加密敏感数据。<br />\n\n\n---\n\n\n\n<a name=\"EQtME\"></a>\n## 使用 SOPS 来加解密\n\n\nSOPS 的官方文档中已经有一个使用 PGP 密钥的基本用法，但是其强大之处在于 **.sops.yaml **文件，所有的魔法都在这个文件里。来看一下它长什么样：\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613734900519-93c3726d-76bd-4a92-bd49-3303c1443ac7.png#align=left&display=inline&height=426&margin=%5Bobject%20Object%5D&name=image.png&originHeight=426&originWidth=1400&size=149005&status=done&style=none&width=1400)\n.sops.yaml 的样例文件\n\n\n.sops.yaml 文件包含了对代码仓库中的文件进行加解密的所有规则。以上面的文件为例，对于加解密有两个不同的规则。这些规则的优先级是从上到下的，第一个出现的规则被优先应用。详细地说：\n\n\n- 第一个是说所有匹配正则表达式的文件将使用 AWS KMS 进行加解密。结合 SOPS 和 AWS KMS 的主要优势在于你可以给 SOPS 在不同的区域提供多个不同的密钥，从而避免了加解密过程中的单点故障。\n- 第二个是说文件将使用给定的 PGP 密钥进行加解密。对于不匹配前一个规则中的文件，这个规则将被应用。\n\n\n\n一旦你写好了你的 .sops.yaml 文件，就可以用如下命令进行加密：\n\n\n```shell\nsops -e <filename> -p <your_key_here>\n```\n\n\n这会产生类似如下的输出：\n\n\n**![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613735384145-a4ff0b0b-cd51-40b9-a5bb-4e6cf32b21db.png#align=left&display=inline&height=1435&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1435&originWidth=1400&size=575761&status=done&style=none&width=1400)**\n使用 SOPS 加密的结果示意图\n\n\n正如你所看到的，文件中所有相关数据都已经被加密。SOPS 并不会加密键，所以你不必关心具体的值，就能很容易看到什么值被修改了。\n\n\nSOPS 也支持密钥轮换，假设你的密钥泄漏了，那么你可以将它们从 .sops.yaml 文件中移除，然后重新加密，这很简单，只需要：\n\n\n```shell\nsops -r -i --rm-pgp <your_key_here> filename\n```\n\n\n如果需要更高级的用法和示例，可以参考 SOPS 的文档。\n\n\n好，现在敏感数据已经被安全地存储在版本管理系统中了，但还有一个问题待解决：如何保证敏感数据在集群中的安全？\n\n\n<a name=\"RUAbQ\"></a>\n## 在集群中加密敏感数据： RBAC\n\n\n敏感数据已经安全地保存在版本管理系统中了，是时候保证只让授权过的用户访问它们了。\n\n\n通常，在集群中我们使用命名空间隔离不同项目，并且默认授予在这些命名空间中的所有权限。这是一个很糟糕的实践，得不惜一切代价摒弃这种做法。幸运的是 Kubernetes 提供了一个非常强大的角色系统可供使用。\n\n\n先创建一个新的角色：\n\n\n```yaml\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: your_namespace\n  name: read-only-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\", \"configmaps\", \"services\", \"pods/log\"]\n  verbs: [\"get\", \"watch\", \"list\"]\n```\n这是一个很基本的角色，它允许所有人在你的命名空间 `your_namespace` 中执行如下几个操作：<br />\n\n- 查询/列出/观察 pod, configmap 和 services\n- 从 pod 中查询日志 \n\n\n<br />现在该绑定这个角色了，这需要一个 rolebinding，正如其名，它将角色绑定到一个主题上。主题可以是用户、组或者服务账号。可以使用如下示例将角色绑定到一个用户：<br />\n\n```yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: read-only\n  namespace: your_namespace\nsubjects:\n- kind: User\n  name: Jeff # Name is case sensitive, so be careful with that!\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: Role\n  name: read-only-role\n  apiGroup: rbac.authorization.k8s.io\n```\n一旦应用，就算凭据被泄漏（最好不要），恶意攻击者将只能做前面列出的仅有的几个操作，不会对基础设施造成威胁。<br />\n\n\n---\n\n\n\n<a name=\"8Wrwt\"></a>\n## 总结\n\n<br />SOPS 是加密的强大工具，但是必须记住仍然需要应用更多的和集群相关的策略（比如本文建议的一个）才能是你的秘密信息真的被保密。<br />\n<br />以上是某大型企业的生产实践，欢迎留言分享你在 Kubernetes 集群中处理敏感信息的策略。\n"
  },
  {
    "id": 31580874,
    "title": "做纯洁的人，写纯洁的代码",
    "description": "一个函数，如果不纯洁，那么它的行为将不可预料，即使当前没有发现什么异常，但是会埋下很大的隐患：有一天线上出问题了，你怎么也想不到，居然是某一个看上去不会干坏事的函数捣的鬼。不纯洁的危害，血淋淋的例子：曾经碰到一个线上的问题，在非生产环境没有出现过，在生产环境上也只是偶尔出现，经过长时间的排查，...",
    "custom_description": null,
    "updated_at": "2021-02-18T12:16:03.000Z",
    "created_at": "2021-02-18T12:16:03.000Z",
    "slug": "giuoee",
    "word_count": 2100,
    "cover": null,
    "body": "一个函数，如果不纯洁，那么它的行为将不可预料，即使当前没有发现什么异常，但是会埋下很大的隐患：有一天线上出问题了，你怎么也想不到，居然是某一个看上去不会干坏事的函数捣的鬼。<br />\n\n<a name=\"HTSxL\"></a>\n## 不纯洁的危害，血淋淋的例子：\n\n<br />曾经碰到一个线上的问题，在非生产环境没有出现过，在生产环境上也只是偶尔出现，经过长时间的排查，最后发现罪魁祸首正是一个看上去是一个很正常的函数做了一件不纯洁的事情，最后做得一个紧急修复如下：<br />\n```diff\n- const { data, response } = await this.httpClient.executeJsonRequest(url, options)\n\n+ const { data, response } = await this.httpClient.executeJsonRequest(url, { ...options })\n```\n\n<br />改动虽然很小，但是代码变得更丑了，但这没有办法，因为 `executeJsonRequest` 是一个公共库，它的名字看上去只是执行一个 http 请求，但是实际上它偷偷干了一点其他的事情，就是会改变传入的参数 `options` 下的某个属性，正好在后面某处有人把这个 `options` 传给了一个 logger，然而这个 logger 使用了 `JSON.stringify` 。<br />\n<br />多数情况下，这没有问题，但是看了这个公共库的源码才知道，这个原本发送请求的方法竟然将 `options` 参数改成了一个网络请求中的对象，本来这个 `options` 参数只是一个 Plain JavaScript Object，但是被改成了一个网络请求中的对象后就复杂了，在某些网络情况下，这个对象的层次会变得很深，而且某一层的属性引用了父级属性，如此导致出现了一个循环引用，这在运行时的内存中不会引发任何问题，但是当后面的日志模块将这个 `options` 进行序列化时就崩溃了！<br />\n<br />但是后面的日志模块哪里会想到这个 Plain JavaScript Object 会被别人修改呢？所以这就是**不纯洁的危害**。\n```typescript\nasync executeRequest(url: string, options: RequestOptions = {}): Promise<HttpResponse> {\n  const timer = new Date()\n  const requestMethod: string = options.method || \"GET\"\n  \n  // 罪魁祸首！为什么要修改外部传进来的参数？！\n  if (url.startsWith(\"https\")) {\n    options.agent = this.httpsAgent\n  } else {\n    options.agent = this.httpAgent\n  }\n  ...\n}\n\n```\n\n\n<a name=\"NxX7K\"></a>\n## 和纯函数相处，拥有纯粹的快乐\n\n\n> 给定相同的输入，总是返回相同的输出，并且不存在任何可以观测到的副作用的函数，就是纯函数。\n> 副作用指的是在函数计算出结果的同时，改变了系统状态或者改变了与外界的可观测到的交互行为。\n\n上面的血淋淋的例子，就是那个本该只发送网络请求的函数，改变了外部传入的参数中的某个属性。当然，发送网络请求的函数，涉及到网络 IO，无论如何做不到完全的纯粹，但是应该将不纯粹的部分减少到最小。无论如何，修改外部传入的参数是不允许的，关于发送网络请求的函数如何保证同样的输入总是得到同样的输出，可以使用 memoize 实现（后面有机会单独分享）。<br />\n<br />和纯函数相处，将拥有纯粹的快乐，这些快乐包括但是不限于：\n\n- 可缓存性好（参考 memoize）\n- 可移植性好/自文档（完全自包含，强制做到了依赖“注入”）\n- 可测试性好（只需要给定输入验证输出，连 mock 都用不着啦！）\n- 可推理性好（引用透明性）\n- 可并行性好（由于没有副作用，所以不会产生竞态条件）\n\n\n\n<a name=\"YCwuL\"></a>\n## 挑战：异常处理\n\n<br />看到这个么多纯粹的快乐，你很可能已经动手开始写纯函数式的代码了，这似乎不难，比如对于那个不纯洁的公共库，只要改成不要修改外部传入的参数就很接近了。但是我的代码总要进行异常处理吧，难以置信的是，`try/catch/throw` 这种代码竟然也是不纯洁的。<br />\n<br />因为当有错误被抛出时，这个函数与平时的表现不一样，没有返回值，取而代之的竟然是打断了程序的正常运行，抛出一些奇奇怪怪的东西出来。<br />\n<br />前面提到通过使用 memoize 可以将原本不纯洁的网络 IO 操作变成一个纯洁的函数，像知名的 _lodash 和 rambda 都有 memoize 供你伸手取用，那么对于异常处理的 `try/catch/throw` 这种代码是否也有相应的库呢？<br />\n<br />你一定没有想到这里会出现一个广告：弱弱地推荐一下我 8 个月前写的一个纯洁的异常处理小库，名曰： `@jeff-tian/failable` 。已经用在公司的生产环境快一年了，觉得有一点点价值，可以帮你做一些脏活累活，特出此文专门分享。<br />\n\n<a name=\"bxFAV\"></a>\n## @jeff-tian/failable\n\n<br />使用姿势（可以用在 TypeScript 和 JavaScript 项目中）：<br />\n\n1. 安装：\n```typescript\nnpm i --save @jeff-tian/failable\n```\n\n2. 使用示例\n\n太简单了，直接贴一下这个小库中的测试代码吧（不是有句话叫测试即文档吗？）。\n```typescript\ndescribe(\"wrap throwable functions\", () => {\n    const sut = (x: number) => {\n        if (x > 100) {\n            throw new Error(\"too big!\")\n        }\n\n        return x\n    }\n\n    it(\"ok\", () => {\n        assert(Failable.dontThrow(sut, 5).toString() === \"Ok(5)\")\n    })\n\n    it(\"err\", () => {\n        const res = Failable.dontThrow(sut, 101)\n        assert(res instanceof Err)\n        assert(res.value.message === \"too big!\")\n    })\n})\n```\n可见，对于一个可能抛异常的代码，只要将它用 @jeff-tian/failable 封装，它就一定会返回一个值，并且对同样的输入，一定得到同样的输出，完全可以预期，不会有任何意外。<br />对于异步代码仍然适用，举例如下：\n```typescript\ndescribe(\"Async\", () => {\n    const sut = async (x: number) => {\n        await sleepAtLeast(1)\n\n        if (x > 100) {\n            throw new Error(\"too big!\")\n        }\n\n        return x\n    }\n\n    it(\"ok\", async () => {\n        let res = await Failable.dontThrowAsync(sut, 5)\n        assert(res.value === 5)\n    })\n\n    it(\"err\", async () => {\n        const res = await Failable.dontThrowAsync(sut, 101)\n        assert(res instanceof Err)\n        assert(res.value.message === \"too big!\")\n\n        return \"err\"\n    })\n})\n```\n<a name=\"mWMbd\"></a>\n## 额外的好处\n通过使用 `@jeff-tian/failable` 可以是代码变得更加简洁和易读，拿一段实际代码举个例子：经常会有那种发送网络请求，确保拿到预期结果后，才做下一步逻辑；拿到结果不符合预期或者网络错误的情况下，执行另外一段逻辑。所以可能会看到这样的代码（我在实际项目中经常碰到这样的代码，当然，我总是使用 `@jeff-tian/failable` 把它重构掉）\n```typescript\ntry {\n\tconst response = await this.request(url, options)\n\t\n  if (!response) {\n  \t// 这里是错误处理逻辑\n\t} else {\n    // 进行后续处理逻辑\n  }\n} catch {\n\t// 这里又是一段错误处理逻辑（和 try 里的一段重复）\n}\n```\n使用 `@jeff-tian/failable` 重构后的代码大致长这样：\n```typescript\nconst response = await Failable.dontThrowAsync(this.request, url, options)\n\nif (!response.isOk() || !response.value) {\n  // 错误处理逻辑\n} else {\n  // 后续处理逻辑\n}\n```\n<a name=\"wiRzs\"></a>\n## 总结\n\n<br />本文给出了一个将异常处理纯洁化的 TypeScript 语言实现，欢迎留言给出其他语言对应的示例。\n"
  },
  {
    "id": 31528585,
    "title": "在股市上赚钱是可能的，即使是 A 股",
    "description": "从 2013 年开始，我开始尝试股权投资。因为听过太多关于 A 股的负面消息，所以还是很怕的。但决定下马过河，自己一定得试一试。于是特别小心，从几千块钱开始，累计到现在一共投入了 10 万左右，目前市值接近 30 万，自己来看还是很满意的，算是一个里程碑吧，记录一下并分享一点自己的心路历程。 ...",
    "custom_description": null,
    "updated_at": "2021-02-17T05:02:13.000Z",
    "created_at": "2021-02-17T05:02:13.000Z",
    "slug": "vkl18e",
    "word_count": 2127,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1613537684898-06999af0-3ca7-48ac-9f28-3d5236e40d42.png",
    "body": "从 2013 年开始，我开始尝试股权投资。因为听过太多关于 A 股的负面消息，所以还是很怕的。但决定下马过河，自己一定得试一试。于是特别小心，从几千块钱开始，累计到现在一共投入了 10 万左右，目前市值接近 30 万，自己来看还是很满意的，算是一个里程碑吧，记录一下并分享一点自己的心路历程。<br />\n\n\n| ![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613537684898-06999af0-3ca7-48ac-9f28-3d5236e40d42.png#align=left&display=inline&height=1707&margin=%5Bobject%20Object%5D&name=image.png&originHeight=3414&originWidth=1080&size=1316428&status=done&style=none&uid=1613537673074-0&width=540) | ![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613537705120-bc2e8cd4-2535-4c19-86db-cfa68f973301.png#align=left&display=inline&height=1919&margin=%5Bobject%20Object%5D&name=image.png&originHeight=3837&originWidth=1080&size=1412601&status=done&style=none&uid=1613537692885-0&width=540) | ![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613537720571-8c7d0ce0-8c8b-4113-8b96-a61f8f54fdcf.png#align=left&display=inline&height=1737&margin=%5Bobject%20Object%5D&name=image.png&originHeight=3473&originWidth=1080&size=1414237&status=done&style=none&uid=1613537701803-0&width=540) |\n| --- | --- | --- |\n| ![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613537738339-8447ce22-0e17-48f2-87d1-c0d74adf74bc.png#align=left&display=inline&height=1857&margin=%5Bobject%20Object%5D&name=image.png&originHeight=3714&originWidth=1080&size=1464504&status=done&style=none&uid=1613537712754-0&width=540) |  | ![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613537745627-bc1255f2-13b0-4238-a6d5-c4acd3a8e87e.png#align=left&display=inline&height=1122&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2244&originWidth=1080&size=919033&status=done&style=none&uid=1613537739470-0&width=540) |\n\n\n\n<a name=\"GVqQ7\"></a>\n## 一定要用闲钱投资\n\n<br />当时决定进入股市，战战兢兢，于是对自己说，一定要用闲钱投资，做好全部亏掉的心里准备，不要心疼。后来基本上都是这样做的（除了多年之后，买入茅台时，违反了这个原则，拼了全力凑了 8 万买进茅台），所以我一直不会，也没有精力去盯股价走势图，反正买了就放在那里，不太看它。<br />\n\n<a name=\"8SFZv\"></a>\n## 坚决不使用杠杆\n\n<br />经常被各种券商使用融资融券杠杆诱惑，但是坚决不开融资融券户，因为太难以把控，而且特别厌恶强行平仓的做法。<br />\n\n<a name=\"ZXjtw\"></a>\n## 不看技术指标\n\n<br />太复杂，而我又没有那么多时间去分析。<br />\n\n<a name=\"faOpL\"></a>\n## 不打听所谓“内幕消息”\n\n<br />相信自己的判断，哪怕要付出代价。从公开信息进行少量的学习，主要还是直觉判断（这点不太好，也曾经有所损失，但我觉得即使是有损失，只要是自己的判断，那也是可以原谅的，但是如果只是道听途说，造成的损失就不能原谅了，为什么要道听途说呀？）<br />\n<br />曾经有朋友给我推荐海航创新，号称有人知道一些“内幕消息”，我听信后买了点，后来就一直跌停跌停知道打上了 ST。这是我违反了这个原则造成的损失，虽然买得少，所以金额上损失不大（得益于闲钱投资的原则），但是教训是很刻骨铭心的。<br />\n<br />其他的判断，我可能比较特别，第一个大赚的竟然是乐视，记得 2013 年底，我看到很多乐视的产品，并且自己买了感觉非常不错。比如乐视超级电视，还有就是乐视超级手机，之所以觉得不错，是因为在之前我用的是 Windows Phone，难用的令人发指，而用了乐视手机，被好用得感动，而且价格还便宜，果断买了它的一手股票。后来 2 千多块的成本很快飙升到 2 万多，再后来，听罗振宇的《时间的朋友》演讲，他说乐视的故事，你们敢听，我都不敢讲了。我感到有巨大的不确定性，就卖掉了乐视的股票，后来不久乐视竟然到了退市的地步，还好避开了。<br />\n<br />第二个赚钱的股票，也是通过体验它们的产品来的，就是 TCL。几年前我买了 TCL 洗衣机、冰箱都便宜好用，后来买空调的时候，两个房间，一个买了 TCL 空调，一个买了日立，本来想着，日本的品质口碑一向都很好，但是对比下来，尽管日立的更贵，但是噪音更大（讽刺的是日立牌的卖点之一是静音），效果更差（可能是买到次品了，用了没多久就基本没有制热效果了），但是 TCL 空调真的是没有声音，知冷知热的效果都特别好，遥控器使用的感觉也是更先进。当时就买进了 TCL 科技的股票，成本是 3 块钱，后来涨的很猛，到现在还在涨，已经到 9 块钱了。<br />\n<br />第三个赚钱的股票，是科大讯飞，这个很有意思，我是在 2015 年开始，在开发过程中，需要对接科大讯飞的 API，主要是做语音识别（我们做的是一个青少儿英语在线课程产品），其实在技术选型确定科大讯飞之前分别试用过 Bing 的、谷歌的、声网的以及一些国外的厂商，发现有意思的是，科大讯飞的识别精准度最高（注意是英语），果断买入，直到最近，听说它还在涨。（声网的也不错，但是似乎没有在 A 股上市）<br />\n<br />第四个就是茅台，800 块买入。这是我唯一一次为买入股票而筹措资金的，违反了使用闲钱的原则。但是没有办法，它太贵了，是在没有那么多闲钱。这个倒不是自己体验他们的产品觉得不错（我不喝酒，尤其对白酒没有好感，但是最近团建时我唱了一口，觉得居然很好喝），而是在一本财经杂志上看到了一篇对茅台的详细数据分析，亮点在于说茅台由于制酒流程导致，其产能的投入，至少需要 5 年之后才能在市场上体现出来。而那片文章透露，茅台的产能投入在那一年翻番了，于是尽管价格已经很贵，但我还是买入了 1 手，期待 5 年后，股价能够到 1600 左右。但是到今天正好 5 年过去了，价格已经到了 2600，而且中金公司还调高了目标价在 3000 左右，这太疯狂了，可能有泡沫，或者有我不知道的数据支撑，但是用巴菲特的话说，我已经拥有足够的安全边际了。<br />\n\n<a name=\"DTCS1\"></a>\n## 不以涨喜，不以跌悲\n\n<br />2015 年底到 2016 年，是一个疯狂的阶段，当时大家都叫嚣着 A 股要冲向 6000 点，随后很快跌倒 2000 多点，我也承受了一些账面损失，浮亏 2 万多，但是投入也就在 8 万左右，总之，从有盈利，到开始浮亏，而且越来越亏的状态持续了快一年，但是那一年我并没有很不安，这得益于闲钱投资的原则。反而，我把这段使其看作是播种的机会，看好的股票，持续加仓（每当工资到手，就往里买一点）。这也是最近几年，收益率特别高的原因，因为在足够的低价区补了仓。唯一遗憾的就是茅台跌倒 500 多时没有加仓，因为工资微薄，拿不出 5 万的闲钱…… 但是当时别人嘲笑我的茅台大亏时，我特别镇定，因为有数据支撑，我坚信 5 年内茅台股价要翻倍的（其产能已翻倍，只是要 5 年的时间凸显）。我甚至希望那些嘲笑我的同事们，可以借我点钱，我去加仓，但是当然没人借我钱。好笑的是最近，茅台股价已经到 2000 多了，有前同事想要入场了……<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613538082925-a5d27dde-ef74-4a51-a7b1-a7c3c1fcae33.png#align=left&display=inline&height=1122&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2244&originWidth=1080&size=1042576&status=done&style=none&width=540)<br />\n\n<a name=\"U1qUt\"></a>\n## 做时间的朋友\n\n<br />罗振宇的口号：做时间的朋友，我很喜欢。最近几年的收益率是大幅度跑赢各种指数，如果能这样一直持续，那就超越巴菲特了。我知道，这是不太可能的，除非再来一个股灾，趁低价大幅买进一些好股票。当然，这都是可遇不可求的，过十年，我再来回顾一下吧。希望有好的结果，但是做好了血本无归的准备，所以，闲钱投资的原则还要坚守。\n"
  },
  {
    "id": 31496945,
    "title": "程序员影响产品经理的利器",
    "description": "前面聊过，作为程序员，如果不尽早晋升，在 35 岁后很可能就失业或者被迫转行做外卖员了。也聊到过，如果要晋升，被考察的其中一项就是影响力。一流的程序员，可以影响整个世界，比如计算机领域的各种之父们。我们不是一流的程序员，影响不了世界，先从身边人开始影响吧。经常看到新闻说产品经理和程序员因为需求...",
    "custom_description": null,
    "updated_at": "2021-02-15T08:52:07.000Z",
    "created_at": "2021-02-15T08:52:07.000Z",
    "slug": "tk12p8",
    "word_count": 1556,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1613378880538-2ad7fbff-6287-4987-9b3e-b1977106bb2e.png",
    "body": "前面聊过，作为程序员，如果不尽早晋升，在 35 岁后很可能就失业或者被迫转行做外卖员了。也聊到过，如果要晋升，被考察的其中一项就是影响力。<br />\n<br />一流的程序员，可以影响整个世界，比如计算机领域的各种之父们。<br />\n<br />我们不是一流的程序员，影响不了世界，先从身边人开始影响吧。经常看到新闻说产品经理和程序员因为需求问题打起来了，这真的是不堪入目。原因无非是产品经理觉得程序员不按自己的需求去写代码，而程序员却觉得产品经理不按照自己的要求去写需求，总之，产品经理影响不了程序员，程序员也影响不了产品经理，于是打起来了，最终免不了双方都被公司所开除。<br />\n<br />**所谓影响力，是用一种别人所乐于**[**接受**](https://baike.baidu.com/item/%E6%8E%A5%E5%8F%97/29545)**的方式，改变他人的**[**思想**](https://baike.baidu.com/item/%E6%80%9D%E6%83%B3/33180)**和行动的能力**。如果双方都能有效地影响对方，打架的悲剧就不会发生。<br />\n<br />今天分享一个我所使用过的一个方法，成功改变了产品经理提需求的姿势，为后面的合作打下了良好的基础。虽然标题叫做程序员影响产品经理，以及的确当时是我作为程序员影响了当时的产品经理，但如果产品经理自己主动采用这个方法，也能让程序员愉快地写代码，成功地影响程序员，避免打架的尴尬。<br />\n<br />这个方法就是：<br />\n\n<a name=\"qTYMG\"></a>\n## 实例化需求\n\n<br />这其实是一本书，但是我今天只举一例子，正好实例化需求地中心思想，就是用举例子地形式说明需求。<br />\n<br />我曾经在一家专注职业教育的公司任职，产品经理提了一个需求，开发做了一段时间，验收时产品经理觉得不对，但是工期又紧，双方都顶着巨大的压力，需求讨论会开了好几轮，再这样下去很可能真的要打起来了。<br />\n<br />于是我在那一次的周报中反应了这个问题，提出了改进建议：\n\n---\n\n> <a name=\"6297d5e8\"></a>\n### 建议与思考\n> \n\n> **问题**： 在最近的迭代中发现，大家对于反复讨论过的需求，仍然有各自不同的理解。\n> \n\n> **分析**： 需求描述的是逻辑，然后由于自然语言天然的不精确性，导致不同的人会有不同的理解。\n> \n\n> **实例**： XX 项目里有对板块解锁周期的描述：某一个板块可观看的时长，这个时长后才能解锁下一个板块。这个描述，不同的人就有不同的理解，主要是容易让人误解为，第一个板块也是在周期之后开始（可能程序员很习惯设想还有一个不显式在页面上显示的，但是逻辑上存在的第零个板块）。\n> \n\n> **改进方案**： **实例化需求**。使用举例的方式，来说明需求，就不会有歧义，比如上面的例子改成：\n> \n\n> “初级产品经理入门”这门在线课程，它一共有 4 个板块。这 4 个板块的解锁周期分别为：板块一周期 7 天，板块二周期 2 天，板块三周期 7 天，板块四周期 5 天。\n> \n\n> 如果开课日期是：2019.1.1，那么前端显示的板块区间范围是：\n> \n\n> - 板块一：2019.1.1-2019.1.7\n> - 板块二：2019.1.8-2019.1.9\n> - 板块三：2019.1.10-1.15\n> - 板块四：2019.1.16-1.20\n> \n\n> 这样不仅消除了歧义，而且，更进一步采用严格的“给定某一条件……-当……-那么……”这样的结构来描述需求，就能够采用一些工具来生成自动化测试。\n> \n\n> 这样的好处是不仅需求清晰，而且是可以自动化运行的活文档。\n> \n\n> 另外，通过将模糊的大需求拆解成一个个使用三句话描述清楚的小需求，也算是金字塔原理的一个应用（当时这家公司很推崇《金字塔原理》这本书）。\n\n\n---\n\n<a name=\"ZZa5z\"></a>\n## 提高开会效率\n\n<br />后来，产品经理写的需求，总是会刻意给出例子。并且他们自己也发现，在举例的过程中，会发现自己的逻辑漏洞，从而在需求评审会之前，就能自己发现很多问题，提前可以打磨。在开需求评审会时，需求都比较清晰，没有歧义并且不再有那么多低级错误，或者漏洞，开会效率提高了很多。<br />\n\n<a name=\"eNlGM\"></a>\n## 程序员写代码极度舒适\n\n<br />后来程序员写代码去实现实例化的需求时，心情是极度舒适的。但是具体的当时的项目代码就不分享了，毕竟那家公司是闭源开发方式。<br />\n<br />举一个更有含金量的例子，这可是我当时学的一门课程，5000 元一天，含金量可想而知。<br />\n<br />需求是写成这样子的：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613378880538-2ad7fbff-6287-4987-9b3e-b1977106bb2e.png#align=left&display=inline&height=480&margin=%5Bobject%20Object%5D&name=image.png&originHeight=960&originWidth=1280&size=1166077&status=done&style=none&width=640)<br />程序员写完代码，是可以运行这些需求的，并即使给出反馈结果：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613378907078-e536c3aa-f41f-4037-b2d6-99cf4c2ed49b.png#align=left&display=inline&height=480&margin=%5Bobject%20Object%5D&name=image.png&originHeight=960&originWidth=1280&size=1411282&status=done&style=none&width=640)<br />上面截图是对需求运行的反馈，同时运行的产品截图如下：<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613378972843-156f0bb6-c594-4425-8412-60616212c556.png#align=left&display=inline&height=480&margin=%5Bobject%20Object%5D&name=image.png&originHeight=960&originWidth=1280&size=749690&status=done&style=none&width=640)<br />\n\n<a name=\"Ansm0\"></a>\n## 总结\n\n<br />实例化需求帮助产品经理厘清需求，避免逻辑漏洞和低级错误，和程序员沟通时避免语言歧义，而程序员开发时心情极度舒适，真的是工作的必备良药呢！\n"
  },
  {
    "id": 31476837,
    "title": "阴形思维的妙用",
    "description": "《5 天学会画画》我本来不喜欢那种速成教材，号称 30 天学会英语，7 天学会编程等等。但是却被一本书吸引到了：《5 天学会画画》。几年前一口气看完，今天又看了一遍作者录的视频，也是一口气看完。当然，由于是一口气看完，所以只花了几个小时，远没有花到 5 天的时间，显然没有最终学会画画，但是给我...",
    "custom_description": null,
    "updated_at": "2021-02-14T07:31:26.000Z",
    "created_at": "2021-02-14T07:31:26.000Z",
    "slug": "xd2s4g",
    "word_count": 3322,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1613263515799-0c8fb42c-23c8-45c3-90ea-92d51ea29af8.png?x-oss-process=image%2Fresize%2Cw_1500",
    "body": "<a name=\"vjLjV\"></a>\n## 《5 天学会画画》\n\n<br />我本来不喜欢那种速成教材，号称 30 天学会英语，7 天学会编程等等。但是却被一本书吸引到了：《5 天学会画画》。几年前一口气看完，今天又看了一遍作者录的视频，也是一口气看完。<br />\n<br />当然，由于是一口气看完，所以只花了几个小时，远没有花到 5 天的时间，显然没有最终学会画画，但是给我的启发却是让我终身受用，并且远不止应用在画画上面。<br />\n<br />这本书一共介绍了五个技巧，其中给我印象最为深刻的技巧是“画阴形”，或者叫做画“虚空间”。“阴形”相对于“阳形”，拿浮雕举例，凹下去的是阴形（多半是背景），凸起的就是阳形（多半是主体）。<br />\n<br />作者拿画一把椅子举例，当初学者准备画一张椅子，并希望画得像（也就是现实主义画派，或者说是素描），想要开始，却无从下手。因为当你开始观察椅子，就会发现细节太多，甚至每一根椅子的腿，由于摆放位置等因素，导致看上去都不一样。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613263515799-0c8fb42c-23c8-45c3-90ea-92d51ea29af8.png#align=left&display=inline&height=788&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1576&originWidth=1512&size=2258121&status=done&style=none&width=756)<br />画阴形的技巧就是，忘掉椅子，去观察椅子背后的虚空间，以及由于椅子的部分遮挡导致的原本完整的虚空间被割断形成的各个多边形形状，这些就是阴形。去画这些阴形要简单得多，无非是一些四边形、三角形或者一些多边形等等，当把阴形画完之后，阳形的椅子自然就在那里了。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613264259730-ddc784f9-ec10-47e7-b7f9-60156f3656c7.png#align=left&display=inline&height=725&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1450&originWidth=1486&size=1526837&status=done&style=none&width=743)<br />这个绝妙的技巧，利用了一个事实：**虚空间和实体共享同样的边线**。当你描绘完阴形的边线，阳形就自己显现了。所以几乎在所有的练习中，作者总是会先强调把画面先涂黑，然后你也会看到，作者使用橡皮擦的次数和使用笔尖的次数相当，使用橡皮擦擦出的就是虚空间，而实体在擦的过程中就自己显现了。即使在画人物肖像时，作者仍然是这样做的。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613266271848-c411acd4-ab1e-4c5f-aecf-86029843b16d.png#align=left&display=inline&height=832&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1664&originWidth=2078&size=2791831&status=done&style=none&width=1039)\n<a name=\"fLpQz\"></a>\n## 测试驱动开发\n\n<br />几年前看完这本书，就深受触动，尽管当时我没有立即在画画上面实践这个技巧，但是沉迷于写代码的我，正好开始接触到一种编程技巧：**测试驱动开发**。可以说这就是编程上的“画阴形”方法，从此在编程上一直使用这个方法至今，爱不释手。<br />\n<br />就如同绘画的初学者出于本能会去画阳形，但是由于把控不了实体的复杂性，导致各种变形，以至于最终成果惨不忍睹。初级的编程者会出于本能去尝试直接实现需求，最终发现代码写着写着就在复杂性中失控了，严重的会运行不起来，而好不容易调通了后扔给测试人员去测，祈祷能够顺利过关。但现实是各种被打回，改了这个 Bug 又带来新的 Bug，改好新的 Bug 老的功能点又坏了，就像铺床一样，铺好了这个角，那个角又皱了起来，如此往复陷入一个焦油坑，最终放弃。<br />\n<br />**测试驱动开发**则和本能相反，写实现代码前，先写测试。不妨把实现代码比做阳形，测试代码就是阴形。在面对复杂的需求说明时，先不要去想如何实现，而是去想怎么测试，怎么验收？先写出一个测试用例，就是找到一个虚空间中的基本形。然后实现并且仅仅只实现这个测试用例，使其通过后，再增加下一个能够让测试失败的用例，随后写实现代码，能够同时通过所有的测试用例，如此重复，直到所有的测试用例能够涵盖整个需求说明。当所有的测试用例都通过时，需求就做完了，一个可以工作的软件自然浮现出来了。<br />\n<br />这和“画阴形”的绘画技巧异曲同工，这些测试用例，就是需求说明的边界线。<br />\n\n<a name=\"2Z49D\"></a>\n## 不可能的任务\n\n<br />2013 年我在英孚教育青少儿实验室工作，有一次团队要做的一个需求，是让系统帮助电话销售主管自动分派销售线索，这个自动分派需要做到动态适应，以及公平。一个电话销售团队，由销售主管和销售专员组成，但是销售专员的数量是动态变化的，因为有老人离职和新人加入。并且每个人的熟练程度不一样，同一个人的熟练程度也会随时间变化。我们设想的是让主管只需要在系统中录入专员的姓名和熟练程度，当有变化时只需要添加新人、删除离职的专员，修改熟练程度。这样主管就能从每天繁重的线索分派中解脱出来，花更多时间发展自己以专员的销售技能。<br />\n<br />这个需求并没有分配给我，但是到迭代周期的尾声时，我从开发经理处得知我们下周的发布先不上这个功能，原因是测出了很多问题，我当时的感觉就是开发已经进入了一个焦油坑的状态。我当时也是年轻，想要多表现，就暗暗分析起这个需求，在第二天站会上看到 PO 显然还是希望我们能上这个功能，我就提出自己来试试做这个功能，如果能通过测试，还是有希望赶上下一个发布的。<br />\n<br />其实当天晚上我已经把需求分析清楚了，得到团队的认同后就直接开始做了。结果是花了一天的时间完成了第一个版本，第二天根据代码评审结果做了些小改。后来测试没问题直接赶上了版本发布。后来我在内部 Wiki 上详细写了一篇文档详细说明了这个需求以及分析过程（后面再撰文分享这个具体算法），并将对其的实现命名为“销售线索的动态强制分布分派算法”，没想到还得到了英孚教育成人英语实验室的架构师的点赞，和一番详细的评论。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613282865826-8ec19c70-0083-47d7-adf4-a4ad65fe2820.png#align=left&display=inline&height=575&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1150&originWidth=1556&size=285920&status=done&style=none&width=778)<br />\n<br />第一个版本上了之后，我本来还准备有机会再优化一下，因为按照算法，是需要将一个累计误差做持久化存储的，以做到历史累计意义上的公平，但是优先级不高，后来竟然一直搁置，再也没有优化过，因为一个次优方案就已经达到了各个利益相关者的预期。我自己回顾下来，从分析需求到上线，只花了 3 天时间，还是挺激动的，觉得自己完成了一个不可能的任务，并且通过内部文档分享间接结识到另一个业务单元的架构师，后来还有幸一起合作过一个项目。后来拿了一个奖状，这个不可能任务应该有所贡献吧。<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613283789801-febcfc7c-c689-40c5-a0f0-4ba6d47e6426.png#align=left&display=inline&height=719&margin=%5Bobject%20Object%5D&name=image.png&originHeight=719&originWidth=960&size=823371&status=done&style=none&width=960)<br />\n<br />这个“销售线索的动态强制分布分派算法”，准备后面再单独分享。我后来回想起这个点子，其实也和“阴形”思想分不开。要支持销售专员的动态设置，还要每次的线索分配都公平，以及把每次的分配汇总成每天、每月、甚至每年，都得是最公平的，顺着这条线思考，就是本能的冲动，而且无从下手。当时我看到尝试实现的代码里充满了各种莫名的 Random()，感觉作者是希望通过祈祷的方式通过测试验收。\n\n其实我是睡觉时在床上思考该怎么解决这个问题的，当时感觉动态和公平是阳性目标，而且细节多，复杂度高，就放弃了这个方向，转而思考它在这个问题空间中切割出的阴形形状会是什么样子，后来就在迷糊中抛弃掉现实，进入虚拟空间，在虚拟空间中，没有整数约束，于是自然有一个绝对符合主管设定的强制分布方案，然后这个公平的阳性目标，就转变成了最小化现实方案与理想方案的误差的阴形目标了。第二天在实现这个“销售线索的动态强制分布分派算法”时，再一次使用了测试驱动开发，虽然具体工具使用上还很生疏，不过在开发经理的帮助下，最终按照正确的姿势完成了，并且只花费了远少于前一个开发所用的时间。\n\n<a name=\"DlYky\"></a>\n## 测试驱动开发可以驱动出算法吗？\n\n<br />也许可以，也许根本就用不着。拿上面的例子，“销售线索的动态强制分布分派算法”不是测试驱动出来的，而是受到一个启发得来的，所以这个点子的产生没有用到测试驱动开发，因为还没有开始开发。但是不管这个算法怎么想来的，都推荐使用测试驱动开发去实现它，避免陷入焦油坑啊同志们！\n\n但是如果测试驱动出了算法我也不惊讶，我之前的一个语言解释器，就是从 0 开始测试驱动来的，动手前完全没有设计过：[https://zhuanlan.zhihu.com/p/345079513](https://zhuanlan.zhihu.com/p/345079513)<br />\n\n<a name=\"1Qc8G\"></a>\n## 预测上证指数走势\n\n<br />除了画画和编程，其实生活中也能使用这个阴形思维。假如上证指数每天有 50% 的可能性上涨，那么你有多大的把握保证下周上证指数会上涨呢？<br />\n<br />这个问题如果顺着思考，就需要将如下这些概率加起来：\n\n- 只在星期一上涨的概率\n- 只在星期二上涨的概率\n- ……\n- 在星期一、星期二上涨的概率\n- 在星期以、星期三上涨的概率\n- ……\n- 五天全部上涨的概率\n\n\n<br />下周指数上涨的概率就是阳性目标，这样分别罗列各种概率最后求和的分而治之思想是很好的，也能得到正确的结果，但是考虑一下它的阴形：即下周不上涨的概率，会显得更加简单，显然是![](https://cdn.nlark.com/yuque/__latex/9c2a64f32ad1d12f4f5d877f1b375b56.svg#card=math&code=%28%5Cfrac%7B1%7D%7B2%7D%29%5E5%20%3D%20%5Cfrac%7B1%7D%7B32&height=37&width=80)。于是下周上涨的概率就是![](https://cdn.nlark.com/yuque/__latex/bdc609f964287623169e8042d0f361c1.svg#card=math&code=1-%28%5Cfrac%7B1%7D%7B2%7D%29%5E5%20%3D%20%5Cfrac%7B31%7D%7B32%7D%20&height=37&width=109)。\n\n当然，这个问题的前提不成立，之所以选择上证指数，是为了醒脑和贴近生活（这年头还有人不看股票的么？）。其对应的严谨但是无趣的例子是：连续抛一枚硬币 5 次，出现正面的可能形是多少？<br />\n\n<a name=\"7mwG6\"></a>\n## 总结\n\n<br />其实有人会说，这不就是反向思考嘛。对，或者叫换位思考也行。但是我看到《5 天学会画画》里的“画阴形”技法后，觉得“阴形”思维最生动，提到这个词，就能看到一个平面，突然平面上一部分凹陷进去，浮雕显现了出来。难怪有雕刻大师说，我没有在雕刻，我只是把多余的部分凿掉了而已。<br />\n<br />反证法，数学上屡见不鲜，在集合论和概率论中，这种思维方式更是屡试不爽。有意思的是，这种我原本以为只是科学思维中的方法，没想到艺术家也是这么思考的。高手都有同样的洞见，这个洞见就是**阴阳相对抗，却又互为补充**。<br />\n<br />![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613287348001-be5d0597-0b68-40a8-addb-4a2f9cfce024.png#align=left&display=inline&height=229&margin=%5Bobject%20Object%5D&name=image.png&originHeight=458&originWidth=580&size=367643&status=done&style=none&width=290) ![image.png](https://cdn.nlark.com/yuque/0/2021/png/221736/1613287434609-e6e560c0-4481-401a-a2bd-29cfe93d10f5.png#align=left&display=inline&height=228&margin=%5Bobject%20Object%5D&name=image.png&originHeight=874&originWidth=898&size=653238&status=done&style=none&width=234)<br />\n<br />\n\n"
  },
  {
    "id": 31473992,
    "title": "我，不想做外卖员",
    "description": "某乎上有个热门问题：35 岁以上的程序员都去了哪儿？除了极少数的晋升为管理层外，其余的多数回答都是去做了外卖员……也有段子说外卖小哥转行程序员的，但是程序员转行做外卖员则是活生生的现实了。是的，每天都生活在失业的焦虑中。是的，我不想等到年纪大了之后只能去做外卖员。虽然外卖员令人尊敬，但是如果年...",
    "custom_description": null,
    "updated_at": "2021-02-13T14:00:05.000Z",
    "created_at": "2021-02-13T14:00:05.000Z",
    "slug": "myltwz",
    "word_count": 4206,
    "cover": "https://cdn.nlark.com/yuque/0/2021/png/221736/1613224676473-9a9281b8-4049-4a64-bdc9-e9d1db296d98.png",
    "body": "某乎上有个热门问题：35 岁以上的程序员都去了哪儿？除了极少数的晋升为管理层外，其余的多数回答都是去做了外卖员……<br />\n<br />![](https://cdn.nlark.com/yuque/0/2021/png/221736/1613224676473-9a9281b8-4049-4a64-bdc9-e9d1db296d98.png#align=left&display=inline&height=418&margin=%5Bobject%20Object%5D&originHeight=418&originWidth=798&size=0&status=done&style=none&width=798)<br />\n<br />也有段子说外卖小哥转行程序员的，但是程序员转行做外卖员则是活生生的现实了。<br />\n<br />是的，每天都生活在失业的焦虑中。是的，我不想等到年纪大了之后只能去做外卖员。虽然外卖员令人尊敬，但是如果年纪大了在程序员中没有竞争力，那么在外卖员里，肯定更加没有竞争力。<br />\n<br />说到点子上了，**保持竞争力**很重要。<br />\n<br />有时候，自己觉得自己很牛逼，但是现实的打击会让你开始怀疑自己。这就像很多人创业失败一样，创始人自己很有激情，自己把自己感动得热泪盈眶，但是最终没有感动市场。<br />\n<br />所以，保持竞争力，不要仅仅自己觉得，而是关键要获得他人的认可。这和一些鸡汤文推崇的不要在乎他人的看法，要活出自己什么的不一样。或者这样说，不要在意有些人的看法， 但是同时还是要在意另一些人的看法，也就是说，世界上有这一拨人，有那一拨人，你总得向某一拨人靠近，而不是原地不动，做所谓不一样的烟火。<br />\n<br />作为程序员，作为一个打工人，还是需要获得上级的、周围同事的、以及人力资源部门的认可的，不然很难晋升，最终逃脱不了失业、被迫转行的命运。<br />\n<br />昨天在《[低头写代码，抬头看方向](https://www.yuque.com/tianjie-cjnre/sldmka/hydnt7)》里详细介绍了某外企的 M4 级别的发展建议，今天再介绍一下 M4、M3 级别的详细定义和 M3 级别的发展建议，希望能够增加你对从 M4 级别晋升到 M3 级别的转变有一些认知。<br />\n<br />首先看一下该外企对 **M4 级别的定义**：<br />\n<br />经理负责执行设定的关键绩效指标。经理需要使用自己的知识在复杂的环境中成功地交付，响应运维挑战，并保证工作流可以高效地执行这些目标。经理通常拥有项目的所有权，并负责根据项目时间表和关键绩效指标进行监控和交付。该角色要求他们去和内部或者外部的利益相关人协作，并且应该利用他们的职能专长去支持高级领导。要获得成功，经理也需要识别到发展自己的机会来增强自己的领导力技能，并成为领导力行为框架的榜样。<br />\n<br />**对 M4 级别的表现期望：<br />**<br />\n\n\n| **合作<br />** | **信心<br />** | **创新** |\n| --- | --- | --- |\n| _建立清晰的共同目标_\n_在决策制定时邀请他人\n_\n_构建富有成效的关系\n_ | _正直行事_\n_学习并成长_\n_设定高期望值_ | _求新_\n_激发创造力\n_\n_将想法转化为行动\n_ |\n| > 寻求理解如何为整体战略做出贡献，并朝着共同的目标努力。\n> 积极参与新项目，并找到增加价值的机会。\n> 利用职能专业知识和运营洞察力来支持高级领导决策。\n> 为概念规划做出贡献并分享想法，以支持更广泛团队的有效性。\n> 在团队内部和团队之间进行协作，倾听他人，并建立信任。\n> 根据需要在团队内部和团队之间建立关系和协作，以提高效率。 | > 执行任务，根据总体战略交付，并努力超越预期。> 通过高质量的执行建立信誉，并寻求影响决策。\n> 对成功和失败负责，并把它们看作是学习的源泉。\n> 愿意给予和接受诚实、直接和周到的反馈。\n> 积极投入时间在个人发展和提高工作相关技能上。\n> 设定具有挑战性的目标，获取完成目标所需的资源和/或支持。 | > 利用职能知识提高效率，从不同角度解决问题。> 表现出尝试新想法的欲望，并表现出向他人学习的开放态度。\n> 通过分享早期想法和乐观地探索不同的观点来培养个人创造力。\n> 将新想法与成熟的流程和方法结合起来，并寻求他人的适当支持和认可，以实现执行。 |\n\n\n\n**对 M4 级别的经验要求：\n**\n\n\n\n| **人员与团队\n** | **业务\n** | **市场 / 职能部门\n** |\n| --- | --- | --- |\n| > 在某些情况下，直接或间接管理1或2名初级工作人员或实习生，重点支持他们的个人发展。<br />> 如果以个人贡献者的身份工作，作为团队的积极成员，努力提升团队的成功。<br />> 通过支持同事并在必要时适应他人的工作方式来促进团队合作。<br />> 在自己的职能和水平范围内发展和壮大强大的同行网络。 | > 展示数字化思维，拥有使用不同数字化工具和资源的能力。> 管理项目的日常细节，并与相关利益相关者协调。<br />> 专注并推动交付 —— 在实现目标和完成高质量工作方面有着良好的记录。<br />> 知道如何在期限紧迫的高压环境中设定优先事项，并表现出必要的应变能力。 | > 展示对不同文化、想法和消费者需求的理解。<br />> 与其他部门和/或市场的同事一起参与复杂的项目。<br />> 展示清晰的沟通技巧和敏捷的工作方式，保持全球联系。<br />> 致力于简化流程和标准化跨市场/职能部门的方法。 |\n\n\n<br />你可以参照以上描述，对照自己是否已在这个级别，如果是，并且希望晋升到下一个级别，那么需要**首先做好当前级别的事情**，从会做到做好，并且能够优化和突破，达到当前级别的精通水平，**然后对照下一个级别的要求来提升自己**的各种能力，并**主动寻找做下一级别的事情的机会**，拿到好的结果。<br />\n<br />M4 的下一级别是 **M3**，下面来看看这个**级别的定义**：<br />\n<br />高级经理负责推动战略执行。他们的角色要求他们专注于运营交付，并将战略方向转化为关键绩效指标。高级经理通常是在其职能领域的概念层面以及实践层面都拥有广度和深度的专家。高级经理为了交付共同目标既会独立工作也会在其职能范围内以及跨职能部门之间与他人进行协作。多数高级经理还会被要求以跨文化的方式进行工作从而保证全球一致性。高级经理需要通过增强业务影响力来发展领导力技能，并将所学应用于带领一个团队或者支持更初级的同事，从而符合领导力行为框架。<br />\n<br />**对 M3 级别的表现期望：<br />**<br />\n\n\n| **合作<br />** | **信心** | **创新<br />** |\n| --- | --- | --- |\n| _建立清晰的共同目标_\n_在决策制定时邀请他人\n_\n_构建富有成效的关系\n_ | _正直行事_\n_学习并成长\n_\n_设定高期望值\n_ | _求新_\n_激发创造力\n_\n_将想法转化为行动\n_ |\n| > 了解一个人如何为整体战略做出贡献，并让其他人参与进来，为执行战略和交付成果制定可行的计划。\n> 确定与其他团队的协同作用，以有效地实现共同的目标。\n> 支持他人理解他们在战略中的角色。\n> 与全公司的员工和团队建立关系和合作。\n> 利用职能专业知识为自己团队之外的共同努力做出贡献。\n> 指导个人在团队内部和跨团队协作，并作为一个团队达成决策。 | > 掌控工作，分享经验，培养更多初级团队成员。\n> 通过高质量的执行和跟进建立信誉。\n> 了解最新的相关市场发展和趋势，并鼓励其他人也这样做。\n>通过公开对成功和失败负责来树立一个好榜样。\n> 激励团队成员接受新的挑战并超越期望。\n> 通过展示信任、透明和对反馈的开放，树立企业的价值观。\n | > 探索职能领域内的创新、新实践和流程改进。\n> 以身作则塑造一个安全的环境，在这个环境中，团队成员能够探索、冒险和挑战传统思维。\n> 委派并给予他人支持成长和发展的机会。\n> 知道何时将想法转化为行动，并确保对新概念进行适当的审查和验证。\n> 将新的概念和想法与成熟的流程和方法结合起来。\n> 利用不同团队的思维来创造新的机会，以推动最高和最低的结果。 |\n\n\n\n**对 M3 级别的经验要求：\n**\n\n\n\n| **人员与团队** | **业务\n** | **市场/职能部门\n** |\n| --- | --- | --- |\n| > 根据需要，直接或间接领导一个具有以下经验的小团队:<br /> - 培养技能来指导和发展团队成员。 - 设定明确的方向，并确保角色和职责的明确性。<br />- 通过根据项目时间表和关键绩效指标积极管理和交付来关注团队绩效。<br />- 与不同的团队成员和利益相关者沟通并调整影响风格。<br /><br />> 在自己的职能部门和跨职能部门内发展和壮大强大的同行网络，以推动核心流程。 | > 彻底了解当前企业、企业的战略、流程和职能/市场。<br />> 通过与他人合作实现目标，展示将战略转化为交付的能力。<br />> 使用数据和相关的业务措施来提高团队生产力和实现战略意图。<br />> 管理复杂、多方面项目的端到端交付。 | > 管理跨职能和/或跨文化项目的成功关键要素。> 深入了解当地、地区或全球市场格局以及各自的消费者。<br />> 欣赏不同的文化动态；能够作为多元化团队的一员有效地工作。<br />> 如果需要的话，表现出希望在家庭所在地之外生活或工作，以完成短期或长期任务。 |\n\n\n<br />**对高级经理（M3）的发展建议：<br />**<br />\n\n\n| **可能遇到的挑战<br />** | **克服它们的建议**<br /> |\n| --- | --- |\n| 处理责任和有限的授权。 | 当在一个项目上工作时，确定需要做什么决定以及谁能做这些决定。考虑谁拥有所需的信息，并为正在做出的决策定义标准。与你的经理一起审核并达成一致。将决策委托给团队中合适的人，并尽可能做出贡献。 |\n| 被视为有影响力的人。 | 找到一个你认为是影响者的榜样人物。研究为什么那个人是一个好的影响者。通过练习和寻找说话的机会来提高你的沟通和表达技能。求反馈。知道自己擅长什么，并寻找在这些领域可以做出更多贡献的地方。 |\n| 在成为技术专家和领导/发展下属上找到平衡。 | 列出你一周花在专家活动/执行运营工作上的时间，与专注于发展他人/人员管理的活动相比，决定你需要花在发展他人上的最佳时间，并在你的日历中记录下来。与您的经理和同事会面，审查领导力行为框架，并共同确定需要发展的领域。 |\n| 一致且相关的流程和项目管理及改进。 | 使用现有的资源、流程和系统。集中注意力，把事情完成。确定您的团队最能控制的流程。让相关人员参与规划流程，确定哪些方面可以改进，以及如何改进。承诺实施商定的变更。让团队做出改变，并报告结果和提高的效率。 |\n| 帮助团队看到他们的工作和战略之间的联系。 | 直接与人交谈，确保你理解正在做的工作及其与战略的联系。创建团队工作如何与战略相联系的路线图。让团队参与评审路线图草案，以使其不断发展。讨论路线图与优先级的关系。 |\n| 在发展你自己，与同时发展你团队中更多的初级成员间找到平衡。 | 与你的团队、他们的团队和你的团队谈论发展。一起确定一个团队发展项目，并与每个人单独确定一个，包括你自己。制定发展计划，定期检查团队和个人计划的进展。设定现实的日期。汇报结果，用新计划重复。 |\n| 参与/管理和发展虚拟团队和全球团队。 | 与你的团队一起制定并坚持使用沟通策略。让团队成员参与确定如何在虚拟环境中改善合作，倾听他人的工作方式和偏好，并对其持开放态度。花时间和团队中的每个人交谈，讨论优势、发展领域和激励因素。根据需要采取行动。 |\n\n\n<br />**高级经理（M3）的必备技能、减分项和加分项：**<br />\n\n\n| **必备<br />** | **减分项<br />** | **加分项**<br /> |\n| --- | --- | --- |\n| > 确定如何通过运营流程实施战略<br />> 在没有直接授权的情况下影响他人并获得支持<br />> 发展人员管理和领导技能<br />> 利用您团队的技术专长<br />> 庆祝团队成功 | > 觉得自己缺乏影响力<br />> 凡事亲力亲为，而不是花时间去教团队成员<br />> 认为如果没有一个直接的团队，就没有必要发展领导技能 | > 提高适应变化环境的能力> 与经理和同事讨论如何让手头的工作符合战略<br />> 利用所有可能的技术和工具进行虚拟工作和交流<br />> 在你的部门内外与同事间建立关系。识别协作和流程改进的机会<br />> 理解是什么激励了团队<br />> 成为一名熟练的沟通者 |\n\n\n<br />**总结**：<br />\n<br />对照 M4 和 M3 的职位详情，**先**将 M4 级别的事情从基础做到熟练，直到**精通**，**然后主动寻找机会**去尝试做 M3 级别的事情，争取拿到好的工作成果，以此申请晋升，成功的机会更大。<br />\n<br />进入了程序员圈，就要积极打怪升级，早日晋升，避免失业危机，避免不得不去做外卖员。<br />\n<br />当然，人各有志，外卖员的工作非常令人尊敬，如果你因为喜欢或者别的原因，就想去做外卖员，那么，全当我 4000 多字的长文什么也没说。\n"
  },
  {
    "id": 31461572,
    "title": "低头写代码，抬头看方向",
    "description": "作为程序员，也不能一直埋头苦干写代码，还得了解一下代码之外的世界。所谓低头写代码，抬头看方向。要看的这个方向，就是职业发展的方向。首先，有必要了解一下技术职级体系。职级体系是公司管理体系中不可或缺的一部分，也是公司组织管理的基础制度之一。对于员工来说，它和自己的成长、发展甚至是薪酬密切相关。对...",
    "custom_description": null,
    "updated_at": "2021-02-12T15:19:47.000Z",
    "created_at": "2021-02-12T15:19:47.000Z",
    "slug": "hydnt7",
    "word_count": 2195,
    "cover": "https://cdn.nlark.com/yuque/0/2021/jpeg/221736/1613143055740-ed66a9c2-daac-4dfd-b4ff-397d71602552.jpeg?x-oss-process=image%2Fresize%2Cw_1500",
    "body": "作为程序员，也不能一直埋头苦干写代码，还得了解一下代码之外的世界。所谓低头写代码，抬头看方向。要看的这个方向，就是职业发展的方向。<br />\n<br />**首先**，有必要了解一下技术职级体系。<br />\n<br />职级体系是公司管理体系中不可或缺的一部分，也是公司组织管理的基础制度之一。对于员工来说，它和自己的成长、发展甚至是薪酬密切相关。对于管理者来说，和团队里的选拔、任用、考核、激励甚至是培训发展息息相关。融入在日常的人员选拔、培训、绩效管理等工作中。<br />\n<br />更通俗地说，所谓职级体系，就是游戏的段位规则，或者说是公司版的打怪升级指南。你搞清楚自己公司的职级体系，有助于自己的级别晋升。搞清楚跳槽的目标公司的职级体系，有助于拿到更适合自己的顶级结果，以及和 HR 谈个更好的薪酬。<br />\n<br />职级体系可以分为**专业技术职务任职资格体系**和**自立体系**。前者可以简称为**职称体系**，一般应用于教师、医生和律师等职业，其标准统一，全国通行。但是对于程序员来说，需要更加了解后者，也就是自立体系。也就是说，公司自己制定的完整的职级体系，由于是公司自行制定，因此没有统一标准，这对程序员来说是会增加理解上的复杂性。但是好在尽管没有统一标准，但是由于某些企业的强大影响力，导致某些公司的职级体系在事实上成为了某种标准，因此可以使用某些大厂的体系去做个大概的把握。<br />\n<br />自立体系虽然多种多样，不过都会存在两条线：即**专业性**和**管理线**。<br />\n<br />下面对阿里的技术职级体系做一个概览：<br />\n\n\n| **专业级别<br />** | **基本定义<br />** | **对应管理级别<br />** |\n| --- | --- | --- |\n| P1/P2\n | 低端岗位预留\n | \n |\n| P3\n | 助理\n | \n |\n| P4\n | 专员 | \n |\n| P5\n | 高级工程师\n | \n |\n| **P6\n** | **资深工程师\n** | **M1 主管\n** |\n| **P7\n** | **技术专家\n** | **M2 经理\n** |\n| P8\n | 高级技术专家 | M3 高级经理\n |\n| P9\n | 资深技术专家\n | M4 总监\n |\n| P10 | 研究员 | M5 资深总监\n |\n| P11 | 高级研究员 | M6 副总裁\n |\n\n\n\n**其次**，需要给自己一个定位，是一直走技术路线，还是转到管理岗位。\n\n\n阿里的职级体系在国内互联网公司中具有代表性，对于从技术转到管理，是需要很深的技术积累的。作为程序员，如果想要在国内企业转做管理，建议先在专业线达到阿里 P9 级别再转，否则很可能在管理岗位上也混不长久。\n\n\n当然，要转管理岗也可以考虑一下外企，外企的技术管理岗位，技术本身不是特别重要，反而主要看中一些非技术上的能力，比如：\n\n1.  英语要好；\n\n1.  政治正确，不能有歧视倾向；\n\n1.  影响力；\n\n1.  洞察力。\n\n\n\n\n好了，方向就写到这里。由于阿里的巨大影响力，其职级体系的详细描述不难找到，所以在最后，特别附录某外企的职级体系，并列出其中一个职级的发展建议，希望起到对外企技术职级体系的以管窥豹之效果。\n\n\n\n---\n\n\n<br />![](https://cdn.nlark.com/yuque/0/2021/jpeg/221736/1613143055740-ed66a9c2-daac-4dfd-b4ff-397d71602552.jpeg#align=left&display=inline&height=70&margin=%5Bobject%20Object%5D&originHeight=960&originWidth=1920&size=0&status=done&style=shadow&width=140)<br />\n<br />某外企的职级体系概览如下，有意思的是，命名方式和阿里一样，只是数字越小职级越高：<br />\n\n\n| **等级**<br /> | **对应管理级别**<br /> |\n| --- | --- |\n| P2/P1 | <br /> |\n| M4<br /> | 经理 |\n| M3 | 高级经理<br /> |\n| M2<br /> | 总监<br /> |\n| M1 | 高级总监 |\n| S3<br /> | 副总裁<br /> |\n| S2<br /> | 高级副总裁<br /> |\n\n\n<br />**对经理（M4）的发展建议：<br />**<br />\n\n\n| 可能遇到的挑战<br /> | 克服它们的建议<br /> |\n| --- | --- |\n| 处理持续的变化<br /> | 在变化中要经常对优先级做定期重审，养成放下并向前进的意愿。了解是什么导致了你所承受的压力级别上升了并且要想办法克服它们，比如通过锻炼身体或者罗列清单的方式等等。要不断地问：“问什么不呢？”<br /> |\n| 在给定的条件下执行项目/活动<br /> | 讲究方法，在开始前列好优先级并考虑到会影响你完成任务的能力的因素。善于利用现存资源、流程以及系统。专注直至事情完成。<br /> |\n| 发展（跨职能部门）的关系<br /> | （在其他职能单元中）找到正在做和你所做的某一部分类似的工作的人，介绍自己并去了解他们面临的挑战、项目中的交集、优先级以及可能的合作方式。持续培养和构建这些关系。 |\n| 让你的点子更好地被看到<br /> | 识别你的团队所面临的问题并制定优先级，从中挑选同事能够认识到你在其中的专业度的问题，提出方案并请你的经理进行复审以及讨论试验的方案。找你的经理进行谈话以获取你的点子能被更好地看到的机会，并在内部沟通网络中分享你的点子。<br /> |\n| 在有限的授权下优化流程<br /> | 找出流程中最有压力的部分，并通过流程优化去识别如何解决它们。解释清楚这个流程和总体战略的联系，并寻找需要什么才能够让你的优化能够起作用。<br /> |\n| 成为虚拟的跨文化团队的一部分<br /> | 持续使用团队的沟通策略并为之作出贡献，并就如何改进一起的工作提供洞见。开放性地倾听他人的工作风格和习惯。采取必要的行动。<br /> |\n| 管理自己的发展<br /> | 寻找获得反馈和评估的机会，提高和你的角色相关的技能。把你想要发展什么告诉你的经理，并寻求帮助以找到相关领域的导师。找到同级别的你可以教他们的人，并找到那个人可以教你什么。帮助你团队中的其他人发展，并学会将事情委派给其他人，这样你就会有时间在自己最擅长的地方做出贡献。<br /> |\n| 有效激励自己以及团队中的其他人<br /> | 了解什么最能激励自己并找到将它融入到自己的日常工作的方法（比如做延伸作业、保持工作-生活的平衡等）。找到激励团队中的每个人的方法并寻找你们可以一起完成的活动。尝试定期表达感恩的小方式，比如小卡片等。<br /> |\n\n\n<br />**经理（M4）的必备技能、减分项和加分项：**<br />\n<br />**必备：<br />**<br />- 目标执行力<br />- 找到影响他人的方式并且在没有直接授权的情况下赢得别人的支持<br />- 保持跨职能和跨文化的视角<br />- 改进运营流程，从而实现需求并提高效率<br />- 为团队和你的经理带来新的可行的点子与方案<br />\n<br />**减分项：<br />**<br />- 让你对自己团队的截止日期和优先级的关注超越对其他团队的截止日期和优先级的关注<br />- 不盘点和利用自己团队的专业知识和优势<br />- 假设学习只有通过正式培训才有可能<br />\n<br />**加分项：**<br />- 发展对你和业务现在或者将来有帮助的（跨职能）关系<br />- 理解你的工作是如何影响业务的其他部分的<br />- 寻找你所想要发展的技能（比如项目管理）的导师和榜样<br />- 培养你对变化的适应性和开放性<br />- 提高你的冲突管理技能<br />\n<br />今天就写到这里，后面再持续更新其他外企职级的详细描述。\n"
  },
  {
    "id": 7501591,
    "title": "伸手吧，不要重复造轮子！但是……",
    "description": "当搜索不到答案时，该怎么办？碰到问题，先搜索现有解决方案。不要重复造轮子。首先，要相信你只是一个普通人，你碰到的问题别人很可能也碰到过，思考过，给出过解决方案，甚至已经迭代出了最佳实践。但是，当你真的遇到一个难题，花费了大量时间，还没有找到现成解决方案时，那么简化它吧！重新描述问题，但是以更简...",
    "custom_description": null,
    "updated_at": "2020-05-26T05:34:26.000Z",
    "created_at": "2020-05-26T05:34:26.000Z",
    "slug": "skquw2",
    "word_count": 332,
    "cover": null,
    "body": "<a name=\"LMwJT\"></a>\n## 当搜索不到答案时，该怎么办？\n碰到问题，先搜索现有解决方案。不要重复造轮子。<br />首先，要相信你只是一个普通人，你碰到的问题别人很可能也碰到过，思考过，给出过解决方案，甚至已经迭代出了最佳实践。<br />但是，当你真的遇到一个难题，花费了大量时间，还没有找到现成解决方案时，那么\n<a name=\"emx2m\"></a>\n## 简化它吧！\n重新描述问题，但是以更简单的方式。不断思考问题的真正本质，如果定位不到本质，那么列出它的多个简化版本，并尝试解决最简单的版本。<br />如果找到一个能够解决的简单版本，那么恭喜你，以此为突破口，说不定就能一步步解决原来的问题了！<br />\n<br />《原则》的作者，瑞·达里奥说：“不是我知道多少事情，而是我知道在无知的情况下自己应该怎么做。”<br />这是一种智慧，在对问题无知的情况下，重新定义和解决简化版本，是一个可选的行动方案。<br />\n\n"
  },
  {
    "id": 5683051,
    "title": "贷款计算：算月供（等额本息）",
    "description": "问题期初借入一笔钱 A，年利率是 r，按月分期还款，一共分为 n 期。求每月还款数额 a。分析参考《贷款计算：月利率换年化利率》：此处为语雀文档，点击链接查看：https://www.yuque.com/tianjie-cjnre/sldmka/mmcpk3可以从年利率得出月利率为然后画一个贷...",
    "custom_description": null,
    "updated_at": "2020-03-29T08:36:23.000Z",
    "created_at": "2020-03-29T08:29:26.000Z",
    "slug": "gmpgr9",
    "word_count": 232,
    "cover": "https://cdn.nlark.com/yuque/__latex/558db2d8afaa0f0a3969fea8cfbac12e.svg#card=math&amp;code=%5Csqrt%7B%281%2Br%29%7D%7B%7D%3D%281%2Bi%29%5E%7B12%7D&amp;height=31&amp;width=133",
    "body": "<a name=\"kWZdg\"></a>\n## 问题\n期初借入一笔钱 A，年利率是 r，按月分期还款，一共分为 n 期。求每月还款数额 a。\n<a name=\"KlrCJ\"></a>\n## 分析\n参考《贷款计算：月利率换年化利率》：<br />\n<br />\n<br />可以从年利率得出月利率为<br />![](https://cdn.nlark.com/yuque/__latex/fd10eed252d20a800d47cc9eff3ac9d4.svg#card=math&code=i%3D%5Csqrt%5B12%5D%7B%281%2Br%29%7D-1&height=31&width=110)<br />\n<br />然后画一个贷款还款时序图如下：\n![](https://cdn.nlark.com/yuque/__puml/1b4b453ebb9fa48ccfd8e07f0de5863b.svg#lake_card_v2=eyJjb2RlIjoiQHN0YXJ0dW1sXG5cblsqXSAtPiDnrKww5pyfXG7nrKww5pyfIC0-IOesrDHmnJ9cbuesrDDmnJ8gOiDlgJ_lhaUgQVxu56ysMeacnyA6IOi_mOasviBhXG5cbuesrDHmnJ8gLT4g56ysMuacn1xu56ysMuacnyAtPiAuLi5cbi4uLiAtPiDlgJLmlbDnrKzkuozmnJ9cbuWAkuaVsOesrOS6jOacnyAtPiDnrKxu5pyfIDogYSgxK2kpXG7nrKxu5pyfIC0-IFsqXVxuXG7nrKwy5pyfIDog6L-Y5qy-IGFcbi4uLiA6IOi_mOasviBhXG7lgJLmlbDnrKzkuozmnJ8gOiDov5jmrL4gYVxu56ysbuacnyA6IOi_mOasviBhXG5cbuesrDDmnJ8gLT4g56ysbuacnyA6IEEoMStpKV5uXG7nrKwx5pyfIC0-IOesrG7mnJ8gOiBhKDEraSleblxu56ysMuacnyAtPiDnrKxu5pyfIDogYSgxK2kpXihuLTEpXG5cbkBlbmR1bWwiLCJ0eXBlIjoicHVtbCIsImlkIjoiTHhQdngiLCJ1cmwiOiJodHRwczovL2Nkbi5ubGFyay5jb20veXVxdWUvX19wdW1sLzFiNGI0NTNlYmI5ZmE0OGNjZmQ4ZTA3ZjBkZTU4NjNiLnN2ZyIsImNhcmQiOiJkaWFncmFtIn0=)从上图可以直观地看出<br />![](https://cdn.nlark.com/yuque/__latex/cc6b9c2a4c4192efb76115353425a088.svg#card=math&code=A%281%2Bi%29%5En%3Da%281%2Bi%29%5En%2Ba%281%2Bi%29%5E%7Bn-1%7D%2B...%2Ba%281%2Bi%29%2Ba%3Da%5B%281%2Bi%29%5En%2B%281%2Bi%29%5E%7Bn-1%7D%2B...%2B%281%2Bi%29%2B1%5D&height=20&width=630)                  (*)<br />等号右边有个等比数列求和：<br />令     ![](https://cdn.nlark.com/yuque/__latex/fa2604bbd7286ac6b01f38967b89fe58.svg#card=math&code=S_n%3Dq%5En%2Bq%5E%7Bn-1%7D%2B...%2Bq%2B1&height=19&width=174)，                                       (1)                                                       <br />以及![](https://cdn.nlark.com/yuque/__latex/8a1ecf9a85eec6f03b54c26835ff1fe8.svg#card=math&code=qS_n%3Dq%5E%7Bn%2B1%7D%2Bq%5En%2B...%2Bq%5E2%2Bq&height=19&width=187)。                                      (2)<br />那么：(1)-(2) 可得：<br />![](https://cdn.nlark.com/yuque/__latex/267f09e538bb3321d4ae854898321d7c.svg#card=math&code=%281-q%29S_n%3D1-q%5E%7Bn%2B1%7D&height=20&width=135)<br />所以![](https://cdn.nlark.com/yuque/__latex/aa3c0ae297a042f2a7aa006f87b782e0.svg#card=math&code=S_n%3D%5Cfrac%7B1-q%5E%7Bn%2B1%7D%7D%7B1-q%7D&height=39&width=96)<br />所以 (*) 式可以简化成：<br />![](https://cdn.nlark.com/yuque/__latex/3d43e2dcd01afc2ad830b07b818c4f5b.svg#card=math&code=A%281%2Bi%29%5En%3Da%5Cfrac%7B1-%281%2Bi%29%5E%7Bn%2B1%7D%7D%7B1-%281%2Bi%29%7D%3D-a%5Cfrac%7B1-%281%2Bi%29%5E%7Bn%2B1%7D%7D%7Bi%7D&height=42&width=319)\n<a name=\"Jwaxi\"></a>\n## 结论\n![](https://cdn.nlark.com/yuque/__latex/1843b02b8a3f5cc938864e85ca35c56a.svg#card=math&code=a%3D-%5Cfrac%7BAi%281%2Bi%29%5En%7D%7B1-%281%2Bi%29%5E%7Bn%2B1%7D%7D&height=41&width=134)\n"
  },
  {
    "id": 5682978,
    "title": "贷款计算：日利率换算年利率",
    "description": "从《贷款计算：月利率换年化利率》可得：此处为语雀文档，点击链接查看：https://www.yuque.com/tianjie-cjnre/sldmka/mmcpk3",
    "custom_description": null,
    "updated_at": "2020-03-29T07:48:29.000Z",
    "created_at": "2020-03-29T07:48:29.000Z",
    "slug": "bkco85",
    "word_count": 35,
    "cover": "https://cdn.nlark.com/yuque/__latex/ff5eec52246e8dd81f8ca120445c5665.svg#card=math&amp;code=r%3D%281%2Bi%29%5E%7B365%7D-1&amp;height=20&amp;width=112",
    "body": "从《贷款计算：月利率换年化利率》可得：<br />\n<br />\n<br />![](https://cdn.nlark.com/yuque/__latex/ff5eec52246e8dd81f8ca120445c5665.svg#card=math&code=r%3D%281%2Bi%29%5E%7B365%7D-1&height=20&width=112)<br />\n\n"
  },
  {
    "id": 5682755,
    "title": "贷款计算：月利率换年化利率",
    "description": "问题期初借入一笔钱，月利率为 i。问：其等价的年利率 r 是多少？分析为了简单起见，假设期初借入的是 1 块钱。这 1 块钱经过 12 个月，也就是一年后，变成了：即结论",
    "custom_description": null,
    "updated_at": "2020-03-29T07:44:36.000Z",
    "created_at": "2020-03-29T07:44:36.000Z",
    "slug": "mmcpk3",
    "word_count": 75,
    "cover": "https://cdn.nlark.com/yuque/__latex/c6b45ad2c83f284a7f60384216ace927.svg#card=math&amp;code=%281%2Bi%29%5E%7B12%7D&amp;height=20&amp;width=54",
    "body": "<a name=\"kLLiB\"></a>\n## 问题\n期初借入一笔钱，月利率为 i。问：其等价的年利率 r 是多少？\n<a name=\"VRN0F\"></a>\n## 分析\n为了简单起见，假设期初借入的是 1 块钱。<br />这 1 块钱经过 12 个月，也就是一年后，变成了：<br />![](https://cdn.nlark.com/yuque/__latex/c6b45ad2c83f284a7f60384216ace927.svg#card=math&code=%281%2Bi%29%5E%7B12%7D&height=20&width=54)<br />即<br />![](https://cdn.nlark.com/yuque/__latex/5a2387aa35446419a86b1adc36dc532e.svg#card=math&code=1%2Br%3D%281%2Bi%29%5E%7B12%7D&height=20&width=107)\n<a name=\"C7kAe\"></a>\n## 结论\n![](https://cdn.nlark.com/yuque/__latex/8cdf10b04dad6b8d2c66f2c4a183bc35.svg#card=math&code=r%3D%281%2Bi%29%5E%7B12%7D-1&height=20&width=107)\n"
  },
  {
    "id": 5139950,
    "title": "`Tex Workshop` vscode extension",
    "description": "I added a ​Layout Feature to the ​Latex Workshop and published it as ​Tex Workshop .Layout FeatureYou can create a `layout.tex` under the project r...",
    "custom_description": null,
    "updated_at": "2020-03-09T14:43:15.000Z",
    "created_at": "2020-03-09T14:43:15.000Z",
    "slug": "roa7f9",
    "word_count": 280,
    "cover": "https://cdn.nlark.com/yuque/0/2020/png/221736/1583764967869-6aecf62b-1c78-4de0-adca-18a4be0da51b.png",
    "body": "I added a `Layout Feature` to the `Latex Workshop` and published it as `Tex Workshop` .\n\n<a name=\"iYdKC\"></a>\n## Layout Feature\n\n---\n\n> You can create a `layout.tex` under the project root folder, and then reference it in other `tex` files.\n\n<a name=\"B1LfH\"></a>\n## Example\n<a name=\"g4nUM\"></a>\n### `layout.tex`  under project root:\n```latex\n\\documentclass{article}\n\\usepackage{xeCJK}\n\\usepackage{ctex}\n\\usepackage{float}\n\\usepackage{tikz}\n\\usetikzlibrary{automata,positioning}\n\\begin{document}\n{children}\n\\end{document}\n```\n\n<a name=\"qKmFB\"></a>\n### Reference it in other `tex` files using `% !layout`   \nSo you can focus on what you really care in the specific file, no need to write the header and footer again and again. Hooray!\n\n```latex\n% !layout\n\\begin{figure}[H]\n   \\centering\n   \\begin{tikzpicture}[>=stealth,\n   shorten >=1pt,\n   node distance=4cm,\n   on grid,\n   auto,\n   every state/.style={draw=black!60, fill=black!5, very thick}\n   ]\n   \\node[state] (mid)                  {U 公司};\n   \\node[state] (upper) [above=of mid] {产品 A};\n   \\node[state] (right) [right=of mid] {产品 B};\n   \\node[state] (lower) [left=of mid] {C};\n   \\node[state] (left) [below=of mid] {D};\n   \\path[->]\n   %   FROM       BEND/LOOP           POSITION OF LABEL   LABEL   TO\n   (mid) edge node {u.com/path-a} (upper)\n   (mid) edge node {u.com/path-b} (right)\n   (mid) edge node {u.com/path-c} (lower)\n   (mid) edge node {u.com/path-d} (left)\n   ;\n   \\end{tikzpicture}\n   \n   \\caption[xxx]{ yyy }\n\\end{figure}\n```\n<br />\n<a name=\"01C3t\"></a>\n### You get the preview right away\n![0720c0c9-17e1-463f-8430-537eff108f1e.png](https://cdn.nlark.com/yuque/0/2020/png/221736/1583764967869-6aecf62b-1c78-4de0-adca-18a4be0da51b.png#align=left&display=inline&height=1921&name=0720c0c9-17e1-463f-8430-537eff108f1e.png&originHeight=1921&originWidth=3000&size=612426&status=done&style=none&width=3000)\n"
  },
  {
    "id": 4810403,
    "title": "[Solved]`docker start` error:  copying bootstrap data to pipe caused \\\"write init-p: broken pipe\\\"",
    "description": "Symptonvagrant@vagrant-ubuntu-trusty-64:~$ docker start mongoDB Error response from daemon: OCI runtime create failed: container_linux.go:348: star...",
    "custom_description": null,
    "updated_at": "2020-02-27T05:27:23.000Z",
    "created_at": "2020-02-27T05:27:23.000Z",
    "slug": "nal6rz",
    "word_count": 430,
    "cover": null,
    "body": "<a name=\"QXbgh\"></a>\n## Sympton\n```shell\nvagrant@vagrant-ubuntu-trusty-64:~$ docker start mongoDB\nError response from daemon: OCI runtime create failed: container_linux.go:348: starting container process caused \"process_linux.go:297: copying bootstrap data to pipe caused \\\"write init-p: broken pipe\\\"\": unknown\n```\n\n<a name=\"Q4YxP\"></a>\n## Triage\n<a name=\"s7RJL\"></a>\n### System Info\n```shell\nvagrant ssh\nWelcome to Ubuntu 14.04.6 LTS (GNU/Linux 3.13.0-170-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com/\n\n  System information as of Thu Feb 27 02:23:03 UTC 2020\n\n  System load:  0.0               Processes:              77\n  Usage of /:   5.1% of 39.34GB   Users logged in:        0\n  Memory usage: 21%               IP address for eth0:    10.0.2.15\n  Swap usage:   0%                IP address for docker0: 172.17.0.1\n\n  Graph this data and manage this system at:\n    https://landscape.canonical.com/\n\nNew release '16.04.6 LTS' available.\nRun 'do-release-upgrade' to upgrade to it.\n```\n<a name=\"qXNfz\"></a>\n### Docker Info\n```shell\nvagrant@vagrant-ubuntu-trusty-64:~$ docker version\nClient:\n Version:           18.06.3-ce\n API version:       1.38\n Go version:        go1.10.3\n Git commit:        d7080c1\n Built:             Wed Feb 20 02:27:13 2019\n OS/Arch:           linux/amd64\n Experimental:      false\n\nServer:\n Engine:\n  Version:          18.06.3-ce\n  API version:      1.38 (minimum version 1.12)\n  Go version:       go1.10.3\n  Git commit:       d7080c1\n  Built:            Wed Feb 20 02:25:38 2019\n  OS/Arch:          linux/amd64\n  Experimental:     false\n```\n\n<a name=\"obssS\"></a>\n### Cause\nTha version of docker and that version of ubuntu have some compatibility issues.\n\n<a name=\"yQa7Z\"></a>\n### Solution `apt install docker-ce=18.06.1~ce~3-0~ubuntu jq`\nDowngrade the docker, `apt install docker-ce=18.06.1~ce~3-0~ubuntu jq` comes to the rescue:\n```shell\nvagrant@vagrant-ubuntu-trusty-64:~$ sudo apt install docker-ce=18.06.1~ce~3-0~ubuntu jq\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nRecommended packages:\n  aufs-tools cgroupfs-mount cgroup-lite git pigz\nThe following NEW packages will be installed:\n  jq\nThe following packages will be DOWNGRADED:\n  docker-ce\n0 upgraded, 1 newly installed, 1 downgraded, 0 to remove and 1 not upgraded.\nNeed to get 39.8 MB of archives.\nAfter this operation, 280 kB of additional disk space will be used.\nDo you want to continue? [Y/n] Y\nGet:1 https://download.docker.com/linux/ubuntu/ trusty/stable docker-ce amd64 18.06.1~ce~3-0~ubuntu [39.7 MB]\nGet:2 http://archive.ubuntu.com/ubuntu/ trusty-updates/universe jq amd64 1.3-1.1ubuntu1.1 [98.1 kB]\nFetched 39.8 MB in 56s (702 kB/s)\ndpkg: warning: downgrading docker-ce from 18.06.3~ce~3-0~ubuntu to 18.06.1~ce~3-0~ubuntu\n(Reading database ... 63463 files and directories currently installed.)\nPreparing to unpack .../docker-ce_18.06.1~ce~3-0~ubuntu_amd64.deb ...\ndocker stop/waiting\nUnpacking docker-ce (18.06.1~ce~3-0~ubuntu) over (18.06.3~ce~3-0~ubuntu) ...\nSelecting previously unselected package jq.\nPreparing to unpack .../jq_1.3-1.1ubuntu1.1_amd64.deb ...\nUnpacking jq (1.3-1.1ubuntu1.1) ...\nProcessing triggers for man-db (2.6.7.1-1ubuntu1) ...\nProcessing triggers for ureadahead (0.100.0-16) ...\nSetting up docker-ce (18.06.1~ce~3-0~ubuntu) ...\ndocker start/running, process 4075\nSetting up jq (1.3-1.1ubuntu1.1) ...\n```\n\n<a name=\"0momp\"></a>\n## Verification\n\n```shell\nvagrant@vagrant-ubuntu-trusty-64:~$ docker start mongoDB\nmongoDB\n\nvagrant@vagrant-ubuntu-trusty-64:~$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                      NAMES\ncfa48a8939cc        mongo:2             \"/entrypoint.sh mong…\"   3 hours ago         Up 9 minutes        0.0.0.0:27017->27017/tcp   mongoDB\n```\n\n"
  },
  {
    "id": 4592569,
    "title": "[Workaround] webpack error: Variable 'require' must be of type 'Require', but here has type 'NodeRequire'.",
    "description": "Sympton:TypeScript Webpack Project with ​StoryBook enabled, when running ​npm run storybook the following error occurs:ERROR in [at-loader] ./node_...",
    "custom_description": null,
    "updated_at": "2020-02-18T03:53:17.000Z",
    "created_at": "2020-02-18T03:53:17.000Z",
    "slug": "ze4cvy",
    "word_count": 102,
    "cover": null,
    "body": "<a name=\"4BrLg\"></a>\n## Sympton:\nTypeScript Webpack Project with `StoryBook` enabled, when running `npm run storybook` the following error occurs:\n\n```powershell\nERROR in [at-loader] ./node_modules/@types/webpack-env/index.d.ts:283:13\n    TS2403: Subsequent variable declarations must have the same type.  Variable 'require' must be of type 'Require', but here has type 'NodeRequire'.\n```\n\n<a name=\"7BL8n\"></a>\n## Workaround:\nJust delete the shit `webpack-env` manually:\n\n```powershell\nrmdir /s node_modules\\@types\\webpack-env\n```\n\n<a name=\"u105A\"></a>\n## Caveats:\nIt will still reappear if you run `npm i` in the future. You need to redelete that folder again.\n"
  },
  {
    "id": 4454559,
    "title": "在 Windows 上运行 shell docker 脚本",
    "description": "问题：在 macOS 编写的一些操作 docker 的脚本，想要不用修改，直接在 Windows cmd 上运行。解决方案：安装 bash scoop install bash bash -c \\\"export DOCKER_HOST='tcp://0.0.0.0:2375'&&your-sc...",
    "custom_description": null,
    "updated_at": "2020-02-11T05:03:54.000Z",
    "created_at": "2020-02-11T05:03:54.000Z",
    "slug": "sgx82e",
    "word_count": 192,
    "cover": null,
    "body": "<a name=\"VptY4\"></a>\n## 问题：\n在 `macOS` 编写的一些操作 `docker` 的脚本，想要不用修改，直接在 `Windows cmd` 上运行。\n<a name=\"kw39O\"></a>\n## 解决方案：\n\n- 安装 `bash` \n   - `scoop install bash` \n- `bash -c \\\"export DOCKER_HOST='tcp://0.0.0.0:2375'&&your-script.sh\\\"` \n<a name=\"aZeus\"></a>\n## 说明：\n其中 `export DOCKER_HOST='tcp://0.0.0.0:2375'` 很关键，不然会报错：\n\n```powershell\n\nCannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\nCannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\nlocal-mysql is already killed\nCannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\nlocal-mysql not exist\ndocker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?.\nSee 'docker run --help'.\n```\n\n"
  },
  {
    "id": 3252828,
    "title": "什么是闭包？",
    "description": "闭包就是一个不会瘪掉的气球。或者说是一种特殊气球运用的一种手段，使得它自己不会瘪下去。JavaScript 的世界，就是一个气球世界。在一个运行着的 JavaScript 程序里，不断有气球被吹起来，又瘪下去。（就像三体人，会脱水，又能吸水复活）你大概知道，JavaScript 里函数是一等公...",
    "custom_description": null,
    "updated_at": "2019-11-19T05:09:35.000Z",
    "created_at": "2019-11-19T03:53:42.000Z",
    "slug": "kdmpa6",
    "word_count": 1338,
    "cover": null,
    "body": "闭包就是一个不会瘪掉的气球。或者说是一种特殊气球运用的一种手段，使得它自己不会瘪下去。\n\nJavaScript 的世界，就是一个气球世界。在一个运行着的 JavaScript 程序里，不断有气球被吹起来，又瘪下去。（就像三体人，会脱水，又能吸水复活）\n\n你大概知道，JavaScript 里函数是一等公民。一般来说，当函数开始执行，你就会看到一个气球被吹起来了。当函数执行完毕，气球就瘪下去了。\n\n```javascript\nfunction bubble() {\n  const hello = '气球这时被吹起来了';\n  \n  return hello;\n  \n  // 这时气球即将瘪下去\n}\n\nbubble()\nbubble()\n```\n\n这个气球，就是 JavaScript 的作用域。气球里，基本上装的就是变量。如果一个函数里变量很多，每个变量存的数据很多，当函数执行时，这个气球就会被吹得很大。\n\n但无论这个气球被吹得多大，当函数执行完毕，其中的变量会被垃圾回收程序回收掉，于是这个气球就瘪掉了。\n\n你应该知道，垃圾回收时，是看它被引用的计数是多少，一旦引用计数是 0，就会被回收掉。一般气球里的变量，也就是函数内定义的变量，只在函数里被引用，所以当函数执行完毕，引用计数就为 0 了。所有的变量都被回收，气球也就破灭了。（如果你看过《寻梦环游记》这部电影，可以好好回味一下它的主题曲《Remember me》：阴间的亡灵都有一个引用记数，即被多少阳间的人记着。一旦阳间所有人都忘记了那个亡灵，那么它就真正地永远消逝了。）\n\n前面说的都是一般的函数，或者说一般的气球。还有另一种函数：高阶函数，即返回函数的函数。这种函数，也就是气球，一旦吹起来，就不会瘪下去（除非程序中止）：\n\n```javascript\nfunction outerBubble() {\n  const hello = '气球被吹起来';\n  \n  return function innerBuble() {\n    const world = '小气球被吹起来'\n    \n    return hello;\n    // world 即将死去，小气球会瘪下去\n  }\n  // 这时小气球瘪了，但是外面的大气球却不会瘪：hello 还活着\n}\n\nconst bubble = outerBubble();\nbubble();\nbubble();\n```\n\n这里注意：函数最终都是要返回一个值的。即使没有 return 语句，也是返回了一个 undefined。高阶函数很特殊，它返回了一个函数：也就是它吐出了另一个气球。\n\n一般的气球（一阶函数）吐出的是一个普通的值，外界拿到了这个值，就把气球放气了，因为暂时不需要了，目的已经达到。但是要注意，气球瘪下去，只是消灭了气球内部的变量，而气球本身还在，可以随时被再吹起来。只是再吹起来时，里面的变量都是重新生成的，之前死去的变量，是真正的死去了，就像人生轮回一样，那些变量既不知道它的前世，也无法控制它的来世。只是冥冥之中，它们是“同一个”变量。\n\n高阶函数就狡猾了，它不直接吐出这个要命的值，而是把这个值，用另一个气球包起来后，再吐出去。这时外界收到另一个气球（尽管是瘪着的状态），就不敢把原来的气球放气压瘪，也就是原来的气球里的变量（只要被包在了新的气球里），就不会死亡。外界（程序）要拿到那个最终的值，需要执行那个被返回的函数，也就是需要吹起那个被吐出来的气球。尽管拿到那个值后，会把被吐出来的气球放气、压瘪，但不能保证后面它还会被吹起来，所以原来的气球里的那个被直接或者间接包起来的变量，其引用计数就一直大于 0，垃圾回收程序看到它都会绕着走。\n\n就这样，通过吐出另外一个气泡的小把戏，这个高阶函数就能一直处于充气的状态。尽管，它可能不会把所有的变量都包在另外的气球里，所以它执行完可能体积会变小一些，但不会被完全压瘪：有那些它想保护起来的变量（们）撑着呢。\n\n这种耍小把戏的高阶函数，就是闭包函数。这种小把戏的名字，就叫闭包：因为它吐出（返回）前，将一些东西包了起来。\n"
  },
  {
    "id": 3077762,
    "title": "Taro 项目的 Docker 化开发",
    "description": "这里有一个完整的示例：https://github.com/Jeff-Tian/me。它不仅实现了本地 Docker 化开发，还利用 Travis CI （https://travis-ci.com/Jeff-Tian/me）在每次提交代码后自动打包新的镜像并推送至 Docker Hub。步骤...",
    "custom_description": null,
    "updated_at": "2019-11-04T12:53:00.000Z",
    "created_at": "2019-11-04T12:53:00.000Z",
    "slug": "wrorcm",
    "word_count": 234,
    "cover": null,
    "body": "这里有一个完整的示例：[https://github.com/Jeff-Tian/me](https://github.com/Jeff-Tian/me)。它不仅实现了本地 Docker 化开发，还利用 Travis CI （[https://travis-ci.com/Jeff-Tian/me](https://travis-ci.com/Jeff-Tian/me)）在每次提交代码后自动打包新的镜像并推送至 Docker Hub。\n<a name=\"K0bfa\"></a>\n## 步骤\n<a name=\"7UkSI\"></a>\n### 1. 在项目里添加 `Dockerfile` \n```dockerfile\nFROM node:10\n\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 10086\n\nCMD [\"npm\", \"run\", \"dev:h5\"]\n```\n\n<a name=\"mu11B\"></a>\n### 2. 再添加一个 `.dockerignore` 文件\n```\nnode_modules\nnpm-debug.log\n.git\n```\n<a name=\"sRUSs\"></a>\n### \n<a name=\"lm7Fu\"></a>\n### 3. 集成到 Travis CI 步骤里\n需要在 Travis CI 项目的设置里，添加 `DOCKER_USERNAME` 和 `DOCKER_PASSWORD` 两个环境变量。然后在 `.travis.yml` 文件里添加如下内容：\n\n```yaml\nservices:\n  - docker\n\ninstall:\n  - echo \"$DOCKER_PASSWORD\" | docker login -u \"$DOCKER_USERNAME\" --password-stdin\n\nscript:\n  - docker build -t \"$DOCKER_USERNAME\"/me .\n  - docker images\n  - docker run -d -p 127.0.0.1:10086:10086 --name me \"$DOCKER_USERNAME\"/me\n  - docker ps | grep -q me\n  - docker push \"$DOCKER_USERNAME\"/me\n\n```\n\n完成。\n"
  },
  {
    "id": 3056241,
    "title": "Coding.Net + 阿里云 npm 模块仓库 自动化发包",
    "description": "让一切自动化，干掉所有人肉操作。对于 npm 包的作者来说，利用 semantic-release 就能解放双手，只需要提交代码，让发包自动进行。如果代码托管在 GitHub 上，而且 npm 包最后是要发布到官方仓库里的话，那么可以配合 TravisCI 来完成。这样就非常简单，只需要运行一...",
    "custom_description": null,
    "updated_at": "2019-11-04T04:05:42.000Z",
    "created_at": "2019-11-02T09:47:00.000Z",
    "slug": "eoqqzc",
    "word_count": 837,
    "cover": null,
    "body": "让一切自动化，干掉所有人肉操作。对于 npm 包的作者来说，利用 semantic-release 就能解放双手，只需要提交代码，让发包自动进行。<br />如果代码托管在 GitHub 上，而且 npm 包最后是要发布到官方仓库里的话，那么可以配合 TravisCI 来完成。这样就非常简单，只需要运行一下：\n```bash\nsemantic-release-cli setup \n```\n就能自动完成相关的配置（GitHub 和 TravisCI 的 token 创建等等），而你只需要在项目里添加一个 `.travis.yml` 文件即可。具体实例可见：[https://github.com/Jeff-Tian/wechat-oauth-ts](https://github.com/Jeff-Tian/wechat-oauth-ts)\n\n但是对于其他代码托管服务，或者是将包发布到自己的模块仓库，就没这么方便了。不过虽然用不了 `semantic-release-cli` ，但是 `semantic-release` 本身还是可以用的。<br />这里给一个具体的例子，代码托管在 Coding.Net 上，模块仓库在阿里云，利用 Jenkinsfile 来完成自动化。\n<a name=\"q1klK\"></a>\n## 在 `package.json` 里添加 `semantic-release` 相关依赖\n\n```json\n{\n  ...\n  \"devDependencies\": {\n    ...\n    \"@semantic-release/npm\": \"^5.3.1\",\n    \"semantic-release\": \"^15.13.28\"\n  }\n  ...\n}\n```\n\n<a name=\"Aalmy\"></a>\n## 在项目中添加 `.releaserc` \n\n```json\n{\n    \"branch\": \"master\",\n    \"repositoryUrl\": \"git@e.coding.net:xxx/yyy.git\",\n    \"plugins\": [\n        [\"@semantic-release/npm\", {\n          \"npmPublish\": true\n        }]\n    ]\n}\n\n```\n\n<a name=\"z7f5L\"></a>\n## 在项目中创建 Jenkinsfile\n\n```groovy\npipeline {\n    agent any\n    stages  {\n\n        stage(\"检出\") {\n            steps {\n                checkout(\n                    [$class: 'GitSCM', branches: [[name: env.GIT_BUILD_REF]],\n                    userRemoteConfigs: [[url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID]]]\n                )\n            }\n        }\n\n        stage(\"安装\") {\n            steps {\n                echo \"构建中...\"\n                sh 'docker version'\n                sh 'npm i'\n                sh 'npm rebuild'\n                echo \"构建完成.\"\n            }\n        }\n\n        stage(\"测试\") {\n            steps {\n                echo \"单元测试中...\"\n                // 请在这里放置您项目代码的单元测试调用过程，例如:\n                // sh 'mvn test' // mvn 示例\n                // sh 'make test' // make 示例\n                sh 'npm test'\n                echo \"单元测试完成.\"\n            }\n        }\n\n        stage('发包') {\n            steps {\n                sh 'echo \"registry=https://registry-node.aliyun.com/org/xxx/registry/yyy/\" >> .npmrc'\n                sh 'echo \"//registry-node.aliyun.com/org/xxx/registry/yyy/:_password=${npm_password}\" >> .npmrc'\n                sh 'echo \"//registry-node.aliyun.com/org/xxx/registry/yyy/:username=${npm_username}\" >> .npmrc'\n                sh 'echo \"//registry-node.aliyun.com/org/xxx/registry/yyy/:email=${npm_email}\" >> .npmrc'\n                sh 'echo \"//registry-node.aliyun.com/org/xxx/registry/yyy/:always-auth=false\" >> .npmrc'\n                sh 'echo \"grpc_node_binary_host_mirror=https://npm.taobao.org/mirrors\" >> .npmrc'\n                sh 'NODE_ENV=production npm run build'\n                sh 'npx semantic-release --debug --no-dry-run --no-ci --unsafe-perm'\n            }\n        }\n    }\n    environment {\n        GIT_CREDENTIALS = \"your-coding-user-name:${coding_token}\"\n        NPM_CONFIG_REGISTRY = 'https://registry-node.aliyun.com/org/xxx/registry/yyy/'\n    }\n}\n\n```\n\n<a name=\"fNUAB\"></a>\n## 创建 Coding.Net 访问令牌\n这是用来让 Jenkinsfile 读取代码用的，后面会通过环境变量形式注入到 Jenksinfile：<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572687439407-f9fb1bbd-cef9-491c-ade4-e178c7f4f989.png#align=left&display=inline&height=454&name=image.png&originHeight=454&originWidth=1405&size=73547&status=done&width=1405)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572687503404-3999556f-ca3e-4948-8192-afb46de6298d.png#align=left&display=inline&height=739&name=image.png&originHeight=739&originWidth=982&size=119454&status=done&width=982)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572687576248-b4f38a02-7bea-4fa1-9d3e-9e00e6a5ecc4.png#align=left&display=inline&height=317&name=image.png&originHeight=317&originWidth=1010&size=38903&status=done&width=1010)<br />将访问令牌复制下来。一旦你关闭这个页面就再也看不到明文令牌了，如果你没有及时复制就关闭了，可以重新再创建一个。\n<a name=\"l0O0V\"></a>\n## 配置 Coding.Net 持续集成 Jobs\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572686929793-d24761b6-0877-4777-b513-1841b3495c12.png#align=left&display=inline&height=649&name=image.png&originHeight=649&originWidth=1304&size=111455&status=done&width=1304)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572686986748-42d0c8d3-0390-44ff-b061-943960070b04.png#align=left&display=inline&height=777&name=image.png&originHeight=777&originWidth=674&size=90166&status=done&width=674)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572687174070-dfa8a5ef-69be-4a00-9845-e5d294e6e443.png#align=left&display=inline&height=753&name=image.png&originHeight=753&originWidth=1098&size=151924&status=done&width=1098)<br />注意，在最后一步需要用相关的环境变量形式把阿里 npm 模块仓库的认证信息填写上去：<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572687679938-b9b9be3a-a0f1-4407-b550-5b4c3c593847.png#align=left&display=inline&height=633&name=image.png&originHeight=633&originWidth=767&size=78493&status=done&width=767)\n<a name=\"Bf1XI\"></a>\n## 配置完成，手动触发第一次构建吧：\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572687751922-783f16b8-a48c-4d68-8f8f-11894bd5b097.png#align=left&display=inline&height=216&name=image.png&originHeight=216&originWidth=1048&size=13349&status=done&width=1048)![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572687808005-084619d4-6d2c-4ebb-995b-4e24fe313fdf.png#align=left&display=inline&height=445&name=image.png&originHeight=445&originWidth=571&size=23110&status=done&width=571)\n<a name=\"JH48Z\"></a>\n## 后续自动发布\n只要代码提交，都会触发一次构建。但是会不会发布新的版本，就看提交历史是怎么写的了：<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572687928708-8e2e43c1-f4fe-4c6a-9091-edcb90af0944.png#align=left&display=inline&height=571&name=image.png&originHeight=571&originWidth=1294&size=95624&status=done&width=1294)<br />如果有新的版本发布成功，就会自动同步一个版本号到代码版本的标签栏中：<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/221736/1572688002959-5441d639-dd18-4fa1-ab13-0c302b5004e0.png#align=left&display=inline&height=633&name=image.png&originHeight=633&originWidth=1529&size=140716&status=done&width=1529)\n\n\n"
  },
  {
    "id": 3055523,
    "title": "纯 webpack 项目，配置 mock 模式",
    "description": "如《前端开发的正确姿势》所述，前后端分离开发，并行任务时，前端需要使用到 mock 模式。如果使用 umi 项目，自带 mock 模式；这篇文章给出一个非 umi 项目的纯 webpack 例子，说明如何进行 mock 模式配置。同《前端开发的正确姿势》所述，这里也要用到 devServer ...",
    "custom_description": null,
    "updated_at": "2021-02-17T06:23:23.000Z",
    "created_at": "2019-11-02T07:45:29.000Z",
    "slug": "shmd9d",
    "word_count": 246,
    "cover": null,
    "body": "如《[前端开发的正确姿势](https://www.yuque.com/tianjie-cjnre/sldmka/xo3zza)》所述，前后端分离开发，并行任务时，前端需要使用到 mock 模式。<br />如果使用 umi 项目，自带 mock 模式；这篇文章给出一个非 umi 项目的纯 webpack 例子，说明如何进行 mock 模式配置。<br />同《[前端开发的正确姿势](https://www.yuque.com/tianjie-cjnre/sldmka/xo3zza)》所述，这里也要用到 devServer 配置，具体来说，在 setup 里配置 mock 返回的数据，再通过一个 proxy 来实现在 mock 模式下向 mock 接口发起请求：<br />\n\n```javascript\n  devServer: {\n    setup: app => {\n      app.get('/api/*', (req, res) => {\n        setTimeout(() => {\n          res.json({ custom: 'mock response' });\n        }, 3000);\n      });\n    },\n    proxy: process.env.MOCK ? {\n      '/api': {\n        target: 'http://localhost:3333/api',\n        changeOrigin: true\n      }\n    }/* mock 模式 */ : {\n      '/api': {\n        target: 'https://dev.example.com',\n        changeOrigin: true,\n        withCredentials: true,\n        headers: {\n          Cookie: ''\n        }\n      }\n    } /* dev 模式 */\n  }\n```\n\n\n"
  },
  {
    "id": 2608139,
    "title": "前端开发的正确姿势",
    "description": "背景：前后端分离开发，好处是关注点分离，以及并行开发提高效率。实际工作中碰到的问题：并行不起来，前端依赖接口，在接口没好时，不会进行开发。在接口没好时，写死一些数据开发页面，接口好了后，对接起来要改大量代码，效率低下解决方案：引入两种开发模式，而且通过良好的配置，使得在这两种开发模式可以自由切...",
    "custom_description": null,
    "updated_at": "2019-09-12T13:48:52.000Z",
    "created_at": "2019-09-12T13:48:52.000Z",
    "slug": "xo3zza",
    "word_count": 592,
    "cover": null,
    "body": "<a name=\"YFPKE\"></a>\n## 背景：\n前后端分离开发，好处是关注点分离，以及并行开发提高效率。\n<a name=\"QBSHe\"></a>\n## 实际工作中碰到的问题：\n\n- 并行不起来，前端依赖接口，在接口没好时，不会进行开发。\n- 在接口没好时，写死一些数据开发页面，接口好了后，对接起来要改大量代码，效率低下\n<a name=\"aKg2y\"></a>\n## 解决方案：\n引入两种开发模式，而且通过良好的配置，使得在这两种开发模式可以自由切换，不用更改任何代码。\n\n- 第一步：**mock** 模式下开发（ `npm run mock` ）：在接口没好时，使用 mock 模式开发。注意，mock 与直接页面写死数据不同，mock 是模拟接口返回的数据，至于请求接口这些代码仍然要写，而且当接口好了之后，切换到请求真实接口，不需要改动任何代码\n- 第二步：**代理**模式下开发（ `npm run proxy` ）：在接口完成后，使用 代理 模式开发。注意，代理模式是从本地直接请求真实接口，这与运行时的请求真实接口不同，因为运行时的域名不会是 localhost。\n\n项目发布后，是运行模式，这与以上两种模式都是有区别的。\n<a name=\"jbeCt\"></a>\n## 示例：\n以 umi 项目为例，在 `package.json` 里加上两个 `scripts` :\n```json\n{\n  ...\n  \"scripts\": {\n    \"mock\": \"umi dev\",\n    \"proxy\": \"UMI_ENV=dev MOCK=none umi dev\"\n  }\n  ...\n}\n```\n可以看出， `umi` 项目自动开启 `mock` 开发模式，具体可以参考 `umi` 项目的 `mock` 配置。对于其他非 `umi` 项目，也可以自行配置。<br />而对于 `proxy` 模式，则需要本地通过 `localhost` 服务器代码去访问真实接口给前端用，这样才不会有跨域等问题。这个一般 `webpack` 项目都可以很简单地配置出来，如下：\n```json\nproxy: {\n\t'/api': {\n    target: 'https://your.domain.com/api',\n    changeOrigin: true,\n    pathRewrite: {'^/api': ''}\n  }\n}\n```\n前端请求接口的代码如下：\n```typescript\nfetch(`/api/xxx`, ...)\n```\n注意，通过以上配置后，无论是 `mock` 开发模式，还是 `proxy` 模式，还是运行时模式，前端请求接口的代码都不用变。<br />如果涉及到接口需要用户登录的场景，那么以上 `proxy` 配置改成这样即可：\n\n```json\nproxy: {\n\t'/api': {\n    target: 'https://your.domain.com/api',\n    changeOrigin: true,\n    pathRewrite: {'^/api': ''},\n    withCredentials: true,\n    headers: { Cookie: 'YourToken=9fk_i8oJE5xoqSvi4DS9RhDZARMskBLc-pD0oHDPK0r' },\n  }\n}\n```\n\n"
  }
]